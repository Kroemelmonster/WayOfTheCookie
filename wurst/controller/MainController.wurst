package MainController

import UIController
import NPC
import Stack

import initlater Hero
import initlater HostileArmy
import initlater Board
import PlayerData
import initlater UIWindow
import initlater HeroData

public class MainController
    static function startGame()
        Player.forEachActive() activePlayer ->
            activePlayer.onAnyKeyPress() (Player p, string key) ->
                onkeyPress(p, key)

            UIController.initHero(activePlayer.hero)

    private static function onkeyPress(Player p, string key)
        if key == "Escape"
            UIWindow.closeCurrent(p)
        if p.playingBoard != null
            return


    static function startFight(Hero hero, HostileArmy enemy, Board board)
        // TODO CombarLog ("HIER BEGINNT DER KAMPF ZWISCHEN "+hero.toString()+ " vs "+enemy.toString())
        hero.enable(false)
        enemy.enable(false)

        board.placeCombat(hero, enemy) ->
            UIController.switchToCombat(board)
            board.startCombat()


    static function endFight(Board board, int side)
            // TODO
        Log.info("yo end fight needs some dooing")
            /*
        let hero = board.getHero(0)
        let enemy = board.getHostileArmy()
        let p = hero.getPlayer()

        let result = new FightResult(hero, enemy.getArmy(), side)

        UIMenuWorldConsole.showFightResult(p, result) -> 
            UIController.switchToWorld(p)
            board.endFight()
            nullTimer() ->
                result.execute(hero)
                hero.enable(true)
                enemy.kill()*/
            
    static function updateHeroData(Hero hero, HeroDataChange changedData)
        UIController.updateHeroData(hero, changedData)

    static function interact(Hero hero, NPC npc)
        hero.startInteract(npc)

    // TODO old
    /*
    static function addStack(Hero hero, Stack stack, int amount)
        hero.addStack(stack.getStackType(), amount)
        stack.setAmount(stack.getAmount() - amount)

    
    static function payGold(Hero hero, int amount)
        hero.addGold(-amount)


    static function buyStack(Hero hero, Stack stack, int amount, int cost)
        payGold(hero, amount * cost)
        addStack(hero, stack, amount)
        */

    static function splitStack(Hero hero, Stack stack, int intoAmount)
        if hero.army.has(stack)
            stack.addAmount(-intoAmount)
            hero.army.addAtFree(stack.typ, intoAmount)