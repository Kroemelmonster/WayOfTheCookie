package MainController

import UIController
import NPC
import Stack

import initlater Hero
import initlater HostileArmy
import initlater Board
import PlayerData
import initlater UIHeroWindow
import initlater UINPCWindow
import ClosureTimers
import UIWorldConsole
import FightResult
import initlater UIWindow

public class MainController
    static function setup()
        Player.forEachActive() (Player activePlayer) ->
            activePlayer.onAnyKeyPress() (Player p, string key) ->
                onkeyPress(p, key)

    private static function onkeyPress(Player p, string key)
        if key == "Escape"
            UIWindow.closeCurrent(p)
        if p.playingBoard != null
            return
        // TODO make HeroWindow actually a window


    static function startFight(Hero hero, HostileArmy enemy, Board board)
        // TODO CombarLog ("HIER BEGINNT DER KAMPF ZWISCHEN "+hero.toString()+ " vs "+enemy.toString())
        hero.enable(false)
        enemy.enable(false)

        board.placeCombat(hero, enemy)
        UIController.switchToCombat(board)
        board.startCombat()


    static function endFight(Board board, int side)
        let hero = board.getHero(0)
        let enemy = board.getHostileArmy()
        let p = hero.getPlayer()

        let result = new FightResult(hero, enemy.getArmy(), side)

        UIWorldConsole.showFightResult(p, result) -> 
            UIController.switchToWorld(p)
            board.endFight()
            nullTimer() ->
                result.execute(hero)
                hero.enable(true)
                enemy.kill()
            

    static function interact(Hero hero, NPC npc)
        hero.startInteract(npc)

    static function payGold(Hero hero, int amount)
        hero.addGold(-amount)

    static function addStack(Hero hero, Stack stack, int amount)
        hero.addStack(stack.getStackType(), amount)
        stack.setAmount(stack.getAmount() - amount)

    static function buyStack(Hero hero, Stack stack, int amount, int cost)
        payGold(hero, amount * cost)
        addStack(hero, stack, amount)

    static function splitStack(Hero hero, Stack stack, int intoAmount)
        if hero.getArmy().hasStack(stack)
            stack.setAmount(stack.getAmount() - intoAmount)
            hero.addStackAtFree(stack.getStackType(), intoAmount)

    static function toggleHeroWindow(Player p)
        openHeroWindow(p, UIHeroWindow.isVisibleToPlayer(p) == false)

    static function openHeroWindow(Player p, boolean flag)
        if flag
            UINPCWindow.hide(p)
        p.hero.enable(flag == false)
        UIHeroWindow.setVisible(p, flag)
        
        
        