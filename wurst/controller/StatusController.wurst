package StatusController

import initlater StatusType
import initlater Status
import initlater BoardStack

import BoardEntity
import BoardTrigger

public class StatusController 

    static function has(StatusType statusType, BoardEntity entity) returns boolean
        return get(statusType, entity) != null

    static function get(StatusType statusType, BoardEntity entity) returns Status
        Status result = null
        let itr = entity.statusIterator()
        while itr.hasNext() and result == null
            let b = itr.next()
            if b.getType() == statusType
                result = b
        destroy itr
        return result

    static function canApply(StatusType statusType, BoardEntity entity, StatusData data) returns boolean
        let result = statusType.canApplyTo(entity, data)
        if data != null
            destroy data
        return result

    /** the sequenz gives you the resulting status **/
    static function apply(StatusType statusType, BoardEntity entity, StatusData data, SequenzListenerData<Status> next)
        let oldStatus = get(statusType, entity)
        if oldStatus != null
            oldStatus.refresh(data)
            next.continue(oldStatus)
        else if statusType.canApplyTo(entity, data)
            next.continue(statusType.applyNewStatusTo(entity, data))
        else
            next.continue(oldStatus)

    static function purge(StatusType statusType, BoardEntity entity, SequenzListener next)
        let b = get(statusType, entity)
        if b == null
            next.continue()
            return
        b.purge(next)

    static function hideAll(BoardStack stack)
        let itr = stack.statusIterator()
        while itr.hasNext()
            itr.next().hide()

        destroy itr
