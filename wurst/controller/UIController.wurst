package UIController

import initlater UIMenuWorldConsole

import initlater Board
import initlater PlayerData
import initlater Cell
import initlater BoardStack
import initlater Action

import initlater UIMenuBoardConsole
import initlater OrderSystem
import initlater InitiativeList
import initlater MouseContext
import initlater BoardEntity
import BoardTrigger
import ClosureTimers
import LinkedList
import UIWindow
import initlater Hero
import initlater HeroData
import initlater UIMenuConsole
import initlater UIMenuActionConsole
import initlater UIWindowEntity
import PlayerBoardHelper
import initlater UIWindowSkillTree
import initlater UIWindowHero
import initlater UIWindowSpellBook

class UIController
    static function initHero(Hero hero)
        UIMenuConsole.initHero(hero)
        UIMenuWorldConsole.initHero(hero)
        switchToWorld(hero.getPlayer())

    static function selectEntity(Player p, BoardEntity entity, boolean directSelect)
        PlayerBoardHelper.getPlayerBoard(p).draw(p)
        UIMenuActionConsole.update(p)
        if directSelect
            UIWindowEntity.open(p, entity)
            
    static function triggerOnActionChange(Board board)
        let currentEntry = PlayerBoardHelper.getCurrentActiveEntity(board)
        currentEntry.getCurrentAction().onAnyStackCellChange()
        let currentPlayer = currentEntry.getConntrollingPlayer()

        board.draw(currentPlayer)
        UIMenuActionConsole.update(currentPlayer)

    static function triggerOnStackCreationOrDeathChange(Board board, SequenzListener next)
        triggerOnAnyStackCellChange(board) -> 
            // TODO this should be hannelded in initiative List
            UIMenuBoardConsole.refresh(board.getInitiative())
            next.continue()

    static function triggerOnMaxActionPointChange(BoardEntity entity, SequenzListener next)
        entity.resetAP()
        triggerOnAnyStackCellChange(entity.getBoard(), next)
        
    static function triggerOnAnyStackCellChange(Board board, SequenzListener next)
        let allstacks = board.getACopyOfAllStacks()
        let itr = allstacks.iterator()
        triggerOnAnyStackCellChangeInner(itr) -> 
            destroy itr
            destroy allstacks
            board.drawAll()
            next.continue()

    private static function triggerOnAnyStackCellChangeInner(LLIterator<BoardStack> itr, SequenzListener next)
        nullTimer() -> 
            if itr.hasNext()
                let stack = itr.next()
                stack.recalcualtePath()
                stack.getDefaultAction().onAnyStackCellChange()
                triggerOnAnyStackCellChangeInner(itr, next)
            else
                next.continue()

    static function triggerOnPlayerCellHighlight(Player p)
        if OrderSystem.canOrderAndInteract(p)
            // currentSelectStack is also the current stack inintaitve
            p.currentSelectedEntity.getCurrentAction().recalculateHighlight(p)

        
        p.playingBoard.draw(p)

    static function triggerOnStackAmountChange(BoardStack stack)
        UIMenuBoardConsole.refresh(stack.getConntrollingPlayer().playingBoard.getInitiative())
    
    static function onTurnEnd(BoardEntity entity)
        entity.setHighlight(false)

    static function onTurnStart(BoardEntity entity)
        MouseContext.forcePlayerSelect(entity.getConntrollingPlayer(), entity.getCell())
        entity.setHighlight(true)
        entity.getBoard().drawAll()
        UIMenuActionConsole.update(entity.getBoard().getPlayer(0))
        UIMenuActionConsole.update(entity.getBoard().getPlayer(1))

    static function triggerOnActiveEntityActionPointChange(BoardEntity entity)
        UIMenuActionConsole.update(entity.getConntrollingPlayer())
        entity.recalcualtePath()
        entity.getDefaultAction().onAnyStackCellChange()
        entity.getBoard().drawAll()

    static function updateHeroData(Hero hero, HeroDataChange changedData)
        UIMenuConsole.updateHeroData(hero, changedData)

    private static function switchToCombat(Player p)
        UIWindow.closeAll(p)
        UIMenuWorldConsole.hide(p)
        UIMenuBoardConsole.show(p)
        UIWindowSkillTree.get().disable(p)
        UIWindowHero.setEnabled(p, false)

    static function switchToCombat(Board b)
        switchToCombat(b.getPlayer(0))
        switchToCombat(b.getPlayer(1))
        
    static function switchToWorld(Player p)
        // TODO mabe still do this : p.blzPlayer.setCameraPosition(p.hero.getCoord())
        
        UIWindow.closeAll(p)
        UIMenuBoardConsole.hide(p)
        UIMenuWorldConsole.show(p)
        UIWindowSkillTree.get().enable(p)
        UIWindowHero.setEnabled(p, true)