package SkillTreeTempestarii
import initlater SkillTree
import initlater Hero
import initlater ChainLightningSpell
import initlater LightningBoltSpell

import Icons
import LinkedList
import StringUtils

public class SkillTreeTempestarii extends SkillTree
    static SkillTreeType TYPE

    static function setup()
        TYPE = new SkillTreeType("Tempestarii")
        TYPE.addListener() hero -> 
            return new SkillTreeTempestarii(hero)

        
    int chainLightningLevel = -1
    int lightningBoltLevel = -1

    int lightningBoltStunLevel = -1
    int lightningBoltPurgeLevel = -1


    construct(Hero hero)
        super(TYPE, hero)

        /*
        var spellType = LightningBoltSpell.TYPE
        let lightningBoltSkill = new Skill(this, spellType.getName(), spellType.getIcon(), 0.2, 0)
        skills.add(lightningBoltSkill)
        lightningBoltSkill.addLevel(0, 0, 3)
        ..addSpellTypeAsLines(spellType, 0)
        ..addLevelListener() ->
            lightningBoltLevel ++
            hero.addSpell(LightningBoltSpell.TYPE)
        lightningBoltSkill.addLevel(0, 0, 3)
        ..addSpellTypeAsLines(spellType, 1)
        ..addLevelListener() ->
            lightningBoltLevel ++
        lightningBoltSkill.addLevel(0, 0, 3)
        ..addSpellTypeAsLines(spellType, 2)
        ..addLevelListener() ->
            lightningBoltLevel ++
        lightningBoltSkill.addLevel(0, 0, 3)
        ..addSpellTypeAsLines(spellType, 0)
        ..addLevelListener() ->
            lightningBoltLevel ++
        lightningBoltSkill.addLevel(0, 0, 3)
        ..addSpellTypeAsLines(spellType, 0)
        ..addLevelListener() ->
            lightningBoltLevel ++

        var skill = new Skill(this, "Cunning Start", Icons.bTNScrollOfRegeneration, 0.75, 0)
        skills.add(skill)
        skill.addLevel(0, 2, 2)
        ..addLine("TODO givey sour hero more initative")
        ..addLevelListener() ->
            // TODO entweder zeige diesen stat an oder mach daruas ein buff / on hero erstellung Ã¤nderung
            hero.stats.initModi.addBonus += 10
            
        let boltStunSkill = new Skill(this, LightningBoltSpell.TYPE.getName()+ " Stun", "Icons\\BTNLightningBoltStun.dds", 0.0, 0.2)
        let boltPurgeSkill = new Skill(this, LightningBoltSpell.TYPE.getName()+ " Purge", "Icons\\BTNLightningBoltPurge.dds", 0.4, 0.2)
        skills.add(boltStunSkill)
        skills.add(boltPurgeSkill)

        boltStunSkill.addLevel(1, 0, 3)
        ..setSkillTreeLevelRequirement(2)
        ..addSkillRequirement(lightningBoltSkill, 0)
        ..addBlockedBySkill(boltPurgeSkill)
        ..addLine("Modifies the Bolt to also stuns the enemy for "
         + StringUtils.primaryString(LightningBoltSpell.STUN_DURATION[0].toString())
         + " " + StringUtils.secondaryString("timeunits"))
        ..addLevelListener() ->
            lightningBoltStunLevel++
        boltStunSkill.addLevel(1, 0, 3)
        ..addLine("Modifies the Bolt to also stuns the enemy for "
         + StringUtils.primaryString(LightningBoltSpell.STUN_DURATION[1].toString()) 
         + " " + StringUtils.secondaryString("timeunits"))
        ..addLevelListener() ->
            lightningBoltStunLevel++
        boltStunSkill.addLevel(1, 0, 3)
        ..addLine("Modifies the Bolt to also stuns the enemy for "
         + StringUtils.primaryString(LightningBoltSpell.STUN_DURATION[1].toString())
         + " " + StringUtils.secondaryString("timeunits"))
        ..addLevelListener() ->
            lightningBoltStunLevel++

        boltPurgeSkill.addLevel(0, 1, 3)
        ..setSkillTreeLevelRequirement(2)
        ..addSkillRequirement(lightningBoltSkill, 0)
        ..addBlockedBySkill(boltStunSkill)
        ..addLine("Modifies the Bolt to also pruge the enemy and todo")
        ..addLevelListener() ->
            lightningBoltPurgeLevel++
        boltPurgeSkill.addLevel(0, 1, 3)
        ..addLine("Modifies the Bolt to also pruge the enemy and todo")
        ..addLevelListener() ->
            lightningBoltPurgeLevel++
        boltPurgeSkill.addLevel(0, 1, 3)
        ..addLine("Modifies the Bolt to also pruge the enemy and todo")
        ..addLevelListener() ->
            lightningBoltPurgeLevel++

        skill = new Skill(this, "Haste", Icons.bTNWindWalkOn, 0.6, 0.2)
        skills.add(skill)
        skill.addLevel(0, 1, 2)
        ..setSkillTreeLevelRequirement(2)
        ..addLine("TODO Haste Spell")
        ..addLevelListener() ->

        skill = new Skill(this, "Tornado", Icons.bTNTornado, 0.3, 0.4)
        skills.add(skill)
        skill.addLevel(2, 0, 5)
        ..setSkillTreeLevelRequirement(4)
        ..addLine("TODO Tornado Spell")
        ..addLevelListener() ->

        
        spellType = ChainLightningSpell.TYPE
        skill = new Skill(this, spellType.getName(), spellType.getIcon(), 0.5, 1.0)
        skills.add(skill)
        skill.addLevel(0, 0, 6)
        ..setSkillTreeLevelRequirement(10)
        ..addSpellTypeAsLines(spellType, 0)
        ..addLevelListener() ->
            chainLightningLevel ++
            hero.addSpell(ChainLightningSpell.TYPE)

        skill.addLevel(0, 0, 7)
        ..addSpellTypeAsLines(spellType, 1)
        ..addLevelListener() ->
            chainLightningLevel ++

        skill.addLevel(0, 0, 8)
        ..addSpellTypeAsLines(spellType, 2)
        ..addLevelListener()  ->
            chainLightningLevel ++
            */