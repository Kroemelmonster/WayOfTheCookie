package SkillTreeVenomancer

import initlater SkillTree
import initlater Hero
import Icons
import BoardStack
import LinkedList
import UITooltip
import Stack
import Talent
import Damage
import StackType
import VenomousPassive
import BoardEntity

public class SkillTreeVenomancer extends SkillTree
    private static constant string NAME = "Venomancer"

    private Talent talent = new Talent()
    private real chanceToPoison = 0.0
    private int poisonDuration = 2
    private real poisonDmg = 0.1

    private Skill magicInfusion

    private function canApplyPoisonBasedOnType(SpecificDamageInstance specificInstance) returns boolean
        if specificInstance.damageInstance.isDot
            return false
        let damageType = specificInstance.damageInstance.damageType
        let sourceType = specificInstance.damageInstance.sourceType
        if sourceType == SourceType.UNSPECIFIC
            return false
        if damageType == DamageType.PHYISICAL and sourceType == SourceType.ATTACK
            return true
        if magicInfusion.level >= 1
            return damageType == DamageType.MAGIC or damageType == DamageType.PHYISICAL
        return false

    function canApplyPoison(BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance) returns boolean
        if canApplyPoisonBasedOnType(specificInstance)
            let chance = GetRandomReal(0.0, 1.0)
            return chanceToPoison >= chance
        return false

    function getPoisonDuration() returns int
        return poisonDuration

    function getPoisonDamage(BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance) returns real
        return specificInstance.damageInstance.dmg * poisonDmg

    static function setup() returns SkillTreeType
        let skillTreeType = new SkillTreeType(NAME)
        skillTreeType.addListener() -> 
            return new SkillTreeVenomancer(skillTreeType)
        return skillTreeType

    construct(SkillTreeType skillTreeType)
        super(skillTreeType)
        
        

        addSkillTreeListener() (ArmyStack armyStack, boolean add) ->
            armyStack.stats.addUniqueTalent(talent)

        talent.addGenerateListener() (BoardStack stack) ->
            let passive = new VenomousPassive(stack, this)
            stack.addPassive(passive)
            passive.triggerOnStackCreation(stack)

        let venomousWeapon = new Skill("Venomous Weapon", Icons.bTNEnvenomedSpear, 0, 0)
        ..addDescription(Tooltip.DESCRIPTION_POISON)
        skills.add(venomousWeapon)
        let venoWep1 = venomousWeapon.addLevel(1, 1, 0, null)
        ..addLine("Gives your units a chance of "+Tooltip.primaryPercent(0.2)+ " to inflict ")
        ..addLine(Tooltip.secondaryString("Poison") + " with physical attack damage")
        ..addLevelListener() (Hero hero) ->
            chanceToPoison += 0.2

        venomousWeapon.addLevel(1, 2, 0, null)
        ..addLine("Gives your units a chance of "+Tooltip.primaryPercent(0.4)+ " to inflict ")
        ..addLine(Tooltip.secondaryString("Poison") + " with physical attack damage")
        ..addLevelListener() (Hero hero) ->
            chanceToPoison += 0.2

        venomousWeapon.addLevel(1, 3, 0, null)
        ..addLine("Gives your units a chance of "+Tooltip.primaryPercent(0.6)+ " to inflict ")
        ..addLine(Tooltip.secondaryString("Poison") + " with physical attack damage")
        ..addLevelListener() (Hero hero) ->
            chanceToPoison += 0.2

        venomousWeapon.addLevel(2, 5, 0, null)
        ..addLine("Gives your units a chance of "+Tooltip.primaryPercent(0.8)+ " to inflict ")
        ..addLine(Tooltip.secondaryString("Poison") + " with physical attack damage")
        ..addLevelListener() (Hero hero) ->
            chanceToPoison += 0.2

        let venoWep5 = venomousWeapon.addLevel(3, 7, 0, null)
        ..addLine("Gives your units a chance of "+Tooltip.primaryPercent(1.0)+ " to inflict ")
        ..addLine(Tooltip.secondaryString("Poison") + " with phyiscal attack damage")
        ..addLevelListener() (Hero hero) ->
            chanceToPoison += 0.2

        var skill = new Skill("Resist Poison", Icons.bTNResistMagic, 1, 0)
        skills.add(skill)
        skill.addLevel(0, 2, 1, null)
        ..addLine("Increased all units "+Tooltip.coloredString(Tooltip.DAMAGE_COLOR_POISON, "poison") + " Resistance by "+Tooltip.primaryPercent(0.1))
        ..addStackListener() (ArmyStack armyStack, boolean add) ->
            if add
                armyStack.stats.poisonResistance += 10
            else
                armyStack.stats.poisonResistance -= 10
        skill.addLevel(0, 3, 2, null)
        ..addLine("Increased all units "+Tooltip.coloredString(Tooltip.DAMAGE_COLOR_POISON, "poison") + " Resistance by "+Tooltip.primaryPercent(0.2))
        ..addStackListener() (ArmyStack armyStack, boolean add) ->
            if add
                armyStack.stats.poisonResistance += 20
            else
                armyStack.stats.poisonResistance -= 20


        var requirements = new LinkedList<SkillLevel>()
        requirements.add(venoWep1)
        magicInfusion = new Skill("Magic Infusion", Icons.bTNCripple, 0.75, 0.2)
        ..addDescription(Tooltip.DESCRIPTION_POISON)
        skills.add(magicInfusion)
        magicInfusion.addLevel(0, 3, 6, requirements)
        ..addLine("Your chance to "+Tooltip.secondaryString("poison")+" from " + Tooltip.secondaryString(venomousWeapon.name) + " also aplies to "+Tooltip.coloredString(Tooltip.DAMAGE_COLOR_MAGICAL, "magical")  + " damage")
        ..addLine("as well as spells casted by your units")
        magicInfusion.addLevel(0, 3, 7, null)
        ..addLine("Your chance to "+Tooltip.secondaryString("poison")+" from " + Tooltip.secondaryString(venomousWeapon.name) + " also aplies to "+Tooltip.coloredString(Tooltip.DAMAGE_COLOR_MAGICAL, "magical")  + " damage")
        ..addLine("as well as spells casted by your units and your hero")

        requirements = new LinkedList<SkillLevel>()
        requirements.add(venoWep1)
        skill = new Skill("[TODO] Vile Toxin", Icons.bTNShadowStrike, 0.25, 0.2)
        ..addDescription(Tooltip.DESCRIPTION_POISON)
        skills.add(skill)
        skill.addLevel(3, 2, 0, requirements)
        ..addLine("Your units get an attack bonus of "+Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, 2) + " for each stack of "+Tooltip.secondaryString("poison")+ " on the enemy")
        ..addLine("to a maximum of "+Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, 8))
        skill.addLevel(6, 4, 0, null)
        ..addLine("Your units get an attack bonus of "+Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, 3) + " for each stack of "+Tooltip.secondaryString("poison")+ " on the enemy")
        ..addLine("to a maximum of "+Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, 15))

        requirements = new LinkedList<SkillLevel>()
        requirements.add(venoWep5)
        skill = new Skill("[TODO] Plague", Icons.bTNPlagueCloud, 0.5, 1.0)
        ..addDescription(Tooltip.DESCRIPTION_POISON)
        skills.add(skill)
        skill.addLevel(3, 8, 3, requirements)
        ..addLine("Enemy units affected by "+Tooltip.secondaryString("poison")+ " will explode leaving a cloud a plague that deals "+Tooltip.coloredString(Tooltip.DAMAGE_COLOR_POISON, "poison"))
        ..addLine("damage based on " + Tooltip.coloredPercent(0.7) + " of the remaining potential damage the poison would deal")


            
            



