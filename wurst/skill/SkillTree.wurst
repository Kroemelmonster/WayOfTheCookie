package SkillTree
import Stack
import initlater Hero
import HeroData
import Tooltip
import initlater SpellType
import initlater StackActionType

public interface SkillStackUpdateListener
    function onStackUpdate(ArmyStack armyStack, boolean add)

interface SkillHeroUpdateListener
    function onLevel()

interface SkillTreeCreateListener
    function create(Hero hero) returns SkillTree

public class SkillLevel
    protected HeroDataChange cost
    protected LinkedList<string> desc = new LinkedList<string>
    protected Skill skill
    protected int level
    protected boolean learned = false
    LinkedList<SkillLevel> requirements
    LinkedList<Skill> blockedBySkill
    int skillTreeLevelRequirment = 0

    protected SkillHeroUpdateListener listener
    protected SkillStackUpdateListener stackListener

    construct(Skill skill, int level, HeroDataChange cost)
        this.skill = skill
        this.level = level
        this.cost = cost

    function addSkillRequirement(Skill skill, int reqLevel)
        if requirements == null
            requirements = new LinkedList<SkillLevel>()

        requirements.add(skill.getLevel(reqLevel))

    function setSkillTreeLevelRequirement(int amount)
        skillTreeLevelRequirment = amount

    function addBlockedBySkill(Skill skill)
        if blockedBySkill == null
            blockedBySkill = new LinkedList<Skill>()
        blockedBySkill.add(skill)

    function addLevelListener(SkillHeroUpdateListener listener)
        this.listener = listener

    function addStackListener(SkillStackUpdateListener stackListener)
        this.stackListener = stackListener

    function onStackUpdate(ArmyStack armyStack, boolean add)
        if stackListener != null
            this.stackListener.onStackUpdate(armyStack, add)

    function addLine(string str)
        desc.add(str)

    function addSpellTypeAsLines(StackActionType actionType, int level)
        // TODO desc.addAllAndDestroy(actionType.createTooltipLines(level, true))

    function addSpellTypeAsLines(SpellType spellType, int level)
        // TODO
        desc.addAllAndDestroy(new LinkedList<string>())

    function createTooltipLines() returns LinkedList<string>
        return desc.copy()

    protected function canLevel() returns boolean
        if not cost.canPay(skill.tree.hero)
            return false

        if skill.tree.level < skillTreeLevelRequirment
            return false

        if requirements != null
            for SkillLevel requirement in requirements
                if not requirement.learned
                    return false

        if blockedBySkill != null
            for Skill blockedSkill in blockedBySkill
                if blockedSkill.level > 0
                    return false

        return true

    protected function doLevel()
        cost.pay(skill.tree.hero)

        learned = true
        if listener != null
            listener.onLevel()


public class Skill
    SkillTree tree
    string icon
    string name
    real x
    real y
    
    int level = 0

    protected LinkedList<SkillLevel> levels = new LinkedList<SkillLevel>()

    construct(SkillTree tree, string name, string icon, real x, real y)
        this.tree = tree
        this.icon = icon
        this.name = name
        this.x = x
        this.y = y

    function addLevel(int costMight, int costMind, int costMagic) returns SkillLevel
        let cost = HeroDataChange.createForRune(costMight, costMind, costMagic)
        let newLevel = new SkillLevel(this, levels.size(), cost)
        levels.add(newLevel)
        return newLevel

    protected function getLevel(int l) returns SkillLevel
        return levels.get(l)

    function onStackUpdate(ArmyStack armyStack, boolean add)
        if level > 0
            levels.get(level - 1).onStackUpdate(armyStack, add)

    function canLevelUp() returns boolean
        if levels.size() <= level
            return false
        return levels.get(level).canLevel()

    function dolevelUp()
        if not canLevelUp()
            return
        let army = tree.hero.army
        if level > 0
            let earlierStackListener = levels.get(level - 1).stackListener
            if earlierStackListener != null
                for int i = 0 to Army.MAX_SIZE - 1
                    let stack = army.getAt(i)
                    if stack != null
                        earlierStackListener.onStackUpdate(stack, false)

        levels.get(level).doLevel()
        tree.level ++
        let stackListener = levels.get(level).stackListener
        if stackListener != null
            for int i = 0 to Army.MAX_SIZE - 1
                let stack = army.getAt(i)
                if stack != null
                    stackListener.onStackUpdate(stack, true)
        
        level ++
    
    function createTooltip() returns Tooltip
        let tt = Tooltip.create(name)
        if level > 0
            tt.addLines(levels.get(level -  1).createTooltipLines())

        if level >= levels.size()
            return tt

        if level > 0
            tt.addLine("")

        tt.addLine(KStringUtils.secondary("Next Level"))
        let nextLevel = levels.get(level)
        nextLevel.cost.setupTooltipCost(tt, tree.hero)
        
        if nextLevel.skillTreeLevelRequirment > 0
            if tree.level >= nextLevel.skillTreeLevelRequirment 
                tt.addLine(KStringUtils.data("Requires Level", KStringUtils.COLOR_POSITIVE, nextLevel.skillTreeLevelRequirment))
            else
                tt.addLine(KStringUtils.data("Requires Level", KStringUtils.COLOR_NEGATIVE, nextLevel.skillTreeLevelRequirment))

        if nextLevel.requirements != null
            for requirement in nextLevel.requirements
                let txt = requirement.skill.name + " ["+(requirement.level + 1).toString() + "]"
                if requirement.learned
                    tt.addLine(KStringUtils.data("Requires", KStringUtils.COLOR_POSITIVE, txt))
                else
                    tt.addLine(KStringUtils.data("Requires", KStringUtils.COLOR_NEGATIVE, txt))

        if nextLevel.blockedBySkill != null
            for blockingSkill in nextLevel.blockedBySkill
                let txt = blockingSkill.name
                if blockingSkill.level == 0
                    tt.addLine(KStringUtils.data("Blocked by", KStringUtils.COLOR_POSITIVE, txt))
                else
                    tt.addLine(KStringUtils.data("Blocked by", KStringUtils.COLOR_NEGATIVE, txt))

        tt.addLine("")
        for line in nextLevel.desc
            tt.addLine(line)


        
        return tt


public class SkillTreeType
    protected string name
    protected SkillTreeCreateListener listener

    construct(string name)
        this.name = name
    
    function addListener(SkillTreeCreateListener listener)
        this.listener = listener

    function getName() returns string
        return name

    function createNew(Hero hero) returns SkillTree
        return listener.create(hero)

public abstract class SkillTree
    protected SkillTreeType skillTreeType
    protected Hero hero
    protected int level = 0
    LinkedList<Skill> skills = new LinkedList<Skill>()
    
    protected SkillStackUpdateListener stackListener

    protected function addSkillTreeListener(SkillStackUpdateListener listener)
        this.stackListener = listener

    function onStackUpdate(ArmyStack armyStack, boolean add)
        if stackListener != null
            this.stackListener.onStackUpdate(armyStack, add)

    construct(SkillTreeType skillTreeType, Hero hero)
        this.skillTreeType = skillTreeType
        this.hero = hero
    
    function getName() returns string
        return skillTreeType.name

    function getLevel() returns int
        return level

    function getHero() returns Hero
        return hero

    function isSkillTreeType(SkillTreeType skillTreeType) returns boolean
        return this.skillTreeType == skillTreeType