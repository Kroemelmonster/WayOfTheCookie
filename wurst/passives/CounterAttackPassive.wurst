package CounterAttackPassive

import PassiveAction
import AttackAnimation
import BoardController
import Damage
import KUtil

import initlater BoardStack
import initlater Cell
import UITooltip
import StackType
import BoardTrigger
import WalkAndAttackAction

public class CounterAttackPassive extends PassiveAction
    private static constant int MAX_COUNTER = 1

    private int counter = MAX_COUNTER

    construct(BoardStack stack)
        super(stack, "Attack")

    override function triggerOnStackCreation(BoardStack stack)
        // TODO can a talent be destroyed ? yes -> you need to delete stuff
        stack.getTriggers().addTurnEnd() (SequenzListener next) ->
            counter = MAX_COUNTER
            next.continue()

        stack.getTriggers().addOnAttacked() (BoardStack attacker, BoardStack defender, SequenzListener next) ->
            if attacker.isAlive() and defender.isAlive() and checkForCounterAttack(attacker, attacker.getCell())
                subActionAttack(0, stack, attacker, false) (attackStatus) ->
                    counter --
                    next.continue()
            else
                next.continue()

    private function checkForCounterAttack(BoardStack _attacker, Cell fromCell) returns boolean
        if counter <= 0
            return false

        let attackRange = stack.stats.getAttackRange()
        let distance = fromCell.getDistanceTo(stack.getCell())
        return distance >= attackRange.min and distance <= attackRange.max
            
    static function createTooltip(StackType _sType) returns Tooltip
        let tooltip = Tooltip.create("Counter Attack")
        ..addLine("This unit will counter an attack of opposing unit once per round")
        return tooltip
            

