package CounterAttackPassive

import Cell
import StackPassive

import BoardEntity
import SubStackActions
import BoardListenerOnInitiative
import BoardListenerOnInteraction

init
    Initializer.register(InitializerNames.PASSIVES) -> 
        CounterAttackPassive.setup()

public class CounterAttackPassive extends StackPassive
    static StackPassiveType TYPE
    protected static function setup()
        TYPE = new StackPassiveType("Counter Attack", "Icons/PASCounterAttack.dds")
        TYPE.onCreate() (BoardStack stack, StackPassiveData data) -> 
            return new CounterAttackPassive(stack, data)
        TYPE.onCreateTooltipLines() (data, stats) -> 
            return createTooltipLines(data)
        TYPE.onCreateData() -> 
            return StackPassiveData.create()
            ..setIntData(COUNTER, 1)

    static constant COUNTER = 0
    
    private static function createTooltipLines(int counter, int maxCounter) returns LinkedList<string>
        let lines = new LinkedList<string>
        if counter == -1
            lines.add("Every round this unit will counter up to "
             + KStringUtils.primary(maxCounter) 
             + " attacks, with a basic attack.")
        else
            lines.add("Every round this unit will counter up to "
             + KStringUtils.primary(counter)
             + " / "
             + KStringUtils.primary(maxCounter)
             + " attacks, with a basic attack.")
        return lines

    private static function createTooltipLines(StackPassiveData data) returns LinkedList<string>
        return createTooltipLines(-1, data.getIntData(COUNTER))
      
    private static function createTooltipLines(CounterAttackPassive action) returns LinkedList<string>
        return createTooltipLines(action.counter, action.data.getIntData(COUNTER))

/* -------------------------------------------------------------------------- */

    private int counter

    construct(BoardStack stack, StackPassiveData data)
        super(stack, TYPE, data)
        this.counter = data.getIntData(COUNTER)
        stack.listeners().addOnTurnStart() (BoardListenerOnInitiativeData onInitData) ->
            counter = data.getIntData(COUNTER)
            onInitData.continue(false)

        stack.listeners().addOnAttacked() (BoardListenerOnInteractionData onInteractData) ->
            let attackerEntity = onInteractData.getInittiator()
            if attackerEntity.isAlive() and stack.isAlive() and checkForCounterAttack(attackerEntity)
                counter --
                SubStackActions.attack(stack, attackerEntity.toStack(), false) (attackStatus) ->
                    onInteractData.continue(true)
            else
                onInteractData.continue(false)

    private function checkForCounterAttack(BoardEntity attackerEntity) returns boolean
        if counter <= 0
            return false
        if attackerEntity.getType() != EntityType.STACK
            return false

        let distance = attackerEntity.getCell().getDistanceTo(stack.getCell())
        return distance.isBetween(stack.stats.getAttackRange())

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)