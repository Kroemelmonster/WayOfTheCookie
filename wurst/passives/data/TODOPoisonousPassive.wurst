package TODOPoisonousPassive

import AttackAnimation
import BoardController
import Damage
import KUtil

import initlater BoardStack
import initlater Cell
import initlater BoardEntity
import StackType
import BoardTrigger
import WalkAndAttackAction
import StatusController
import StatusType
import Status
import DelayAnimation
import AttachmentPoints
import AilmentPoison

/*
public class PoisonousPassive extends PassiveAction
    private static constant int DURATION = 3
    private static constant real PERCENTAGE = 0.2

    private static function getDamage(real damage) returns real
        return damage * PERCENTAGE

    construct(BoardStack stack)
        super(stack, "Poisonous")

    override function triggerOnStackCreation(BoardStack stack)
        stack.getTriggers().addOnDamageDealt() (BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next) ->
            if specificInstance.damageInstance.isDot 
                next.continue()
            else
                AilmentPoison.flashEffect(target)
                StatusController.add(AilmentPoison.TYPE, target, StatusData.createDurationR(DURATION, getDamage(specificInstance.damageInstance.dmg)))
                DelayAnimation.create(stack.getBoard(), 0.2) ->
                    next.continue()

            
    static function createTooltip(StackType _sType) returns Tooltip
        let tooltip = Tooltip.create("Poisonous")

        ..addLine(Tooltip.stat("Duration", DURATION))
        ..addLine("")
        ..addLine("Every time this unit deals damage it will inflict a Stack of "+Tooltip.secondaryString(AilmentPoison.TYPE.getName()))
        ..addLine("which deals "+Tooltip.primaryPercent(PERCENTAGE)+ " of the triggering base Damage")
        ..addLine("-----")
        // TODO ..addStatusType(AilmentPoison.TYPE, StatusData.create())
        return tooltip
        */