package WarcryBuff

import AttachmentPoints
import Icons
import Abilities

import Buff
import UITooltip

import initlater BoardStack
import initlater BuffType

public class WarcryBuff extends Buff
    private effect display
    private int duration
    
    private static constant DAMAGE_MULTI = 10
    private static constant string NAME = "Warcry"

    static function setup()
        BuffTypeSet.WARCRY = new BuffType(Icons.bTNBattleRoar, NAME, createTooltip(null)) (BoardStack stack) ->
            return new WarcryBuff(BuffTypeSet.WARCRY, stack)

    construct(BuffType bType, BoardStack stack)
        super(bType, stack)
        display = stack.addAttachEffect(Abilities.roarTarget, AttachmentPoints.overhead)

    private static function createTooltip(WarcryBuff b) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        if b == null
            tooltip.addLine("Increases the damage dealt by "+Tooltip.coloredPercent(DAMAGE_MULTI / 100.0) +" per reamining duration")
        else
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("Increases the damage dealt by "+Tooltip.coloredPercent((DAMAGE_MULTI * b.duration) / 100.0))
        
        return tooltip

    override function update(int duration)
        if this.duration < duration
            let difference = duration - this.duration
            this.duration = duration
            updateInner(difference)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this)

    private function updateInner(int durationChange)
        stack.stats.damageModi.multi += (durationChange * DAMAGE_MULTI)

    private function onTick()
        updateInner(-1)

    ondestroy
        updateInner(duration * -1)
        if display != null
            display.destr()