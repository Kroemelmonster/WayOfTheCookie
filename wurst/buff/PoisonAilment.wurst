package PoisonAilment

import AttachmentPoints
import Buff
import Icons
import UITooltip

import initlater BoardStack
import initlater BuffType
import initlater BoardController
import DamageResult
import KUtil
import StackType
import Cell
import BoardTrigger
import initlater DelayAnimation
import Ailment

public class PoisonAilment extends Buff
    private static constant string NAME = "Poison"
    private static constant string EFFECT = "Abilities\\Weapons\\PoisonArrow\\PoisonArrowMissile.mdl"

    private BoardTrigger turnStartListener
    private BoardTrigger turnEndListener
    private BoardTriggerOnDamageTaken damageTakenListener

    private AilmentStacks stacks = new AilmentStacks()

    private function getDamageRange() returns realRange
        let avg = stacks.getCombinedDamage()
        return realRange(avg * 0.8, avg * 1.2)

    static function setup()
        BuffTypeSet.POISON = new BuffType(Icons.bTNOrbOfVenom, NAME, createTooltip(null)) (BoardStack stack) ->
            return new PoisonAilment(BuffTypeSet.POISON, stack)

    construct(BuffType bType, BoardStack stack)
        super(bType, stack)

        damageTakenListener = stack.getTriggers().addOnDamageTaken() (BoardStack source, BoardStack target, DamageResult result, SequenzListener next) ->
            if result.baseDamage.isDot() == false
                dealDamage() ->
                    next.continue()

        turnStartListener = stack.getTriggers().addTurnStart() (SequenzListener next) ->
            dealDamage() ->
                next.continue()

        turnEndListener = stack.getTriggers().addTurnEnd() (SequenzListener next) ->
            if stacks.removeOneDuration()
                kill()
            next.continue()

    private static function createTooltip(PoisonAilment b) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        if b == null
            tooltip.addLine("This is bad you are poisonned ??")
        else
            tooltip.addLine(Tooltip.stat("Duration", b.stacks.getMaxDuration()))
            tooltip.addLine(Tooltip.stat("Stacks", b.stacks.size()))
            tooltip.addLine("You are currently poisoned and take "+Tooltip.coloredRange(Tooltip.COLOR_NEGATIVE, b.getDamageRange().round())+ " each turn and each time you take non-dot Damage")
        
        return tooltip

    override protected function updateInner(BuffData data)
        stacks.add(data.duration, data.realValue)

    override protected function hide()

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this)

    private function dealDamage(SequenzListener next)
        DelayAnimation.create(stack.getBoard(), 0.5) ->
            stack.flashAttachEffect(EFFECT, AttachmentPoints.chest)
            let dmg = new Damage(getDamageRange(), DamageType.POISON)
                ..setIsDot()
                ..setIsTriggered()
            let result = DamageResult.calculateOneResult(stack, dmg)
            BoardController.dealDamage(stack, result, stack) ->
                DelayAnimation.create(stack.getBoard(), 0.3) ->
                    next.continue()
        //stack.stats.setActionPoints(stack.stats.getRemainingActionPoints() - 1)


    ondestroy
        stack.getTriggers().removeOnDamageTaken(damageTakenListener)
        stack.getTriggers().removeOnTurnEnd(turnEndListener)
        stack.getTriggers().removeOnTurnStart(turnStartListener)
        destroy stacks