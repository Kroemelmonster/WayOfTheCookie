package BleedingAilment

import AttachmentPoints
import Icons
import Abilities

import Buff
import UITooltip

import initlater BoardStack
import initlater BuffType
import initlater BoardController
import DamageResult
import KUtil
import StackType
import Cell
import BoardTrigger
import LinkedList
import initlater DelayAnimation
import Ailment

public class BleedingAilment extends Buff
    private static constant string NAME = "Bleeding"
    private static constant string EFFECT = "Objects\\Spawnmodels\\Human\\HumanBlood\\HumanBloodLarge0.mdl"

    private BoardTrigger turnStartListener
    private BoardTrigger turnEndListener
    private BoardTriggerOnAnyCellLeave moveListener

    private AilmentStacks stacks = new AilmentStacks()

    private function getDamageRange(boolean walking) returns realRange
        var avg = stacks.getHighestDamage()
        if walking
            avg *= 2.0
        return realRange(avg * 0.8, avg * 1.2)

    static function setup()
        BuffTypeSet.BLEEDING = new BuffType("Icons\\PASBloodSprinkle.blp", NAME, createTooltip(null)) (BoardStack stack) ->
            return new BleedingAilment(BuffTypeSet.BLEEDING, stack)

    construct(BuffType bType, BoardStack stack)
        super(bType, stack)

        moveListener = stack.getTriggers().addOnAnyCellLeave() (BoardStack target, Cell fromCell, Cell toCell, SequenzListener next) ->
            if stack == target
                dealDamage(true) ->
                    next.continue()
            else
                next.continue()

        turnStartListener = stack.getTriggers().addTurnStart() (SequenzListener next) ->
            dealDamage(false) ->
                next.continue()

        turnEndListener = stack.getTriggers().addTurnEnd() (SequenzListener next) ->
            if stacks.removeOneDuration()
                kill()
            next.continue()

    private static function createTooltip(BleedingAilment b) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        if b == null
            tooltip.addLine("This is bad you are bleeding ??")
        else
            tooltip.addLine(Tooltip.stat("Duration", b.stacks.getMaxDuration()))
            tooltip.addLine(Tooltip.stat("Stacks", b.stacks.size()))
            tooltip.addLine("You are currently bleeding and suffer "+Tooltip.coloredRange(Tooltip.COLOR_NEGATIVE, b.getDamageRange(false).round())+ " each turn")
            tooltip.addLine("As well as "+Tooltip.coloredRange(Tooltip.COLOR_NEGATIVE, b.getDamageRange(true).round())+ " each time you attempt to move into another cell")
        
        return tooltip

    override protected function updateInner(BuffData data)
        stacks.add(data.duration, data.realValue)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this)

    override function hide()

    private function dealDamage(boolean walking, SequenzListener next)
        DelayAnimation.create(stack.getBoard(), 0.5) ->
            stack.flashAttachEffect(EFFECT, AttachmentPoints.chest)
            let dmg = new Damage(getDamageRange(walking), DamageType.PHYISICAL)
                ..setIsDot()
                ..setIsTriggered()
            let result = DamageResult.calculateOneResult(stack, dmg)
            BoardController.dealDamage(stack, result, stack) ->
                DelayAnimation.create(stack.getBoard(), 0.3) ->
                    next.continue()
        //stack.stats.setActionPoints(stack.stats.getRemainingActionPoints() - 1)

    ondestroy
        stack.getTriggers().removeOnAnyCellLeave(moveListener)
        stack.getTriggers().removeOnTurnEnd(turnEndListener)
        stack.getTriggers().removeOnTurnStart(turnStartListener)
        destroy stacks