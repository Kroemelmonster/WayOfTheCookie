package World

import LinkedList

import PlayerData
import MainController

import initlater Board
import initlater HostileArmy
import initlater Hero
import initlater StackTypesDefinition
import initlater NPC

public class World
    protected static LinkedList<Board> boards = new LinkedList<Board>
    protected static LinkedList<HostileArmy> armies = new LinkedList<HostileArmy>
    protected static LinkedList<Hero> heroes = new LinkedList<Hero>
    protected static LinkedList<NPC> npcs = new LinkedList<NPC>

    static function generateBoards()
        boards.add(new Board(gg_rct_BoardOne, gg_rct_BoardOneVisibleField))

    static function generateNPCs()
        npcs.add(new NPCShop(gg_unit_n000_0002)
        ..addStock(StackTypes.GNOLL, 120)
        ..addStock(StackTypes.GNOLL_POACHER, 120)
        ..addStock(StackTypes.NECROMANCER, 20))
    
    static function generateArmies()
        armies.add(new HostileArmy(gg_unit_n001_0003)
        ..addStack(StackTypes.GNOLL_WARDEN, 1)
        ..addStackAtFree(StackTypes.GNOLL, GetRandomInt(15, 20))
        ..addStackAtFree(StackTypes.GNOLL, GetRandomInt(15, 20))
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(15, 20))
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(15, 20))
        ..replaceChicken())

    static function getBoardToFightOn(HostileArmy _enemy) returns Board
        return boards.get(GetRandomInt(0, boards.size() - 1))
        
    static function generateHeroes()
        heroes.add(new Hero(playerData[0])
        ..addStackAtFree(StackTypes.GNOLL, 100)
        ..addStackAtFree(StackTypes.SASQUATCH_ORACLE, 1))
 
    static function onHeroDamaged(Hero hero, unit u)
        let enemy = HostileArmy.getFromUnit(u)
        if enemy != null
            MainController.startFight(hero, enemy, getBoardToFightOn(enemy))

    static function onHostileArmyDamaged(HostileArmy enemy, unit u)
        let hero = Hero.getFromUnit(u)
        if hero != null
            MainController.startFight(hero, enemy, getBoardToFightOn(enemy))

    static function onHeroSmartOrder(Hero hero, unit u)
        let npc = NPC.getFromUnit(u)
        if npc != null
            hero.issueNPC(npc)

    static function onHeroSmartOrder(Hero hero)
        hero.stopInteract()

    static function onHeroInteractWithNPC(Hero hero, unit u)
        let npc = NPC.getFromUnit(u)
        if npc != null
            MainController.interact(hero, npc)