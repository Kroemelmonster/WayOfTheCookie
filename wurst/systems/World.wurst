package World

import LinkedList

import PlayerData
import MainController

import initlater Board
import initlater HostileArmy
import initlater Hero
import initlater StackTypesDefinition
import initlater NPC
import StackType
import HeroTypesDefinition
import initlater ChainLightningSpell
import ItemSteelHammer
import ItemSimpleAxe
import initlater SpellType
import initlater HeroType

public class World
    protected static LinkedList<Board> boards = new LinkedList<Board>
    protected static LinkedList<HostileArmy> armies = new LinkedList<HostileArmy>
    protected static LinkedList<Hero> heroes = new LinkedList<Hero>
    protected static LinkedList<NPC> npcs = new LinkedList<NPC>

    static function generateBoards()
        createBoard(gg_rct_BoardIsleOne, gg_rct_BoardIsleOneV)
        createBoard(gg_rct_BoardIsleTwo, gg_rct_BoardIsleTwoV)
        createBoard(gg_rct_BoardIsleThree, gg_rct_BoardIsleThreeV)

    static function generateNPCs()
        let shop = creatNPCShop(gg_unit_n000_0002)
        StackTypes.forEach() (StackType t) ->
            shop.addStock(t, GetRandomInt(50, 100))
        
    static function generateArmies()
        createArmy()
        ..addStackAtFree(StackTypes.ANCIENT_SASQUATCH, 1)
        ..addStackAtFree(StackTypes.SASQUATCH_ORACLE, 1)
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(10, 20))
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(10, 20))
        ..placeWorld(gg_unit_n001_0003)

        createArmy()
        ..addStackAtFree(StackTypes.FOREST_TROLL_BERSERKER, GetRandomInt(4, 7))
        ..addStackAtFree(StackTypes.NECROMANCER, GetRandomInt(5, 10))
        ..addStackAtFree(StackTypes.FOREST_TROLL, GetRandomInt(15, 20))
        ..placeWorld(gg_unit_n001_0008)

        createArmy()
        ..addStackAtFree(StackTypes.NECROMANCER, GetRandomInt(15, 20))
        ..addStackAtFree(StackTypes.NECROMANCER, GetRandomInt(15, 20))
        ..addStackAtFree(StackTypes.SKELETALORC, GetRandomInt(6, 10))
        ..placeWorld(gg_unit_n001_0009)

        createArmy()
        ..addStackAtFree(StackTypes.GNOLL_WARDEN, GetRandomInt(5, 10))
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(50, 100))
        ..addStackAtFree(StackTypes.GNOLL, GetRandomInt(50, 100))
        ..placeWorld(gg_unit_n001_0010)

        createArmy()
        ..addStackAtFree(StackTypes.GNOLL_POACHER, GetRandomInt(120, 200))
        ..addStackAtFree(StackTypes.GNOLL, GetRandomInt(120, 200))
        ..placeWorld(gg_unit_n001_0011)


    static function generateHeroes()
        let h = createHero(playerData[0], HeroTypes.FAR_SEER)
        ..addStackAtFree(StackTypes.FOREST_TROLL_HIGH_PRIEST, 3)
        ..equiqItemAt(0, ItemSteelHammer.TYPE.createNew())
        ..setBackPackItem(0, ItemSimpleAxe.TYPE.createNew())
        ..setBackPackItem(1, ItemSimpleAxe.TYPE.createNew())

        SpellType.forEach() spellType -> 
            h.learnSpell(spellType)

    protected static function createBoard(rect playArea, rect visibleArea) returns Board
        let board = new Board(playArea, visibleArea)
        boards.add(board)
        return board

    protected static function createArmy() returns HostileArmy
        let army = new HostileArmy()
        armies.add(army)
        return army

    protected static function creatNPCShop(unit chicken) returns NPCShop
        let npc = new NPCShop(chicken)
        npcs.add(npc)
        return npc

    protected static function createHero(Player p, HeroType heroType) returns Hero
        let hero = new Hero(p, heroType)
        heroes.add(hero)
        return hero
 
    // TODO all this shuld be a controller

    static function getBoardToFightOn(HostileArmy _enemy) returns Board
        return boards.get(GetRandomInt(0, boards.size() - 1))

    static function onHeroDamaged(Hero hero, unit u)
        let enemy = HostileArmy.getFromUnit(u)
        if enemy != null
            MainController.startFight(hero, enemy, getBoardToFightOn(enemy))

    static function onHostileArmyDamaged(HostileArmy enemy, unit u)
        let hero = Hero.getFromUnit(u)
        if hero != null
            MainController.startFight(hero, enemy, getBoardToFightOn(enemy))

    static function onHeroSmartOrder(Hero hero, unit u)
        let npc = NPC.getFromUnit(u)
        if npc != null
            hero.issueNPC(npc)

    static function onHeroSmartOrder(Hero hero)
        hero.stopInteract()

    static function onHeroInteractWithNPC(Hero hero, unit u)
        let npc = NPC.getFromUnit(u)
        if npc != null
            MainController.interact(hero, npc)