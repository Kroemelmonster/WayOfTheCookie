package PathFinding

import HashMap

import initlater Board
import initlater Cell
import initlater BoardStack
import BoardStackStats
import BoardEntity
import LinkedList

constant int MOVE_COST_BLOCKED = 1000

public interface PathCell
    function getRemainingMoveAP(HasBoardEntityStats stats) returns int
    function getRemainingMoveAP(int moveAp) returns int
    function getCost() returns int
    function getCell() returns Cell
    function getPrev() returns Cell
    function getForwardPath() returns Path
    function getBackwardPath() returns Path

class PathCellInner implements PathCell
    Cell cell
    int cost = MOVE_COST_BLOCKED
    PathCellInner prev
    int calcIndex = -1

    construct(Cell cell)
        this.cell = cell

    @inline
    protected function getCost(int calcIndex) returns int
        if this.calcIndex == calcIndex
            return cost
        return MOVE_COST_BLOCKED

    @inline
    protected function setupFirst(int calcIndex)
        this.calcIndex = calcIndex
        this.cost = 0
        this.prev = null

    @inline
    protected function update(int calcIndex, int cost, PathCellInner prev, PathCellInner startingPath)
        this.calcIndex = calcIndex
        this.cost = cost
        if startingPath != prev
            this.prev = prev
        else
            this.prev = null

    @inline
    protected function block(int calcIndex)
        if this.calcIndex != calcIndex
            this.calcIndex = calcIndex
            this.cost = MOVE_COST_BLOCKED
            this.prev = null
            
    override function getRemainingMoveAP(HasBoardEntityStats stats) returns int
        return getRemainingMoveAP(stats.getRemainingMoveAP())

    override function getRemainingMoveAP(int moveAp) returns int
        return moveAp - cost

    override function getCost() returns int
        return cost
    
    override function getCell() returns Cell
        return cell
    
    override function getPrev() returns Cell
        if prev != null
            return prev.cell
        return null

    /** this is essential an iterator, so you have to close / destroy it */
    override function getForwardPath() returns Path
            // TODO
        Log.error("need to do a forwardPAthing thing")
        return null

    /** this is essential an iterator, so you have to close / destroy it */
    override function getBackwardPath() returns Path
        return new Path(this)

public class Path
    private PathCellInner current
    construct(PathCellInner current)
        this.current = current

    function hasNext() returns boolean
        return current != null

    function next() returns PathCell
        let c = current
        current = current.prev
        return c

    function close()
        destroy this

public class PathFinding
    private IterableMap<Cell, PathCellInner> paths
    private BoardEntity entity
    private boolean needToRecalc = true
    private int calcIndex = 0
    private LinkedList<PathCellInner> openCells

    @inline
    static function getCellMoveIntoCost(Cell c) returns int
        let stack = c.getStack()
        if stack != null
            return MOVE_COST_BLOCKED
        return 1

    @inline
    static function getCellMoveOutCost(Cell c) returns int
        return 0

    construct(BoardEntity entity)
        this.entity = entity
        openCells = new LinkedList<PathCellInner>

    function recalculate()
        needToRecalc = true

    function has(Cell cell) returns boolean
        recalcIfNeeded()

        return paths.has(cell)
    
    function get(Cell cell) returns PathCell
        if not has(cell)
            return null
        return paths.get(cell)

    function getPathTo(Cell cell, int limitingAP) returns PathCell
        var currentPath = paths.get(cell)
        // as long as you cant pay this path -> go one step back
        while currentPath != null and currentPath.getRemainingMoveAP(limitingAP) < 0
            currentPath = currentPath.prev

        return currentPath
        

    private function recalcIfNeeded()
        if needToRecalc
            calculateInner()

    private function resetPaths()
        if paths == null
            paths = new IterableMap<Cell, PathCellInner>()
            entity.getBoard().forEachCell() cell ->
                paths.put(cell, new PathCellInner(cell))

        openCells.clear()
        calcIndex ++
        
                

    private function calculateInner()
        resetPaths()
        
        let pathStart = paths.get(entity.getCell())
        pathStart.setupFirst(calcIndex)
        openCells.add(pathStart)

        while not openCells.isEmpty()
            let current = openCells.dequeue()
            let currentCost = current.getCost(calcIndex)
            
            current.cell.forEachNeighbour() neighbourCell ->
                let neighbour = paths.get(neighbourCell)
                let costInto = getCellMoveIntoCost(neighbourCell)
                if costInto == MOVE_COST_BLOCKED
                    neighbour.block(calcIndex)
                else
                    let cost = costInto + getCellMoveOutCost(neighbourCell)
                    let newCost = currentCost + cost
                    // did we find a more efficent path ? go there
                    if newCost < neighbour.getCost(calcIndex)
                        neighbour.update(calcIndex, newCost, current, pathStart)
                        openCells.add(neighbour)
        
        //reset that you "block" yourself
        pathStart.cost = MOVE_COST_BLOCKED
        needToRecalc = false
    
    ondestroy
        if paths != null
            for path in paths
                destroy path
            destroy paths
            paths = null