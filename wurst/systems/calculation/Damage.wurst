package Damage

import initlater BoardStack
import initlater BoardEntity

import Globals
import Tooltip
import BitSet

public enum SourceType
    ATTACK
    SPELL
    UNSPECIFIC

public enum DamageFlags
    DOT
    CRIT
    TRIGGERED // marks the Damage Instance as coming from a trigger thus not chain any other triggers
    UNMITIGATABLE // ignore armor and resistance

public enum DamageType
    PHYSICAL
    MAGIC
    FIRE
    COLD
    CHAOS

public abstract class Damage
    protected DamageType damageType
    protected bitset flags = emptyBitset()
    protected SourceType sourceType

    static constant IconName array ICONS = [
        IconName.PHYSICAL,
        IconName.MAGIC,
        IconName.FIRE,
        IconName.ICE,
        IconName.CHAOS
    ]

    construct(SourceType sourceType, DamageType damageType)
        this.damageType = damageType
        this.sourceType = sourceType

    function getType() returns DamageType
        return damageType

    function getSourceType() returns SourceType
        return sourceType

    function hasFlag(DamageFlags flag) returns boolean
        return flags.get(flag castTo int)

    function copyTo(Damage copy)
        copy.flags = this.flags

    static function type2Icon(DamageType dType) returns string
        return KStringUtils.icon(ICONS[dType castTo int])

public class DamageInstance extends Damage
    real dmg

    construct(real dmg, SourceType sourceType, DamageType damageType)
        super(sourceType, damageType)
        this.dmg = dmg

    function copy() returns DamageInstance
        let copy = new DamageInstance(this.dmg, this.sourceType, this.damageType)
        this.copyTo(copy)
        return copy

    function calculateDamageTo(BoardEntity source, BoardStack target) returns SpecificDamageInstance
        return new SpecificDamageInstance(this, source, target)

public class DamagePreview extends Damage
    realRange dmg

    construct(SourceType sourceType, DamageType damageType)
        super(sourceType, damageType)
        this.dmg = realRange(0, 0)

    static function create(SourceType sourceType, DamageType damageType) returns DamagePreview
        return new DamagePreview(sourceType, damageType)

    function addFlag(DamageFlags flag)
        flags = flags.set(flag castTo int)

    function setDamage(realRange dmg)
        this.dmg = dmg

    function copy() returns DamagePreview
        let copy = new DamagePreview(this.sourceType, this.damageType)
        copy.dmg = this.dmg
        this.copyTo(copy)
        return copy
    
    function getRandomInstance() returns DamageInstance
        let instance = new DamageInstance(dmg.random(), sourceType, damageType)
        super.copyTo(instance)
        return instance

    function extendTooltipWithSpecific(Tooltip tooltip, BoardEntity source, BoardStack target)
        let preview = new SpecificDamagePreview(this, source, target)
        tooltip.addLine(KStringUtils.colored(target.getPlayer().toColor(), target.getName())
            + " : "
            + Damage.type2Icon(preview.damagePreview.damageType)
            + " " + KStringUtils.colored(KStringUtils.COLOR_PRIMARY_TEXT, preview.damage)
            + "   " + KStringUtils.icon(IconName.DEATH)
            + " " + KStringUtils.colored(KStringUtils.COLOR_NEGATIVE_TEXT, preview.amount))

        /*
        tooltip.addLine(KStringUtils.coloredString(colorA(202, 34, 34, 20).toColorString(), target.getName() + " : ")
            + KStringUtils.icon(IconName.DEATH)
            + " " + KStringUtils.coloredRange(KStringUtils.COLOR_PRIMARY, preview.amount))
            */
        destroy preview

    function toColoredText() returns string
        return Damage.type2Icon(damageType) + " " + dmg.round().toString()

public class SpecificDamageInstance
    protected boolean applied
    protected int overKillDamage
    protected int damage
    protected int kills
    protected BoardStack target
    protected BoardEntity source
    protected DamageInstance damageInstance

    construct(DamageInstance baseDamage, BoardEntity source, BoardStack target)
        damageInstance = baseDamage.copy()
        this.target = target
        this.source = source
        this.applied = false
        calculateBaseDamage()

    private function calculateBaseDamage()
        let factor = calculateDamageFactor(source, damageInstance, target)
        overKillDamage = (damageInstance.dmg * factor).round()
        calculate()
    
    private function calculate()
        kills = calculateStackLostCount(target, overKillDamage)
        let maxDamage = target.stats.getMaxHP() * (target.stats.amount - 1) + target.stats.getHp()
        damage = min(overKillDamage, maxDamage)

    function applyResults()
        if applied
            Log.error("tried to apply damage instance another time")
            return
        var remainingHp = target.stats.getHp()
        remainingHp += target.stats.getMaxHP() * kills
        remainingHp -= overKillDamage
        target.stats.addAmount(-kills)
        target.stats.setHp(remainingHp)
        applied = true

    function getOverKillDamage() returns int
        return overKillDamage

    function getDamage() returns int
        return damage

    function getKills() returns int
        return kills

    /** this actually sets the overKillDamage and ajuste the damage afterwards **/
    function setDamage(int damage)
        if applied
            Log.error("tried to change damage while it already applied")
            return
        overKillDamage = damage
        calculate()

    /** 
        Carefull, this will change calculation for reamining onDamageTriggers with this damage
        BUT it will NOT change the base Damage of a Spell
        For Example if you hit 3 units with 100 damge and one of them pushes the damge to 200
        the others will NOT take 200
    **/
    function setBaseDamage(real damage)
        if applied
            Log.error("tried to change base damage while it already applied")
            return
        damageInstance.dmg = damage
        calculateBaseDamage()

    function getBaseDamage() returns real
        return damageInstance.dmg

    function hasFlag(DamageFlags flag) returns boolean
        return damageInstance.hasFlag(flag)

    function getType() returns DamageType
        return damageInstance.getType()

    function getSourceType() returns SourceType
        return damageInstance.getSourceType()

    function toColoredText() returns string
        var dmgStr = overKillDamage.toString()
        if damageInstance.hasFlag(DamageFlags.CRIT)
            dmgStr += "!"
        var str = KStringUtils.primary(dmgStr)
        if kills > 0
            str +=  "  " + KStringUtils.colored(KStringUtils.COLOR_NEGATIVE_TEXT, kills)
        return str 

    ondestroy
        destroy damageInstance

public class SpecificDamagePreview
    intRange damage
    intRange amount
    DamagePreview damagePreview

    construct(DamagePreview baseDamage, BoardEntity source, BoardStack target)
        damagePreview = baseDamage.copy()
        let factor = calculateDamageFactor(source, damagePreview, target)
        damage = (damagePreview.dmg * factor).round()
        amount.min = calculateStackLostCount(target, damage.min)
        amount.max = calculateStackLostCount(target, damage.max)

    ondestroy
        destroy damagePreview

public function calculateAttackVsDefencePercentage(int attack, int defence) returns real
    let difference = attack - defence

    if difference >= 0
        var posEffect = difference * DAMAGECALC_ATTACK_VS_DEFENCE_POSITIVE
        if posEffect > DAMAGECALC_ATTACK_VS_DEFENCE_POSITIVE_MAX
            posEffect = DAMAGECALC_ATTACK_VS_DEFENCE_POSITIVE_MAX
        return posEffect
    else
        var negativeEffect = difference * -1 * DAMAGECALC_ATTACK_VS_DEFENCE_NEGATIVE
        if negativeEffect < DAMAGECALC_ATTACK_VS_DEFENCE_NEGATIVE_MAX
            negativeEffect = DAMAGECALC_ATTACK_VS_DEFENCE_NEGATIVE_MAX
        return negativeEffect

function calculateDamageFactor(BoardEntity source, Damage dmg, BoardStack target) returns real
    if dmg.hasFlag(DamageFlags.UNMITIGATABLE)
        return 1.0
    let resistanceFactor = (1 - (target.stats.getResistance(dmg.damageType) / 100.0))
    if dmg.sourceType == ATTACK and source.getType() == EntityType.STACK
        let sourceAttacker = source.toStack()
        let attackFactor = (1 + calculateAttackVsDefencePercentage(sourceAttacker.stats.getAttack(), target.stats.getDefence()))
        return resistanceFactor * attackFactor
    // TODO here could be more triggers for calulating specific dmg
    return resistanceFactor


function calculateStackLostCount(BoardStack target, int damage) returns int
    var amount = 0
    let remainingDmg = damage - target.stats.getHp()
    if remainingDmg >= 0
        amount ++
        let maxHp = target.stats.getMaxHP()
        amount += (remainingDmg / maxHp).floor()
    
    if amount > target.stats.getAmount()
        amount = target.stats.getAmount()

    return amount