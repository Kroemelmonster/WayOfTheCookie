package PathFindingOld

import HashMap

import initlater Board
import initlater Cell
import initlater BoardStack

constant real MAX_MOVE_COST = 1000.0

function getCellMoveCost(Cell c, real moveCoefficient) returns real
    let stack = c.getStack()
    if stack != null
        return MAX_MOVE_COST
    return moveCoefficient

public class PathCell
    Cell cell
    real cost
    int costI
    PathCell prev

    construct(Cell cell, real cost, PathCell prev)
        this.cell = cell
        this.cost = cost
        this.prev = prev
        this.costI = cost.floor()

    function getRaminingMoveActionPoints(BoardStack stack) returns int
        return getRemainingMoveActionPoints(stack.stats.getRemainingMoveAP())

    function getRemainingMoveActionPoints(int ms) returns int
        return ms - costI

    function iterator() returns PathIterator
        return new PathIterator(this)

public class PathIterator
    PathCell current

    construct(PathCell current)
        this.current = current

    function hasNext() returns boolean
        return current != null

    function next() returns PathCell
        let c = current
        current = current.prev
        return c

    function close()
        destroy this

public class StackPathFinding
    private IterableMap<Cell, PathCell> paths
    private BoardStack stack
    private boolean needToRecalc = true
    private real moveCoefficient

    construct(BoardStack stack)
        this.stack = stack
        this.moveCoefficient = 1.0
        this.paths = new IterableMap<Cell, PathCell>()

    construct(BoardStack stack, real moveCoefficient)
        this.stack = stack
        this.moveCoefficient = moveCoefficient
        this.paths = new IterableMap<Cell, PathCell>()

    function recalculate()
        needToRecalc = true
    
    function getStack() returns BoardStack
        return stack

    function has(Cell cell) returns boolean
        recalcIfNeeded()

        return paths.has(cell)
    
    function get(Cell cell) returns PathCell
        if has(cell) == false
            return null
        return paths.get(cell)

    // You need to destroy every PathCell after use !
    function getReversedPathToCell(Cell destination) returns PathCell
        let destionationPath = get(destination)
        var last = new PathCell(destionationPath.cell, 0.0, null)
        for PathCell path in destionationPath
            if (path.prev != null and path.prev.prev != null)
                last = new PathCell(path.prev.cell, 0.0, last)

        return last

    private function recalcIfNeeded()
        if needToRecalc
            calculateStackWalkableCells()
            needToRecalc = false

    private function calculateStackWalkableCells()
        for Cell cell in paths
            destroy paths.get(cell)
        paths.flush()
    
        let start = stack.getCell()
        let b = start.getBoard()
    
        let startPCell = new PathCell(start, 0.0, null)
        paths.put(start, startPCell)
        let iterator = paths.iterator()
        let resultMoveCoefficient = moveCoefficient * stack.stats.moveCoefficient / 100.0
        while iterator.hasNext()
            let currentCell = iterator.next()
            let current = paths.get(currentCell)
            
            b.forEachNeighbour(currentCell) (Cell neighbourCell) ->
                PathCell neighbour = paths.get(neighbourCell)
                let cost = getCellMoveCost(neighbourCell, resultMoveCoefficient)
    
                if neighbour == null
                    neighbour = new PathCell(neighbourCell, MAX_MOVE_COST * 2, null)
                let newCost = current.cost + cost
                if newCost < neighbour.cost
                    neighbour.cost = newCost
                    neighbour.costI = newCost.floor()
                    if current != startPCell
                        neighbour.prev = current
                    paths.put(neighbourCell, neighbour)
    
        iterator.close()
    
        // now remove the start as you cant move there obv
        destroy paths.get(start)
        paths.remove(start)