package Mouse3DPositionSystem

import ClosureEvents
import PlayerData
import Board
import Cell

import MouseContext
import UIWindow
import UIDialog
import UIWindowDropdown

init
    Initializer.register(InitializerNames.SYSTEM) -> 
        Mouse3DPositionSystem.setup()

class Mouse3DPositionSystem
    static boolean currentlyProcessing = false

    @inline
    static function setEnabled(Player p, boolean enable)
        if not enable and canPlayerInteract(p) and p.isPlayingOnABoard()
            MouseContext.onMouseEnter(p, mousePosition(null, null))
        p.mouse3DEnabled = enable
    
    static function setup()
        EventListener.add(EVENT_PLAYER_MOUSE_DOWN)  ->
            let p = GetTriggerPlayerData()
            p.mousePressed = true
            p.mousePressedOverSmth = p.mouseOverUI != null
            if p.mousePressedOverSmth
                p.mouseOverUI.triggerOnMouseDown(p, BlzGetTriggerPlayerMouseButton())

        EventListener.add(EVENT_PLAYER_MOUSE_UP)  ->
            let x = BlzGetTriggerPlayerMouseX()
            let y = BlzGetTriggerPlayerMouseY()
            let p = GetTriggerPlayerData()
            p.mousePressed = false
            nullTimer() ->
                p.mousePressedIndex ++
                if p.mousePressedIndex > 10000
                    p.mousePressedIndex = 0

            if p.mouseOverUI != null
                p.mouseOverUI.triggerOnMouseUp(p, BlzGetTriggerPlayerMouseButton())
            else if x != 0.0 and y != 0.0
                onMouseEvent(vec2(x, y), p, true)
        
        EventListener.add(EVENT_PLAYER_MOUSE_MOVE)  ->
            let x = BlzGetTriggerPlayerMouseX()
            let y = BlzGetTriggerPlayerMouseY()

            if x != 0.0 and y != 0.0
                onMouseEvent(vec2(x, y), GetTriggerPlayerData(), false)
         
    @inline
    private static function canPlayerInteract(Player p) returns boolean
        return p.mouse3DEnabled and currentlyProcessing == false

    private static function onMouseEvent(vec2 coord, Player p, boolean isClickEvent)
        if not canPlayerInteract(p)
            return
    
        let btn = BlzGetTriggerPlayerMouseButton()
        if isClickEvent
            if not p.mousePressedOverSmth
                /* when we click outside of a window AND the mouse Down Event was not inside one interactable
                    this helps in this scenario : mouse down on a slider, you can now copntroll the value 
                    relative to where your mouse is. EVEN if your mouse is outside the slider.null
                    This means if you would not check for p.mousePressedOverSmth
                    And move your mouse outside of a window while changing a slider the window will close.. */
                /*
                if btn == MOUSE_BUTTON_TYPE_LEFT 
                    TODO do we still need to check for this ?   
                */
                UIWindow.closeAll(p)

        if not p.isPlayingOnABoard()
            return
             
        let cell = p.playingBoard.getCellBasedOnCoords(coord)
        Cell nearby = null
        
        if cell != null
            let angle = (cell.getCoord().angleTo(coord).degrees() + 390.0) % 360
            nearby = cell.getNeighbour((angle / 60.0).floor())
        
        if isClickEvent
            onMouseClick(mousePosition(cell, nearby), p, btn)
        else
            MouseContext.onMouseEnter(p, mousePosition(cell, nearby))
            
    
    private static function onMouseClick(mousePosition mP, Player p, mousebuttontype btn)
        if btn == MOUSE_BUTTON_TYPE_LEFT
            MouseContext.onMouseSelect(p, mP, true)
        else if btn == MOUSE_BUTTON_TYPE_RIGHT
            currentlyProcessing = true
            MouseContext.onOrder(p, mP)
            currentlyProcessing = false