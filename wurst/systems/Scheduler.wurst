package Scheduler

import ClosureTimers
import TimerUtils

import PlayerData

import initlater Board
import LinkedList
import BoardTrigger

class Scheduler
    private static timer realTime
    private static int gameTime
    private static LinkedList<SequenzPlayerListener> registeredListener = new LinkedList<SequenzPlayerListener>

    static private function tick()
        gameTime += 1
        realTime.start(ANIMATION_PERIOD, () -> tick())

    static function getCurrentTimeInGame() returns int
        return gameTime

    static function getTime() returns real
        return gameTime * ANIMATION_PERIOD

    static function log(string msg)
        let totalSeconds = getTime()
        let minutes = ((totalSeconds % 3600) / 60).round()
        let seconds = (totalSeconds % 60).round()
        let miliseconds = ((totalSeconds * 100.0) % 100).round()
        Log.trace(minutes.toString()+":"+seconds.toString()+":"+miliseconds.toString() + " : " + msg)

    static function getTimeIn(real seconds) returns real
        return getTime() + seconds

    static function onTime(SequenzPlayerListener listener)
        registeredListener.add(listener)

    private static function doPeriodicallyInner(Player p, LLIterator<SequenzPlayerListener> listenerItr)
        if listenerItr.hasNext()
            listenerItr.next().onEvent(p)
            nullTimer() ->
                doPeriodicallyInner(p, listenerItr)

    static function setup()
        realTime = getTimer()
        realTime.start(ANIMATION_PERIOD, () -> tick())
        Player.forEachActive() p ->
            doPeriodically(ANIMATION_PERIOD) cb ->
                if p.playingBoard != null
                    p.playingBoard.tick(ANIMATION_PERIOD)

            doPeriodically(0.2) cb ->
                doPeriodicallyInner(p, registeredListener.staticItr())
                
                
                
            
    