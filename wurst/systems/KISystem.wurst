package KISystem

import ClosureTimers
import LinkedList

import BoardStack
import initlater Action
import initlater ActionWait
import initlater ActionDefend
import BoardTrigger
import BoardEntity
import ActionType
import Cell
import Targets
import PlayerData

public class KISystem
    static function sendKiOrder(Player p, Action action, Cell cell) returns boolean
        p.currentMousePosition.cell = cell
        action.recalculateHighlight(p)
        return action.sendTargetOrder(cell)

    static function orderMoveTo(BoardStack stack, Cell cell) returns boolean
        let path = stack.getPathToCell(cell, stack.getRemainingMoveAP())
        let defaultAction = stack.getDefaultAction()
        return sendKiOrder(stack.getPlayer(), defaultAction, path.getCell())

    static function getBestTarget(Targets targets) returns Target
        if targets.isEmpty()
            return null

        var itr = targets.iterator()
        if not targets.isEmptyForCurrentTurn()
            itr = targets.iteratorForCurrentTurn()

        var maxWeight = 0.0
        while itr.hasNext()
            let stack = itr.next().self()
            let weight = stack.stats.getWeight()
            maxWeight += weight
                
        let weightedRandom = GetRandomReal(0, maxWeight)
        var currentWeight = 0.0
        Target result = null
        itr.reset()
        while itr.hasNext() and result == null
            let target = itr.next()
            currentWeight += target.self().stats.getWeight()
            if currentWeight >= weightedRandom
                result = target

        destroy itr

        return result

    static function getBestTarget(LinkedList<BoardStack> targets) returns BoardStack
        if targets.isEmpty()
            return null

        var maxWeight = 0.0
        for target in targets
            maxWeight += target.stats.getWeight()
        let weightedRandom = GetRandomReal(0, maxWeight)
        var currentWeight = 0.0
        BoardStack result = null
        let itr = targets.iterator()
        while itr.hasNext() and result == null
            let target = itr.next()
            currentWeight += target.stats.getWeight()
            if currentWeight >= weightedRandom
                result = target

        destroy itr

        return result

    protected static function isActionWait(Action action) returns boolean
        return action instanceof ActionWait

    protected static function isActionDefend(Action action) returns boolean
        return action instanceof ActionDefend

    protected static function isActionDefault(Action action) returns boolean
        return action.hasOption(ActionTypeOption.DEFAULT)

    protected static function isActionSpecial(Action action) returns boolean
        return not isActionWait(action) and not isActionDefend(action) and not isActionDefault(action)

    protected static function executeDefendOrSkipAction(BoardEntity entity)
        let itr = entity.actionsIterator()
        Action defendOrSkipAction = null
        while itr.hasNext() and defendOrSkipAction == null
            let action = itr.next()
            if isActionDefend(action) and action.canActivate()
                defendOrSkipAction = action

        destroy itr
        defendOrSkipAction.activate()

    protected static function executeDefaultAction(BoardEntity entity)
        let defaultAction = entity.getDefaultAction()
        defaultAction.executeForKI() status ->
            if status == 1
                doAfter(0.2) ->
                    // there is litterly nothing you can doo ?
                    executeDefendOrSkipAction(entity)

    /**
        Tries to execute a primary action
    */
    protected static function executeNextPrimaryAction(LLIterator<Action> itr, BoardEntity entity, SequenzListenerStatus next)
        if itr.hasNext()
            let action = itr.next()
            if action.showAsPrimary() and action.canActivate()
                action.executeForKI() status ->
                    if status == 1 // he did not do anything
                        executeNextPrimaryAction(itr, entity, next)
                    else if status == 0
                        next.continue(1)
            else
                executeNextPrimaryAction(itr, entity, next)
            
        else
            next.continue(0)

    static function executeTurn(BoardEntity entity)
        doAfter(0.2) ->
            let itr = entity.actionsIterator()
            executeNextPrimaryAction(itr, entity) (status) ->
                destroy itr
                if status == 0
                    executeDefaultAction(entity)