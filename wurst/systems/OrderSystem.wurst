package OrderSystem

import Board

import initlater Cell
import initlater PlayerData
import initlater BoardStack
import initlater InitiativeList
import initlater UIController
import initlater Action
import BoardEntity
import PlayerBoardHelper

class OrderSystem
    static function canOrderUnit(Player p, BoardEntity entity) returns boolean
        if entity == null
            return false
        // this player does not own the active unit
        return entity.getPlayer() == p
    
    static function isUnitSelected(Player p, BoardEntity entity) returns boolean
        if entity == null
            return false
        return entity == PlayerBoardHelper.getSelectedEntity(p)
    
    static function canInteractWithBoard(Player p) returns boolean
        return PlayerBoardHelper.getPlayerBoard(p).isInteractAble() 

    static function canOrderAndInteract(Player p) returns boolean
        let activeEntity = PlayerBoardHelper.getCurrentActiveEntity(p)
        if not canOrderUnit(p, activeEntity)
            return false
        if not isUnitSelected(p, activeEntity)
            return false

        return canInteractWithBoard(p)

    static function resetCurrentSelectedAction(BoardEntity entity)
        if entity.resetCurrentSelectedAction()
            UIController.triggerOnActionChange(entity.getBoard())

    static function sendSimpleTargetOrder(Player p, Cell cell)
        if canOrderAndInteract(p) == false
            return
        let currentAction = p.currentSelectedEntity.getCurrentAction()
        if sendTargetOrder(currentAction, cell) == false
            resetCurrentSelectedAction(p.currentSelectedEntity)
        else
            p.playingBoard.enableInteraction(false)

    static function endOrder(Board board)
        board.enableInteraction(true)
    
    static private function sendTargetOrder(Action action, Cell cell) returns boolean
        if cell == null
            return false
        return action.sendTargetOrder(cell)