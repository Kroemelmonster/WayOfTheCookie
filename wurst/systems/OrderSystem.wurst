package OrderSystem

import Board

import initlater Cell
import initlater PlayerData
import initlater BoardStack
import initlater InitiativeList
import initlater UIController
import initlater Action
import BoardEntity

class OrderSystem
    static function couldOrderIFInteractable(Player p) returns boolean
        if p.playingBoard == null
            return false

        let currentEntity = p.playingBoard.getInitiative().getCurrent()
        // maybe there isnt even a initittive
        if currentEntity == null
            return false
        // player must be owner of current Entry
        if currentEntity.getPlayer() != p
            return false
        
        let boardEntity = currentEntity.getBoardEntity()
        // player also has to have the current Unit selected if it is a unit
        if boardEntity != null and p.currentSelectedEntity != boardEntity
            return false
        return true


    static function canOrder(Player p) returns boolean
        if couldOrderIFInteractable(p) == false
            return false

        return p.playingBoard.isInteractAble()

    static function resetCurrentSelectedAction(BoardEntity entity)
        if entity.resetCurrentSelectedAction()
            UIController.triggerOnActionChange(entity.getBoard())

    static function sendSimpleTargetOrder(Player p, Cell cell)
        if canOrder(p) == false
            return
        let currentAction = p.currentSelectedEntity.getCurrentAction()
        if sendTargetOrder(currentAction, cell) == false
            resetCurrentSelectedAction(p.currentSelectedEntity)
        else
            p.playingBoard.enableInteraction(false)

    static function endOrder(Board board)
        board.enableInteraction(true)
    
    static private function sendTargetOrder(Action action, Cell cell) returns boolean
        if cell == null
            return false
        return action.sendTargetOrder(cell)