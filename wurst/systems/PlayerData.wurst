package PlayerData

import initlater Cell
import initlater Board
import initlater Hero
import initlater UIButton
import initlater UIMenuWorldConsole
import initlater UIDialog
import initlater PlayerTrigger
import initlater BoardEntity
import initlater UIWindow
import initlater UIMenuConsole
import Globals

init
    Initializer.register(InitializerNames.SYSTEM) -> 
        Player.setup()

public abstract class PlayerListener
    abstract function onEvent(Player p)

public tuple mousePosition(Cell cell, Cell nearbyCell)

public Player array playerData
constant LinkedList<Player> activePlayers = new LinkedList<Player>

public enum PlayerRelationship
    SELF
    ALLY
    ENEMY
    NEUTRAL

public class Player
    static function setup()
        playerData[players[0].getId()] = new Player(players[0])
        playerData[players[1].getId()] = new Player(players[1])
        NEUTRAL_AGGRESIVE = new Player(players[PLAYER_NEUTRAL_AGGRESSIVE])
        NEUTRAL_PASSIVE = new Player(players[PLAYER_NEUTRAL_PASSIVE])
        ME = playerData[players[0].getId()]

        playerData[players[PLAYER_NEUTRAL_AGGRESSIVE].getId()] = NEUTRAL_AGGRESIVE
        playerData[players[PLAYER_NEUTRAL_PASSIVE].getId()] = NEUTRAL_PASSIVE

    boolean mousePressed = false
    int mousePressedIndex = 0
    UIButton mouseOverButton = null

    DialogInfo dialogInfo = new DialogInfo()

    UIMenuWorldConsoleInfo worldConsoleInfo = new UIMenuWorldConsoleInfo()
    UIMenuConsoleInfo menuConsoleInfo = new UIMenuConsoleInfo()
    UIMenuPlayerInfo uiMenuPlayerInfo = new UIMenuPlayerInfo()

    mousePosition currentMousePosition

    BoardEntity currentSelectedEntity

    Board playingBoard
    Hero hero
    boolean mouse3DEnabled = true
    boolean doesNotNeedVisuals
    color c

    LinkedList<KeyPressListener> keyPressListeners
    LinkedList<PlayerUnitListener> selectListeners

    player blzPlayer

    static Player NEUTRAL_AGGRESIVE
    static Player NEUTRAL_PASSIVE
    static Player ME

    private construct(player p)
        blzPlayer = p
        doesNotNeedVisuals = not p.isIngame()
        
        var playerColor = PLAYER_COLOR_RED
        if p == players[PLAYER_NEUTRAL_PASSIVE]
            playerColor = PLAYER_COLOR_SNOW
        if isLocal()
            playerColor = PLAYER_COLOR_GREEN
            
        c = playerColor.toColor()
        blzPlayer.setColor(playerColor)

        if not doesNotNeedVisuals
            PlayerTrigger.registerKeyPress(this)
            PlayerTrigger.registerSelect(this)
            activePlayers.add(this)

    function isConntrolledByKI() returns boolean
        if canControllKI
            return false
        return doesNotNeedVisuals

    function isLocal() returns boolean
        return blzPlayer == localPlayer

    function toString() returns string
        return blzPlayer.getNameColored()

    function toColor() returns string
        return c.toColorString()

    function onAnyKeyPress(KeyPressListener listener)
        if not doesNotNeedVisuals
            keyPressListeners.add(listener)

    function getRelationshipStatusTo(Player other) returns PlayerRelationship
        if other == null
            return PlayerRelationship.NEUTRAL
        if this == other
            return PlayerRelationship.SELF
        else if this == NEUTRAL_PASSIVE
            return PlayerRelationship.NEUTRAL
        return PlayerRelationship.ENEMY

    function isEnemyTo(Player other) returns boolean
        return getRelationshipStatusTo(other) == PlayerRelationship.ENEMY

    function isAllyTo(Player other) returns boolean
        let status = getRelationshipStatusTo(other)
        return status == PlayerRelationship.SELF or status == PlayerRelationship.ALLY

    function isPlayingOnABoard() returns boolean
        return playingBoard != null

    static function forEachActive(LLItrClosure<Player> itr)
        activePlayers.forEach(itr)


public function player.getData() returns Player
    return playerData[this.getId()]

public function GetTriggerPlayerData() returns Player
    return GetTriggerPlayer().getData()
        