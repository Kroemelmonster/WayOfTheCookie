package TargetList

import LinkedList

import initlater Board
import initlater Cell
import initlater BoardStack

public interface TargetListListener
    /** return null if you cant attack this unit **/
    function getCellToAttackFrom(BoardStack target) returns Cell

public class Target
    protected BoardStack target
    protected Cell attackFrom

    construct(BoardStack target, Cell attackFrom)
        this.target = target
        this.attackFrom = attackFrom

    function getAttackFrom() returns Cell
        return attackFrom

    function getTarget() returns BoardStack
        return target

public class TargetList
    private BoardStack attacker
    private LinkedList<Target> targets
    private boolean needToRecalc = true
    private TargetListListener filter

    construct(BoardStack attacker, TargetListListener filter)
        this.attacker = attacker
        this.targets = new LinkedList<Target>()
        this.filter = filter

    function recalculate()
        needToRecalc = true

    function find(BoardStack stack) returns Target
        if stack == null
            return null
        recalcIfNeeded()
        Target found = null
        let itr = targets.iterator()
        while itr.hasNext() and found == null
            let current = itr.next()
            if current.target == stack
                found = current
        
        destroy itr
        return found

    function has(BoardStack stack) returns boolean
        return find(stack) != null

    function size() returns int
        recalcIfNeeded()
        return targets.size()

    function iterator() returns LLIterator<Target>
        recalcIfNeeded()
        return targets.iterator()

    private function recalcIfNeeded()
        if needToRecalc
            calculate_inner()
            needToRecalc = false

    private function clear()
        for target in targets
            destroy target
        targets.clear()

    private function calculate_inner()
        clear()
        attacker.getBoard().forEachStack() (BoardStack target) ->
            let attackFrom = filter.getCellToAttackFrom(target)
            if attackFrom != null
                targets.add(new Target(target, attackFrom))

    ondestroy
        if filter != null
            destroy filter
        if targets != null
            clear()
            destroy targets
            
            