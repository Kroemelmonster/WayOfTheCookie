package UIActionWindow

import Icons
import LinkedList

import PlayerData
import UIButton

import initlater OrderSystem
import initlater Action
import initlater BoardEntity
import initlater UISpellBook

constant framepointtype array[6] points = [FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOP, FRAMEPOINT_TOPRIGHT, FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOM, FRAMEPOINT_BOTTOMRIGHT]

class UIActionWindow
    private static framehandle self
    private static framehandle pane

    private static ActionButton array[3] primaryBtns
    private static ActionButton array[3] secondaryBtns
    private static framehandle array[10] actionPoints


    static function setup()
        self = createFrame("BACKDROP", "ActionWindow", GAME_UI, "", 0)
        ..setSize(0.17, 0.1164)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, GAME_UI, FRAMEPOINT_BOTTOMRIGHT)
        ..setTexture("UI/Textures/ActionWindowBackground.dds", 0, true)

        pane = createFrame("FRAME", "ActionWindowFrame", self, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, 0.006, -0.0274)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -0.0046, 0.007)

        for int i = 0 to primaryBtns.length
            primaryBtns[i] = new ActionButton(self)
            if i == 0
                primaryBtns[i].setPoint(FRAMEPOINT_TOPLEFT, pane, FRAMEPOINT_TOPLEFT, 0, 0)
            else
                primaryBtns[i].setPoint(FRAMEPOINT_TOPLEFT, primaryBtns[i - 1].self, FRAMEPOINT_TOPRIGHT, 0.001, 0)
            primaryBtns[i].onClick() () -> 
                if primaryBtns[i].isEmpty() == false
                    activate(primaryBtns[i].action, GetTriggerPlayerData())
            primaryBtns[i].onMouseEnter() -> 
                if primaryBtns[i].isEmpty() == false
                    onMouseEnter(primaryBtns[i].action, GetTriggerPlayerData())
            primaryBtns[i].onMouseLeave() -> 
                if primaryBtns[i].isEmpty() == false
                    onMouseLeave(primaryBtns[i].action, GetTriggerPlayerData())

        for int i = 0 to secondaryBtns.length
            secondaryBtns[i] = new ActionButton(self)
            if i == 0
                secondaryBtns[i].setPoint(FRAMEPOINT_BOTTOMRIGHT, pane, FRAMEPOINT_BOTTOMRIGHT, 0, 0)
            else
                secondaryBtns[i].setPoint(FRAMEPOINT_TOPRIGHT, secondaryBtns[i - 1].self, FRAMEPOINT_TOPLEFT, -0.001, 0)
            secondaryBtns[i].onClick() () -> 
                activate(secondaryBtns[i].action, GetTriggerPlayerData())
            secondaryBtns[i].onMouseEnter() -> 
                onMouseEnter(secondaryBtns[i].action, GetTriggerPlayerData())
            secondaryBtns[i].onMouseLeave() -> 
                onMouseLeave(secondaryBtns[i].action, GetTriggerPlayerData())

        for int i = 0 to actionPoints.length
            actionPoints[i] = createFrame("BACKDROP", "", self, "", 0)
                ..setSize(0.025, 0.013)
                ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, 0.007 + (0.016 * i), -0.008)

        hide()

        Player.forEachActive() (Player activePlayer) ->
            activePlayer.onAnyKeyPress() (Player p, string key) ->
                onkeyPress(p, key)

    private static function onkeyPress(Player p, string key)
        if OrderSystem.canOrder(p) == false
            return
        if key == "Escape"
            OrderSystem.resetCurrentSelectedAction(p.currentSelectedEntity)
            return

        let itr = p.currentSelectedEntity.getActions().iterator()
        boolean continue = true
        var counter = 0
        while itr.hasNext() and continue
            let action = itr.next()

            if action.isDefault() == false and action.canBeActivatedByKey(key)
                activate(action, p)
                // only trigger one action
                continue = false
            counter ++
        destroy itr
    
    static function self() returns framehandle
        return self

    private static function updateActionPointsLocal(BoardEntity entity, int previewLoosingPoints)
        let maxActionPoints = entity.getMaxActionPoints()
        let maxRemainingPoints = entity.getRemainingActionPoints()
        let startPreview = maxRemainingPoints - previewLoosingPoints
        for int i = 0 to actionPoints.length
            actionPoints[i].setVisible(i < maxActionPoints)
            if i < maxActionPoints
                if i >= maxRemainingPoints
                    actionPoints[i].setTexture("UI/Textures/Icons/ActionPointUsedIcon.dds", 0, true)
                else if i >= startPreview
                    actionPoints[i].setTexture("UI/Textures/Icons/ActionPointUsingIcon.dds", 0, true)
                else
                    actionPoints[i].setTexture("UI/Textures/Icons/ActionPointActiveIcon.dds", 0, true)

                
            
    static function updateActionPoints(BoardEntity entity, int previewLoosingPoints)
        // we just change it for the current active player
        // even if that player might have selected some other unit, the whole frame would not be visible so it does not matter
        // the other player who is currently not ordering also cant have this action frame --> does not matter
        if entity.getPlayer().playingBoard.isLocalPlayer()
            updateActionPointsLocal(entity, previewLoosingPoints)
    
    static function update(Player p)
        if p.isLocal() == false or p.isConntrolledByKI
            return

        if OrderSystem.couldOrderIFInteractable(p) == false
            hide()
            return
        let entity = p.currentSelectedEntity

        let currentAction = entity.getCurrentAction()

        for int i = 0 to primaryBtns.length
            primaryBtns[i].setEmpty()

        for int i = 0 to secondaryBtns.length
            secondaryBtns[i].setVisible(false)

            
        let actionItr = entity.getActions().iterator()

        var primaryIndex = 0
        var secondaryIndex = 0
        while actionItr.hasNext()
            let action = actionItr.next()
            if action.showAsPrimary()
                primaryBtns[primaryIndex].setAction(action, currentAction)
                primaryIndex ++
            if action.showAsSecondary()
                secondaryBtns[secondaryIndex].setAction(action, currentAction)
                secondaryIndex ++
            
        destroy actionItr

        self.setVisible(true)
        updateActionPointsLocal(entity, 0)

        if entity.getType() == EntityType.HERO
            UISpellBook.update(p)
        
    private static function activate(Action action, Player p)
        if OrderSystem.canOrder(p) == false
            return

        if action.canActivate() == false
            return
        action.activate()

    private static function onMouseEnter(Action action, Player p)
        action.onUIMouseEnter()

    private static function onMouseLeave(Action action, Player p)
        if action != null
            action.onUIMouseLeave()

    static function hide(Player p)
        UISpellBook.hide(p)
        if p.isLocal()
            hide()

    static function hide()
        self.setVisible(false)