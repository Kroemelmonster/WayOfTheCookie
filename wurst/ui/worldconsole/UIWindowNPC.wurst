package UIWindowNPC
import UIButton
import PlayerData
import UIHandle
import UIButtonIcon
import UIWindow
import initlater Scheduler
import NPC
import UIWindowSkillTree
import ClosureFrames
import UIWindowDropdown
import Stack
import UIDialogBuyStack

init
    Initializer.register(InitializerNames.UI) -> 
        Player.forEachActive() (Player p) ->
            UIWindowNPCInfo.create(p)

class UIWindowNPCInfo
    static UIWindowNPCInfo array data
    static function get(Player p) returns UIWindowNPCInfo
        return data[p castTo int]

    protected static function create(Player p)
        data[p castTo int] = new UIWindowNPCInfo(p)

    protected Player p
    private NPC npc
    protected UIWindowNPCStockInfo array[2] stockInfo

    private construct(Player p)
        this.p = p
        for i = 0 to stockInfo.length - 1
            stockInfo[i] = new UIWindowNPCStockInfo()

    protected function openNPC(NPC npc)
        this.npc = npc
        for i = 0 to stockInfo.length - 1
            stockInfo[i].refresh()

    protected function getNPCTyp() returns NPCType
        return npc.typ

    protected function getShop() returns NPCShop
        return npc castTo NPCShop

class UIWindowNPCStockInfo
    protected int index

    protected function refresh()
        index = 0

interface OnStockClick
    function onEvent(UIWindowNPCInfo npc, mousebuttontype mtype, int index)

public class UIWindowNPCSellButton extends UIButtonIcon
    protected framehandle handleGoldText
    protected static constant ICON_SIZE = 0.035
    protected static constant HEIGHT = ICON_SIZE + 0.012

    construct(UIHandle parent)
        super(parent.self, true, false, false, true)
        setSize(ICON_SIZE, ICON_SIZE)
        setVisible(false)

        handleGoldText = createUIFrame("TEXT", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, this, FRAMEPOINT_BOTTOMLEFT, 0, -0.002)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, this, FRAMEPOINT_BOTTOMRIGHT, 0, -0.012)
        ..setTextAlignment(TEXT_JUSTIFY_TOP, TEXT_JUSTIFY_RIGHT)

    function setText(int amount, int gold)
        setAmount(amount)
        handleGoldText.setText(gold.toString())

class Stock extends UIHandle
    protected UIWindowNPCSellButton array[6] btnSell
    protected UIButton btnRight
    protected UIButton btnLeft
    protected int stockIndex

    construct(UIWindowBasic parent, int stockIndex)
        super(createUIFrame("FRAME", parent))
        this.stockIndex = stockIndex
        setHeight(UIWindowNPCSellButton.HEIGHT)

    protected function initWithListener(OnStockClick onClickListener)
        let scrollBtnWidth = 0.006
        let padding = 0.002
        btnSell[0] = new UIWindowNPCSellButton(this)
        ..setPoint(FRAMEPOINT_TOPLEFT, this, FRAMEPOINT_TOPLEFT, padding + scrollBtnWidth, 0)
        ..onMouseUp() -> 
            let info = UIWindowNPCInfo.get(GetTriggerPlayerData())
            onClickListener.onEvent(info, BlzGetTriggerPlayerMouseButton(), 0)

        for i = 1 to btnSell.length - 1
            btnSell[i] = new UIWindowNPCSellButton(this)
            ..setPoint(FRAMEPOINT_TOPLEFT, btnSell[i - 1], FRAMEPOINT_TOPRIGHT, padding, 0)
            ..onMouseUp() -> 
                let info = UIWindowNPCInfo.get(GetTriggerPlayerData())
                onClickListener.onEvent(info, BlzGetTriggerPlayerMouseButton(), i)

        btnRight = UIButton.create(false, this)
        ..setPoint(FRAMEPOINT_RIGHT, btnSell[0], FRAMEPOINT_LEFT, -padding, 0)
        ..setSize(scrollBtnWidth, 0.01)
        ..setBackground("ui\\feedback\\checkpointpopup\\checkpoint-arrow-right.dds")
        ..onClick() -> 
            let info = UIWindowNPCInfo.get(GetTriggerPlayerData())
            info.stockInfo[stockIndex].index--
            UIWindowNPC.update(info.p)

        btnLeft = UIButton.create(false, this)
        ..setPoint(FRAMEPOINT_LEFT, btnSell[btnSell.length - 1], FRAMEPOINT_RIGHT, padding, 0)
        ..setSize(scrollBtnWidth, 0.01)
        ..setBackground("ui\\feedback\\checkpointpopup\\checkpoint-arrow-left.dds")
        ..onClick() -> 
            let info = UIWindowNPCInfo.get(GetTriggerPlayerData())
            info.stockInfo[stockIndex].index++
            UIWindowNPC.update(info.p)

        setWidth((UIWindowNPCSellButton.ICON_SIZE + padding) * btnSell.length + padding + 2 * scrollBtnWidth)
            
public class UIWindowNPC
    protected static UIWindowBasic window
    protected static Stock stockUnits

    static function create()
        window = UIWindowBasic.create("NPC", true)
        ..setPointToConsoleUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT)
        ..setSize(UIWindowSkillTree.WIDTH, 0.35) // TODO width should be handled by another class overall

        

        stockUnits = new Stock(window, 0)
        ..setInnerPoint(FRAMEPOINT_TOP, window, FRAMEPOINT_TOP)
        ..initWithListener() (UIWindowNPCInfo info, mousebuttontype mtype, int index) ->
            let stack = info.getShop().data.stock.get(info.stockInfo[0].index + index)
            if mtype == MOUSE_BUTTON_TYPE_LEFT
                buyStack(info.p, stack)
            else if mtype == MOUSE_BUTTON_TYPE_RIGHT
                let dropDown = UIWindowDropdown.start(info.p, stockUnits.btnSell[index].self, DropDownAnchor.DOWN)
                dropDown.addOption("Buy", stack.getAmount() > 0) ->
                    buyStack(info.p, stack)
                dropDown.addOption("Info", true) ->
                    Log.trace("open info")
                dropDown.open()

    protected static function buyStack(Player p, Stack stack)
        Log.trace("Buy "+stack.toString())
        UIDialogBuyStack.open(p, stack, stack.typ.getValue())
            

    static function open(Player p, NPC npc)
        UIWindowNPCInfo.get(p).openNPC(npc)
        window.open(p)
        update(p)
    
    static function hide(Player p)
        window.close(p)

    protected static function update(Player p)
        if not p.isLocal()
            return
        
        let info = UIWindowNPCInfo.get(p)
        
        if info.getNPCTyp() == SHOP
            updateShop(info, info.getShop())

    private static function updateShop(UIWindowNPCInfo info, NPCShop shop)
        let unitItr = shop.data.unitIterator()
        let stockUnitInfo = info.stockInfo[0]
        var curIndex = 0
        while curIndex < stockUnitInfo.index and unitItr.hasNext()
            unitItr.next()
            curIndex++
        for i = 0 to stockUnits.btnSell.length - 1
            stockUnits.btnSell[i].setVisible(unitItr.hasNext())
            if unitItr.hasNext()
                let stack = unitItr.next()
                stockUnits.btnSell[i].setBackground(stack.typ.getIcon())
                stockUnits.btnSell[i].setText(stack.getAmount(), stack.typ.getValue())
                    
                

        stockUnits.btnLeft.setVisible(unitItr.hasNext())
        stockUnits.btnRight.setVisible(curIndex > 0)
        destroy unitItr
