package UIWindowSpellBook

import UIElementSpell
import PlayerData
import Spell
import OrderSystem
import Action
import UIHandle
import UIBoardActionMenu
import ClosureFrames
import UIWindow

public class UISpellBookInfo
    protected boolean isOpen = false

public class UIWindowSpellBook
    private static UIWindow window
    private static UIElementSpell array[10] spells

    static function create()
        window = UIWindow.create()
        ..setPointToGameUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT)
        ..setSize(0.5, 0.3)
        window.onClose() (Player p) ->
            closeInner(p)
        window.onOpen() (Player p) ->
            openInner(p)

        createUIFrame("BACKDROP", window)
        ..setAllPoints(window)
        ..setTexture("UI/Textures/SpellBook.dds")

        let leftSideFrameHandle = createUIFrame("FRAME", window)
        ..setPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT, 0.043, -0.032)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOM, -0.016, 0)

        createUIFrame("BACKDROP", window)
        ..setAllPoints(window)
        ..setTexture("UI/Textures/SpellBookRipped.dds")

        spells[0] = UIElementSpell.create(leftSideFrameHandle)
        ..setPoint(FRAMEPOINT_TOPLEFT, leftSideFrameHandle, FRAMEPOINT_TOPLEFT, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, leftSideFrameHandle, FRAMEPOINT_TOP, 0, 0)

        spells[1] = UIElementSpell.create(leftSideFrameHandle)
        ..setPoint(FRAMEPOINT_TOPLEFT, leftSideFrameHandle, FRAMEPOINT_TOP, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, leftSideFrameHandle, FRAMEPOINT_TOPRIGHT, 0, 0)

        for int index = 2 to spells.length - 1
            spells[index] = UIElementSpell.create(leftSideFrameHandle)
            spells[index].setPoint(FRAMEPOINT_TOPLEFT, spells[index - 2].getMainHandle(), FRAMEPOINT_BOTTOMLEFT, 0, 0)
            spells[index].setPoint(FRAMEPOINT_TOPRIGHT, spells[index - 2].getMainHandle(), FRAMEPOINT_BOTTOMRIGHT, 0, 0)

        for int index = 0 to spells.length - 1
            spells[index].onClick() () -> 
                click(spells[index].getSpell(), GetTriggerPlayerData())
            spells[index].onMouseEnter() -> 
                onMouseEnter(spells[index].getSpell(), GetTriggerPlayerData())
            spells[index].onMouseLeave() -> 
                onMouseLeave(spells[index].getSpell(), GetTriggerPlayerData())

    static function close(Player p)
        window.close(p)

    static function open(Player p)
        window.open(p)

    static function toggle(Player p)
        let info = p.spellBookInfo
        if info.isOpen
            close(p)
        else
            open(p)

    static function update(Player p)
        if not p.spellBookInfo.isOpen
            return
        if not OrderSystem.couldOrderIFInteractable(p)
            close(p)
            return
        if p.isConntrolledByKI
            return
        if p.isLocal()
            updateLocal(p)
    
    private static function closeInner(Player p)
        let info = p.spellBookInfo
        info.isOpen = false
        window.close(p)

    private static function openInner(Player p)
        let info = p.spellBookInfo
        info.isOpen = true
            
        if p.isLocal()
            updateLocal(p)

    private static function click(Spell spell, Player p)
        spell.toggleQuickcast()
        UIBoardActionMenu.update(p)
        update(p)

    private static function onMouseEnter(Action action, Player p)
        action.onUIMouseEnter()

    private static function onMouseLeave(Action action, Player p)
        if action == null
            return
        action.onUIMouseLeave()

    private static function updateLocal(Player p)
        let entity = p.currentSelectedEntity

        let actionItr = entity.getActions().iterator()

        for int i = 0 to spells.length - 1
            spells[i].setVisible(false)

        var index = 0
        while actionItr.hasNext()
            let action = actionItr.next()
            if action.hasOption(ActionOption.SPELL)
                let spell = action castTo Spell
                spells[index].setSpell(spell)
                index++

        destroy actionItr

    private static function setVisibleLocal(boolean flag)
        window.setVisible(flag)

