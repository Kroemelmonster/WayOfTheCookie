package UIHeroWindow

import ClosureFrames

import UIWorldConsole
import PlayerData
import MainController
import UIHeroInventory
import UIHeroSkillTree
import UIStackInfo
import UITooltip
import Damage

public class UIHeroWindowInfo
    protected boolean visible = false
    UIHeroInventoryInfo inventory = new UIHeroInventoryInfo()

public class UIHeroWindow
    private static framehandle self
    private static framehandle pane

    private static framehandle mightText
    private static framehandle mindText
    private static framehandle magicText

    private static UIStackInfo attackInfo
    private static UIStackInfo defenceInfo
    private static UIStackInfo wisdomInfo
    private static UIStackInfo powerInfo

    private static UIHeroInventory inventory
    private static UIHeroSkillTree skillTree

    static function setup()
        self = createFrame("BasicBorderWindow", GAME_UI, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, GAME_UI, FRAMEPOINT_TOPRIGHT, -0.04, 0.0)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, UIWorldConsole.self, FRAMEPOINT_TOPLEFT)
        ..setVisible(false)
        
        pane = getFrame("WindowPane")

        let infoBar = createFrame("FRAME", "", pane, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, pane, FRAMEPOINT_BOTTOMLEFT, 0.0, 0.2)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, pane, FRAMEPOINT_BOTTOM)

        var t = Tooltip.create("Attack")
        ..addLine("Increases the attack of all your troops.")
        ..addLine("")
        ..addLine("Each " + Tooltip.secondaryString("Attack") + " that your troops have more than your opponents " + Tooltip.secondaryString("Defence")
         + " will increase their damage dealt by "
         + Tooltip.coloredPercent(DAMAGECALC_ATTACK_VS_DEFENCE_POSITIVE / 100.0) + " up to "
         + Tooltip.coloredPercent(DAMAGECALC_ATTACK_VS_DEFENCE_POSITIVE_MAX / 100.0))
        attackInfo = new UIStackInfo(infoBar)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoBar, FRAMEPOINT_TOPLEFT, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoBar, FRAMEPOINT_TOP, 0, 0)
        ..setIcon("UI/Textures/StackInfo/attack.dds")
        ..setTooltip(t, TooltipAnchor.BOTTOM_LEFT_UP)

        t = Tooltip.create("Defence")
        ..addLine("Increases the defence of all your troops.")
        ..addLine("")
        ..addLine("Each " + Tooltip.secondaryString("Defence") + " that your troops have more than your opponents " + Tooltip.secondaryString("Attack")
         + " will decreases their damage dealt by "
         + Tooltip.coloredPercent(DAMAGECALC_ATTACK_VS_DEFENCE_NEGATIVE / 100.0) + " up to "
         + Tooltip.coloredPercent(DAMAGECALC_ATTACK_VS_DEFENCE_NEGATIVE_MAX / 100.0))
        defenceInfo = new UIStackInfo(infoBar)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoBar, FRAMEPOINT_TOP, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoBar, FRAMEPOINT_TOPRIGHT, 0, 0)
        ..setIcon("UI/Textures/StackInfo/defence.dds")
        ..setTooltip(t, TooltipAnchor.BOTTOM_LEFT_UP)

        t = Tooltip.create("Wisdom")
        ..addLine("Increases the maximum Mana you have.")
        ..addLine("")
        wisdomInfo = new UIStackInfo(infoBar)
        ..setPoint(FRAMEPOINT_TOPLEFT, attackInfo.self, FRAMEPOINT_BOTTOMLEFT, 0, -0.005)
        ..setPoint(FRAMEPOINT_TOPRIGHT, attackInfo.self, FRAMEPOINT_BOTTOMRIGHT, 0, -0.005)
        ..setIcon("UI/Textures/StackInfo/wisdom.dds")
        ..setTooltip(t, TooltipAnchor.BOTTOM_LEFT_UP)

        t = Tooltip.create("Spellpower")
        ..addLine("Increases the potency of your Spells.")
        ..addLine("")
        powerInfo = new UIStackInfo(infoBar)
        ..setPoint(FRAMEPOINT_TOPLEFT, defenceInfo.self, FRAMEPOINT_BOTTOMLEFT, 0, -0.005)
        ..setPoint(FRAMEPOINT_TOPRIGHT, defenceInfo.self, FRAMEPOINT_BOTTOMRIGHT, 0, -0.005)
        ..setIcon("UI/Textures/StackInfo/power.dds")
        ..setTooltip(t, TooltipAnchor.BOTTOM_LEFT_UP)

        /*ttackInfo = new UIStackInfo(pane)
        let attack = createFrame("HeroWindowStat", pane, 0, 0)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, pane, FRAMEPOINT_BOTTOMLEFT, 0.015, 0.015)
        getFrame("Icon").setTexture("UI/Textures/attack-borderless.dds", 0, true)
        attackText = getFrame("Text")*/

        /*createFrame("HeroWindowStat", pane, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, attackInfo.self, FRAMEPOINT_TOPRIGHT, 0.01, 0)
        getFrame("Icon").setTexture("UI/Textures/defence-borderless.dds", 0, true)
        defenceText = getFrame("Text")*/

        inventory = new UIHeroInventory(pane)

        let right = createFrame("FRAME", "", pane, "", 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, pane, FRAMEPOINT_TOPRIGHT)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, pane, FRAMEPOINT_BOTTOMRIGHT)
        ..setWidth(0.3)

        createFrame("HeroTome", right, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, right, FRAMEPOINT_TOPRIGHT, -0.2, 0)
        getFrame("Icon").setTexture("UI/Textures/might.dds", 0, true)
        mightText = getFrame("Text")

        createFrame("HeroTome", right, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, right, FRAMEPOINT_TOPRIGHT, -0.1, 0)
        getFrame("Icon").setTexture("UI/Textures/mind.dds", 0, true)
        mindText = getFrame("Text")

        createFrame("HeroTome", right, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, right, FRAMEPOINT_TOPRIGHT, 0, 0)
        getFrame("Icon").setTexture("UI/Textures/magic.dds", 0, true)
        magicText = getFrame("Text")

        let skillTreeReference = createFrame("FRAME", "", right, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, right, FRAMEPOINT_TOPLEFT, 0.03, -0.05)
        ..setPoint(FRAMEPOINT_TOPRIGHT, right, FRAMEPOINT_TOPRIGHT, -0.03, -0.05)
        ..setHeight(0.40)
        ..setTexture("UI/Textures/hero-spectral-background.dds", 0, true)
        skillTree = new UIHeroSkillTree(skillTreeReference, 0.3 - 0.06, 0.40)


    static function setVisible(Player p, boolean flag)
        p.heroWindoInfo.visible = flag
        self.setVisible(flag)
        if flag
            inventory.firstOpen(p)
            skillTree.openSkillTree(p)
            update(p)

    static function isVisibleToPlayer(Player p) returns boolean
        return p.heroWindoInfo.visible

    static function update(Player p)
        if p.heroWindoInfo.visible == false
            return

        if p.isLocal()

            let h = p.hero

            attackInfo.setTextBasedOnStats(h.stats.basicAttack, h.stats.getAttack(), h.stats.attackModi)
            defenceInfo.setTextBasedOnStats(h.stats.basicDefence, h.stats.getDefence(), h.stats.defenceModi)
            wisdomInfo.setTextBasedOnStats(h.stats.basicWisdom, h.stats.getWisdom(), h.stats.wisdomModi)
            powerInfo.setTextBasedOnStats(h.stats.basicPower, h.stats.getPower(), h.stats.powerModi)
            
            mightText.setText(h.might.toString())
            mindText.setText(h.mind.toString())
            magicText.setText(h.magic.toString())

        inventory.update(p)
        skillTree.update(p)