package UITooltip
import UIHandle
import UIWindow
import PlayerData
import initlater Tooltip

class UITooltipIcon extends UIHandle
    static function create(framehandle parent, real height) returns UITooltipIcon
        return new UITooltipIcon(parent, null, height)

    static function create(framehandle parent, UITooltipIcon prev, real height) returns UITooltipIcon
        return new UITooltipIcon(parent, prev, height)

    private framehandle handleText
    private framehandle handleIcon

    private construct(framehandle parent, UITooltipIcon prev, real height)
        super(createUIFrame("BACKDROP", parent))
        let textPadding = 0.0035
        setSize(height, height)
        setVisible(false)
        setTexture("UI/Tooltip/TooltipAddonBackground.dds")

        let innerIconPadding = 0.0012
        handleIcon = createUIFrame("BACKDROP", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, innerIconPadding, -innerIconPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -innerIconPadding, innerIconPadding)
        
        handleText = createUIFrame("TEXT", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPRIGHT, textPadding, 0)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, self, FRAMEPOINT_BOTTOMRIGHT, textPadding, 0)
        ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_LEFT)

        if prev != null
            setPoint(FRAMEPOINT_TOPLEFT, prev.handleText, FRAMEPOINT_TOPRIGHT, textPadding, 0)
            setPoint(FRAMEPOINT_BOTTOMLEFT, prev.handleText, FRAMEPOINT_BOTTOMRIGHT, textPadding, 0)

    function update(string text, string icon)
        setVisible(true)
        handleIcon.setTexture(icon)
        handleText.setText(text)

    function hide()
        setVisible(false)

public class UITooltip
    private static constant LINE_HEIGHT = 0.0122
    private static constant HEIGHT_OFFSET = 0.03
    private static constant MIN_HEIGHT = 0.08
    private static constant ICONS_HEIGHT = 0.015

    private static framehandle self

    private static framehandle handleIconsHolder
    private static UITooltipIcon array[3] icons
    
    private static framehandle handleHeaderText
    private static framehandle handleText
    private static framehandle hanldeLineTest
    private static real textWidth

    static function create()
        self = createUIFrameByName("TooltipBackground", GAME_UI, false)
        ..setSize(0.25, 0.2)
        ..setLevel(1000)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, CONSOLE_UI, FRAMEPOINT_BOTTOMRIGHT)
        ..setVisible(false)
        let padding = 0.005
        handleHeaderText = createUIFrameByName("TooltipTextHeader", self, false)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, padding, -padding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_TOPRIGHT, -padding, -0.021)

        handleIconsHolder = createUIFrame("FRAME", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleHeaderText, FRAMEPOINT_BOTTOMLEFT, 0.0, -padding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, handleHeaderText, FRAMEPOINT_BOTTOMRIGHT, 0.0, -padding)
        ..setHeight(ICONS_HEIGHT)

        handleText = createUIFrame("TEXT", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleIconsHolder, FRAMEPOINT_BOTTOMLEFT, 0.0, -padding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, 0.0, padding)

        textWidth = 0.25 - (padding * 2)

        hanldeLineTest = createUIFrame("TEXT", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleText, FRAMEPOINT_TOPLEFT, padding, 0)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, self, FRAMEPOINT_BOTTOMLEFT, padding * 2, 0)
        ..setVisible(false)

        icons[0] = UITooltipIcon.create(handleIconsHolder, ICONS_HEIGHT)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleIconsHolder, FRAMEPOINT_TOPLEFT)

        for i = 1 to icons.length - 1
            icons[i] = UITooltipIcon.create(handleIconsHolder, icons[i - 1], ICONS_HEIGHT)

    static function getLineCount(string text) returns int
        if text.length() < 40
            return 1
        hanldeLineTest.setText(text)
        let width = hanldeLineTest.getWidth()
        return (width / textWidth).ceil()

    static function hide(Player p)
        if not p.isLocal()
            return
        self.setVisible(false)

    static function display(Player p, Tooltip tt)
        displayInner(p, tt, null, null)

    static function display(Player p, Tooltip tt, TooltipAnchor anchor, UIHandle reference)   
        displayInner(p, tt, anchor, reference.self)

    static function display(Player p, Tooltip tt, TooltipAnchor anchor, framehandle reference)
        displayInner(p, tt, anchor, reference)

    static function displayInner(Player p, Tooltip tt, TooltipAnchor anchor, framehandle reference)
        if not p.isLocal()
            return
        self.clearAllPoints()
        if anchor != null
            switch anchor
                case RIGHT_BOTTOM
                    self.setPoint(FRAMEPOINT_TOPLEFT, reference, FRAMEPOINT_TOPRIGHT)
                default
                    self.setPoint(FRAMEPOINT_TOPRIGHT, reference, FRAMEPOINT_TOPLEFT)

        else
            self.setPoint(FRAMEPOINT_BOTTOMRIGHT, GAME_UI, FRAMEPOINT_BOTTOMRIGHT, 0, 0.12)

        for i = 0 to icons.length - 1
            icons[i].hide()
        
        let ttIcons = tt.getIcons()
        if ttIcons == null or ttIcons.isEmpty()
            handleIconsHolder.setHeight(0.001)
        else
            handleIconsHolder.setHeight(ICONS_HEIGHT)
            var index = 0
            for icon in ttIcons
                icons[index].update(icon.getName(), icon.getIcon())
                index++

        handleHeaderText.setText(tt.convertUIHeader())
        handleText.setText(tt.convertUIText())
        let lineNumbers = tt.getLineCount()

        let height = lineNumbers * LINE_HEIGHT
        if height > MIN_HEIGHT
            self.setHeight(height + HEIGHT_OFFSET)
        else
            self.setHeight(MIN_HEIGHT + HEIGHT_OFFSET)
        self.setVisible(true)

        destroy tt