package UIStackSellDialog

import ClosureFrames

import PlayerData

import UISlider

import initlater MainController
import initlater Stack

/*

public class StackSellDialogInfo
    protected Stack stack
    protected int cost
    protected int amount
    protected int maxAmount
    protected int maxAmountGold
    protected int maxAmountLeaderShip

public class UIStackSellDialog extends UIDialogOld
    private UISlider slider
    private framehandle editBox
    private framehandle totalGoldPrice
    private framehandle stockAmount
    private framehandle stackIcon
    private framehandle acceptButton
    private framehandle maxButton
    private framehandle leaderShipCancelIndicator

    private static constant goldCancelIndicatorColor = colorA(255, 20, 20, 255)

    construct()
        super(true)

        slider = new UISlider(pane)
        slider.getFrame().setPoint(FRAMEPOINT_TOP, pane, FRAMEPOINT_TOP, 0, -0.065)
        slider.getFrame().setLevel(1000)
        slider.onSliderValueChange() -> 
            let p = GetTriggerPlayerData()
            setStackValues(p, slider.getValue())

        stackIcon = createFrame("BACKDROP", "", pane, "", 0)
        ..setSize(0.04, 0.04)
        ..setPoint(FRAMEPOINT_TOPLEFT, pane, FRAMEPOINT_TOPLEFT, 0, -0.02)

        let innerFrame = createFrame("FRAME", "", pane, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, pane, FRAMEPOINT_TOPLEFT, 0.05, 0.0)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, pane, FRAMEPOINT_BOTTOMRIGHT, 0, 0)
        
        createFrame("CenteredText", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, innerFrame, FRAMEPOINT_TOPLEFT, 0, -0.02)
        ..setSize(0.05, 0.022)
        ..setText("Available")

        createFrame("RoundBoxBackground", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, innerFrame, FRAMEPOINT_TOPLEFT, 0, -0.040)
        ..setSize(0.05, 0.022)
        stockAmount = getFrame("RoundBoxText")

        createFrame("CenteredText", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOP, innerFrame, FRAMEPOINT_TOP, 0, -0.02)
        ..setSize(0.05, 0.022)
        ..setText("Buy")

        editBox = createFrame("EscMenuEditBoxTemplate", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOP, innerFrame, FRAMEPOINT_TOP, 0, -0.037)
        ..setSize(0.05, 0.027)
        ..onEditboxEnter() -> 
            let p = GetTriggerPlayerData()
            setStackValues(p, editBox.getText().toInt())

        createFrame("CenteredText", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, innerFrame, FRAMEPOINT_TOPRIGHT, 0, -0.02)
        ..setSize(0.05, 0.022)
        ..setText("Total")
        
        createFrame("GoldText", innerFrame, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, innerFrame, FRAMEPOINT_TOPRIGHT, -0.01, -0.034)
        ..setSize(0.05, 0.022)
        totalGoldPrice = getFrame("GoldTextText")

        leaderShipCancelIndicator = createFrame("BACKDROP", "", pane, "", 0)
        ..setSize(0.01, 0.01)
        ..setTexture("UI\\Textures\\leadership-cancelled.dds", 0, true)
        ..setPoint(FRAMEPOINT_TOPRIGHT, pane, FRAMEPOINT_TOPRIGHT, 0, -0.04)

        maxButton = createFrame("DialogDefaultButton", pane, 0, 0)
        ..setPoint(FRAMEPOINT_BOTTOM, pane, FRAMEPOINT_BOTTOM, 0.0, 0.0)
        ..onClick() ->
            let p = GetTriggerPlayerData()
            setStackValues(p, p.dialogInfo.sellInfo.maxAmount)
        getFrame("DialogButtonText").setText("Max")

        acceptButton = createFrame("DialogAcceptButton", pane, 0, 0)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, pane, FRAMEPOINT_BOTTOMLEFT, 0.0, 0.0)
        ..onClick() ->
            let p = GetTriggerPlayerData()
            buy(p)
        getFrame("DialogButtonText").setText("Buy")

    override function cancelInner(Player p)

    private function calculateMaxAmount(Player p)
        let info = p.dialogInfo.sellInfo
        let stack = info.stack
        info.maxAmount = stack.getAmount()
        info.maxAmountGold = (p.hero.getGold() / info.cost).floor()
        if info.maxAmountGold < p.dialogInfo.sellInfo.maxAmount
            p.dialogInfo.sellInfo.maxAmount = info.maxAmountGold
        info.maxAmountLeaderShip = p.hero.getMaxAmountOfStackTypeRemainingBasedOnLeadership(stack.getStackType())
        if info.maxAmountLeaderShip < p.dialogInfo.sellInfo.maxAmount
            p.dialogInfo.sellInfo.maxAmount = info.maxAmountLeaderShip

    private function setStackValues(Player p, int amount)
        let info = p.dialogInfo.sellInfo
        info.amount = amount
        if amount > info.stack.getAmount()
            info.amount = info.stack.getAmount()
        if amount < 1
            info.amount = 1

        update(p)

    private function buy(Player p)
        let info = p.dialogInfo.sellInfo
        MainController.buyStack(p.hero, info.stack, info.amount, info.cost)
        hide(p)

    private function update(Player p)
        let info = p.dialogInfo.sellInfo
        if p.isLocal()
            slider.setValue(info.amount)
            editBox.setText(info.amount.toString())
            totalGoldPrice.setText((info.amount * info.cost).toString())
            if info.amount > info.maxAmountGold
                totalGoldPrice.setTextColor(goldCancelIndicatorColor)
            else
                totalGoldPrice.setTextColor(COLOR_WHITE)
            acceptButton.setEnabled(info.amount > 0 and info.amount <= info.maxAmount)
            leaderShipCancelIndicator.setVisible(info.amount > info.maxAmountLeaderShip)

    function show(Player p, Stack stack, int cost)
        let info = p.dialogInfo.sellInfo
        info.stack = stack
        info.amount = 1
        info.cost = cost
        
        super.show(p)
        
        calculateMaxAmount(p)

        if p.isLocal()
            slider.setMinMax(1, stack.getAmount())
            stockAmount.setText(info.stack.getAmount().toString())
            stackIcon.setTexture(info.stack.getStackType().icon, 0, true)


        update(p)

        */