package UIDialogBuyStack

import PlayerData
import UISlider

import initlater Stack
import UIDialog
import UIHandle
import UIWindow
import UIButtonIconWithCost
import HeroData

init
    Initializer.register(InitializerNames.UI) -> 
        Player.forEachActive() (Player p) ->
            UIDialogBuyStackInfo.create(p)
        UIDialogBuyStack.create()

class UIDialogBuyStackInfo
    static UIDialogBuyStackInfo array data
    static function get(Player p) returns UIDialogBuyStackInfo
        return data[p castTo int]

    static function get() returns UIDialogBuyStackInfo
        return get(GetTriggerPlayerData())

    protected static function create(Player p)
        data[p castTo int] = new UIDialogBuyStackInfo(p)

    protected Player p
    protected Stack stack
    protected int cost
    protected int amount
    protected int maxAmount
    protected int maxAmountLeaderShip

    private construct(Player p)
        this.p = p

public class UIDialogBuyStack
    private static UIDialog dia
    private static UISlider slider

    private static UIButtonIconWithCost previewBtn
    private static framehandle infoText

    static function create()
        dia = UIDialog.create("BuyStack")
        ..onAccept() (p) -> 
            buy(UIDialogBuyStackInfo.get(p))

        dia.addButton(FRAMEPOINT_BOTTOM, "Max") (p) ->
            maximizeValue(UIDialogBuyStackInfo.get(p))

        previewBtn = UIButtonIconWithCost.create(dia, 1.2)
        ..setInnerPoint(FRAMEPOINT_TOPLEFT, dia, FRAMEPOINT_TOPLEFT, 0.005, -0.018)
        ..setEnabled(false)

        slider = UISlider.create(dia)
        ..setPoint(FRAMEPOINT_LEFT, previewBtn, FRAMEPOINT_RIGHT, 0.005, 0.0)
        ..setWidth(dia.getInnerWidth() - (previewBtn.self.getWidth() + 0.01))
        ..onValueChange() (p) -> 
            setStackValues(UIDialogBuyStackInfo.get(p), slider.getValue())

        infoText = createUIFrame("TEXT", dia)
        ..setInnerPoint(FRAMEPOINT_TOP, dia, FRAMEPOINT_TOP, 0, -0.08)
        ..setSize(0.15, 0.008)
        ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)
        ..setTextColor(KStringUtils.COLOR_NEGATIVE)
    
    static function open(Player p, Stack stack, int cost)
        openInner(UIDialogBuyStackInfo.get(p), stack, cost)

    private static function openInner(UIDialogBuyStackInfo info, Stack stack, int cost)
        info.stack = stack
        info.amount = 1
        info.maxAmount = stack.getAmount()
        info.maxAmountLeaderShip = info.p.hero.getMaxAllowedControllableStackType(stack.typ) - info.p.hero.army.countCurrentAmountOfControlledStackType(stack.typ)
        info.cost = cost

        if info.p.isLocal()
            slider.setMinMax(1, info.maxAmount)
            previewBtn.setTexture(info.stack.typ.getIcon())
            dia.setHeader("Buy  "+stack.typ.getName())
            
        dia.open(info.p)
        update(info)

    private static function buy(UIDialogBuyStackInfo info)
        HeroDataChange.pay(info.cost, info.p.hero, info.amount)
        info.stack.addAmount(-info.amount)
        info.p.hero.army.add(info.stack.typ, info.amount)
        dia.close(info.p)

    private static function maximizeValue(UIDialogBuyStackInfo info) 
        let maxAmountGold = (info.p.hero.data.getGold() / info.cost).floor()
        setStackValues(info, min(maxAmountGold, info.maxAmountLeaderShip))

    private static function setStackValues(UIDialogBuyStackInfo info, int amount)
        info.amount = amount
        if amount > info.maxAmount
            info.amount = info.maxAmount
        if amount < 1
            info.amount = 1

        update(info)

    private static function update(UIDialogBuyStackInfo info)
        if info.p.isLocal()
            previewBtn.setAmount(info.amount, info.maxAmount)
            previewBtn.setCost(info.cost, info.p.hero, info.amount)
            slider.setValue(info.amount)
            var disableText = ""
            if not info.cost * info.amount <= info.p.hero.data.getGold()
                disableText = "Not enough Gold"
            if not info.amount <= info.maxAmountLeaderShip
                disableText = "Not enough Leadership"
            if not info.p.hero.army.canAddStackType(info.stack.typ)
                disableText = "Not enough Place"

            dia.enableAccept(disableText == "")
            infoText.setText(disableText)