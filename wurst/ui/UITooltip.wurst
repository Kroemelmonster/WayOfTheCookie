package UITooltip

import PlayerData
import UIActionWindow
import LinkedList
import FramehandleNames
import KUtil
import initlater BuffType
import StackStatsModifier

constant LINE_HEIGHT = 0.0122
constant HEIGHT_OFFSET = 0.03
constant MIN_HEIGHT = 0.08

framehandle lineTest
real tooltipTextWidth

class TooltipLine
    protected string str
    protected int resultingLines

    construct(string str)
        setLine(str)


    private construct(string str, int resultingLines)
        this.str = str
        this.resultingLines = resultingLines

    protected static function copy(TooltipLine line) returns TooltipLine
        return new TooltipLine(line.str, line.resultingLines)

    protected function setLine(string str)
        this.str = str
        if str.length() < 40
            resultingLines = 1
        else
            lineTest.setText(str)
            let width = lineTest.getWidth()
            resultingLines = (width / tooltipTextWidth).ceil()

public class Tooltip
    static constant COLOR_PRIMARY = colorA(255, 204, 0, 255).toColorString()
    static constant COLOR_NEGATIVE = color(200,50,50).toColorString()
    static constant COLOR_SECONDARY = color(145, 145, 145).toColorString()
    static constant COLOR_POSITIVE = color(75, 214, 19).toColorString()

    protected string header = ""
    protected LinkedList<TooltipLine> lines = new LinkedList<TooltipLine>
    protected int cost = -1
    protected int cooldown = -1

    static function copy(Tooltip other) returns Tooltip
        let tooltip = new Tooltip()
        tooltip.header = other.header
        tooltip.cost = other.cost
        tooltip.cooldown = other.cooldown
        for TooltipLine line in other.lines
            tooltip.lines.add(TooltipLine.copy(line))

        return tooltip

    static function create(string header, string key) returns Tooltip
        let tooltip = new Tooltip()
        tooltip.header = header
        tooltip.addKey(key)
        return tooltip

    static function create(string header) returns Tooltip
        let tooltip = new Tooltip()
        tooltip.header = header
        return tooltip

    static function playerColored(Player p, string str) returns string
        return p.c.toColorString() + str + "|r"

    static function coloredRange(string color, intRange r) returns string
        var str = color + r.min.toString()
        if r.min < r.max
            str +=  "|r - " + color + r.max.toString()
        str += "|r"
        return str

    @inline
    static function coloredInt(string color, int value) returns string
        return color + value.toString() + "|r"

    @inline
    static function coloredString(string color, string value) returns string
        return color + value + "|r"

    @inline
    static function primaryString(string value) returns string
        return COLOR_PRIMARY + value + "|r"

    @inline
    static function secondaryString(string value) returns string
        return COLOR_SECONDARY + value + "|r"

    @inline
    private static function statInner(string prefix, string data) returns string
        return prefix + " : " + data

    @inline
    static function stat(string prefix, string color, intRange value) returns string
        return statInner(prefix, coloredRange(color, value))

    @inline
    static function stat(string prefix, intRange value) returns string
        return statInner(prefix, coloredRange(Tooltip.COLOR_PRIMARY, value))

    @inline
    static function stat(string prefix, string color, int value) returns string
        return statInner(prefix, coloredInt(color, value))

    @inline
    static function stat(string prefix, int value) returns string
        return statInner(prefix, coloredInt(Tooltip.COLOR_PRIMARY, value))

    @inline
    static function stat(string prefix, string value) returns string
        return statInner(prefix, coloredString(Tooltip.COLOR_PRIMARY, value))

    @inline
    static function coloredModiInt(int value) returns string
        if value > 0
            return coloredString(COLOR_POSITIVE, " +" + value.toString())
        else if value < 0
            return coloredString(COLOR_NEGATIVE, " " + value.toString())
        return ""

    @inline
    static function percent(real perc) returns string
        return (perc * 100).toString(1) + "%"

    @inline
    static function coloredPercent(real perc) returns string
        if perc > 0
            return coloredString(COLOR_POSITIVE, "+" + percent(perc))
        else if perc < 0
            return coloredString(COLOR_NEGATIVE, percent(perc))
        return coloredString(COLOR_SECONDARY, percent(perc))

    @inline
    static function modi(StackStatsModifier modi) returns string
        var str = coloredModiInt(modi.addBonus)
        if modi.multi != 100
            str += " " + coloredPercent((modi.multi - 100) / 100.0)
        return str

    @inline
    function addLine(string str)
        lines.add(new TooltipLine(str))

    @inline
    function addKey(string key)
        header += " [" +coloredString(COLOR_PRIMARY, key)+ "]"

    @inline
    function addTooltip(Tooltip other, boolean once)
        for TooltipLine line in other.lines
            if line != null
                lines.add(line)
        if once
            destroy other

    @inline
    function addBuffType(BuffType buffType)
        addLine(statInner("Buff", coloredString(COLOR_SECONDARY, buffType.getName())))
        addTooltip(buffType.getTooltip(), false)

    @inline
    function setLine(int index, string str)
        lines.get(index).setLine(str)

    @inline
    function setCost(int value)
        cost = value

    @inline
    function setCooldown(int value)
        cooldown = value

    protected function convert() returns string
        var str = ""
        for TooltipLine ttLine in lines
            if ttLine != null
                str += ttLine.str + "|n"
        return str

    protected function getLineCount() returns int
        var count = 0
        for TooltipLine ttLine in lines
            if ttLine != null
                count += ttLine.resultingLines
        return count

    function display(Player p, boolean once)
        UITooltip.setTooltip(p, this)
        if once
            destroy this

    ondestroy
        destroy lines

class UITooltip
    private static framehandle self
    private static framehandle text
    private static framehandle headerText

    private static framehandle array costPoints
    private static framehandle cooldownIcon
    private static framehandle cooldownText

    static function setup()
        self = createFrame("BoxedText", GAME_UI, 0, 0)
        self.setWidth(0.25)
        self.setVisible(false)
        text = getFrame("BoxedTextValue")
        let header = getFrame("BoxedTextHeader")
        headerText = getFrame("BoxedTextHeaderValue")
        lineTest = getFrame("BoxedTextTestLines")
        ..setVisible(false)

        tooltipTextWidth = self.getWidth() - 0.01

        self.setPoint(FRAMEPOINT_BOTTOMRIGHT, UIActionWindow.self(), FRAMEPOINT_TOPRIGHT)

        for int i = 0 to 3
            costPoints[i] = createFrame(FramehandleTypeNames.backdrop, "", header, "", 0)
                ..setSize(0.013, 0.013)
                ..setPoint(FRAMEPOINT_TOPRIGHT, header, FRAMEPOINT_TOPRIGHT, -0.013 * i, 0)
                ..setTexture("full.blp", 0, true)
                ..setVisible(false)

        cooldownText = createFrame(FramehandleTypeNames.text, "", header, "", 0)
            ..setSize(0.007, 0.013)
            ..setPoint(FRAMEPOINT_TOPRIGHT, header, FRAMEPOINT_TOPRIGHT, 0.0, -0.017)
            ..setText("2")
            ..setVisible(false)
    
        cooldownIcon = createFrame(FramehandleTypeNames.backdrop, "", header, "", 0)
            ..setSize(0.013, 0.013)
            ..setPoint(FRAMEPOINT_TOPRIGHT, header, FRAMEPOINT_TOPRIGHT, -0.008, -0.015)
            ..setTexture("cooldown.blp", 0, true)
            ..setVisible(false)

    static protected function setTooltip(Player p, Tooltip tt)
        if p.isLocal() == false
            return
     
        text.setText(tt.convert())
        let lineNumbers = tt.getLineCount()
        let height = lineNumbers * LINE_HEIGHT
        if height > MIN_HEIGHT
            self.setHeight(height + HEIGHT_OFFSET)
        else
            self.setHeight(MIN_HEIGHT + HEIGHT_OFFSET)
        self.setVisible(true)

        for int i = 0 to 3
            costPoints[i].setVisible(i < tt.cost)


        cooldownText.setVisible(tt.cooldown > 0)
        cooldownText.setText(tt.cooldown.toString())
        cooldownIcon.setVisible(tt.cooldown > 0)

        headerText.setText(tt.header)


    static function hide(Player p)
        if p.isLocal()
            hide()

    static function hide()
        self.setVisible(false)