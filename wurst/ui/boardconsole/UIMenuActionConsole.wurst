package UIMenuActionConsole

import PlayerData

import UIWindow
import UIHandle
import UIButtonIcon
import Action
import BoardEntity
import ActionCost
import OrderSystem
import PlayerBoardHelper
import MouseContext


class UIBoardActionButton extends UIButtonIcon
    private Action action

    construct(UIHandle parent)
        super(parent.self, true, false, true)
        setSize(0.037, 0.037)

        onClick() () -> 
            tryToActivate(GetTriggerPlayerData())
        onMouseEnter() -> 
            if action != null
                action.onUIMouseEnter()
        onMouseLeave() -> 
            if action != null
                action.onUIMouseLeave()

    protected function simulateClick(Player p)
        tryToActivate(p)

    private function tryToActivate(Player p)
        if action == null
            return
        let activeEntity = PlayerBoardHelper.getCurrentActiveEntity(p)
        if not OrderSystem.canOrderUnit(p, activeEntity)
            return
        if not OrderSystem.isUnitSelected(p, activeEntity)
            // lets do correct that
            MouseContext.forcePlayerSelect(p, activeEntity.getCell())
        if not OrderSystem.canInteractWithBoard(p)
            return
        if not action.canActivate()
            return
        action.activate()

    function setAction(Action action, boolean showHighlight, string key)
        this.action = action
        setVisible(true)
        setBackground(action.getIcon())
        action.setKey(key)

        let cost = action.getCost()
        setCounter(cost.getCurrentCharges())
        setGlowVisible(showHighlight)

        if action.canActivate()
            enable()
        else
            if not cost.hasEnoughMana()
                disable("UI/Button/BTNExtensionOverlapDisabledMana.dds")
            else if cost.isOnCooldown()
                let cooldown = cost.getCurrentCooldown()
                if cooldown > 0
                    disable("UI/Button/BTNExtensionOverlapCooldown" + cooldown.toString() + ".dds")
                else // a cooldown of 0 means the entity just used it and is not allowed to us it this turn again
                    disable("UI/Button/BTNExtensionOverlapDisabled.dds")
            else
                disable("UI/Button/BTNExtensionOverlapDisabled.dds")

    function setEmpty()
        action = null
        setVisible(false)
        //disable()
        //setGlowVisible(false)
        //setIcon("Icons/BTNDotted.dds")

public class UIMenuActionConsole
    protected static UIMenu menu

    //protected static UIFightResultDialog fightResultDialog
    protected static framehandle array[8] handleActionPoints

    protected static UIBoardActionButton array[4] primaryBtns
    protected static UIBoardActionButton array[4] secondaryBtns

    protected static constant string array[4] PRIMARY_KEYS = ["Q", "W", "E", "R"]
    protected static constant string array[4] SECONDARY_KEYS = ["F", "D", "S", "A"] //its reverse !


    static function create()
        let imgWidth = 0.2
        let imgHeight = imgWidth / 1.37179487179
        let paddingMenuLeft = 0.02
        let paddingMenuTop = 0.03
        menu = UIMenu.create()
        ..setPointToGameUI(FRAMEPOINT_BOTTOMRIGHT, FRAMEPOINT_BOTTOMRIGHT)
        ..setSize(imgWidth - paddingMenuLeft, imgHeight - paddingMenuTop)

        let actionPointWidth = 0.0205
        handleActionPoints[0] = createUIFrame("BACKDROP", menu)
        ..setPoint(FRAMEPOINT_TOPLEFT, menu, FRAMEPOINT_TOPLEFT, 0.0276 -paddingMenuLeft, -0.04 +paddingMenuTop)
        ..setSize(actionPointWidth, actionPointWidth)
        ..setTexture("UI/glues/singleplayer/humancampaign3d/black32.dds")

        for i = 1 to handleActionPoints.length - 1
            handleActionPoints[i] = createUIFrame("BACKDROP", menu)
            ..setPoint(FRAMEPOINT_TOPLEFT, handleActionPoints[i - 1], FRAMEPOINT_TOPRIGHT)
            ..setSize(actionPointWidth, actionPointWidth)
            handleActionPoints[i].setTexture("UI/glues/singleplayer/humancampaign3d/black32.ds")

        createUIFrame("BACKDROP", menu)
        ..setPoint(FRAMEPOINT_TOPLEFT, menu, FRAMEPOINT_TOPLEFT, -paddingMenuLeft, paddingMenuTop)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, menu, FRAMEPOINT_BOTTOMRIGHT)
        ..setTexture("UI/BoardConsole/ActionWindowBackground.dds")

        primaryBtns[0] = new UIBoardActionButton(menu)
        ..setPoint(FRAMEPOINT_TOPLEFT, menu, FRAMEPOINT_TOPLEFT, 0.029 -paddingMenuLeft, -0.062 +paddingMenuTop)

        secondaryBtns[0] = new UIBoardActionButton(menu)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, menu, FRAMEPOINT_BOTTOMRIGHT, -0.011, 0.006)

        let padding = 0.004
        for i = 1 to primaryBtns.length - 1
            primaryBtns[i] = new UIBoardActionButton(menu)
            ..setPoint(FRAMEPOINT_TOPLEFT, primaryBtns[i - 1], FRAMEPOINT_TOPRIGHT, padding, 0)

        for i = 1 to secondaryBtns.length - 1
            secondaryBtns[i] = new UIBoardActionButton(menu)
            ..setPoint(FRAMEPOINT_TOPRIGHT, secondaryBtns[i - 1], FRAMEPOINT_TOPLEFT, -padding, 0)

        Player.forEachActive() activePlayer ->
            activePlayer.onAnyKeyPress() (Player p, string key) ->
                onkeyPress(p, key)


    static function updateActionPoints(BoardEntity entity)
        updateActionPoints(entity, 0)

    static function updateActionPoints(BoardEntity entity, ActionCostData cost)
        updateActionPoints(entity, cost, 0)

    static function updateActionPoints(BoardEntity entity, ActionCostData cost, int additionalAP)
        if entity.getBoard().isLocalPlayer()
            var ap = cost.getAP() + additionalAP
            if cost.isApFill()
                ap = 100
            updateActionPointsLocal(entity, ap)

    static function updateActionPoints(BoardEntity entity, int ap)
        if entity.getBoard().isLocalPlayer()
            updateActionPointsLocal(entity, ap)
                
    
    static function update(Player p)
        if not p.isLocal() or p.doesNotNeedVisuals
            return
    
        for i = 0 to primaryBtns.length - 1
            primaryBtns[i].setEmpty()

        for i = 0 to secondaryBtns.length - 1
            secondaryBtns[i].setEmpty()

        let activeEntity = PlayerBoardHelper.getCurrentActiveEntity(p)

        updateActionPointsLocal(activeEntity, 0)
        if not activeEntity.canBeControlled(p)
            return

        let currentAction = activeEntity.getCurrentAction()
        let defaultAction = activeEntity.getDefaultAction()
        let isCurrentUnitSelected = OrderSystem.isUnitSelected(p, activeEntity)

        var primaryIndex = 0
        var secondaryIndex = 0
        let actionsIterator = activeEntity.actionsIterator()
        while actionsIterator.hasNext()
            let action = actionsIterator.next()
            let showHighlight = isCurrentUnitSelected and (action == currentAction)
            if action.showAsPrimary()
                primaryBtns[primaryIndex].setAction(action, showHighlight, PRIMARY_KEYS[primaryIndex])
                primaryIndex ++
            if action.showAsSecondary()
                if action != defaultAction
                    secondaryBtns[secondaryIndex].setAction(action, showHighlight, SECONDARY_KEYS[secondaryIndex])
                secondaryIndex ++

        destroy actionsIterator

        secondaryBtns[secondaryBtns.length - 1].setAction(defaultAction,
            isCurrentUnitSelected and (defaultAction == currentAction), SECONDARY_KEYS[secondaryIndex])
        

    static function hide(Player p)
        menu.hide(p)

    static function show(Player p)
        menu.show(p)

    private static function getBtnFromKey(string key) returns UIBoardActionButton
        for i = 0 to PRIMARY_KEYS.length - 1
            if key == PRIMARY_KEYS[i]
                return primaryBtns[i]
        for i = 0 to SECONDARY_KEYS.length - 1
            if key == SECONDARY_KEYS[i]
                return secondaryBtns[i]

        return null

    private static function onkeyPress(Player p, string key)
        if not OrderSystem.canOrderUnit(p, PlayerBoardHelper.getCurrentActiveEntity(p))
            return
        if key == "Escape"
            OrderSystem.resetCurrentSelectedAction(p.currentSelectedEntity)
            return

        let btn = getBtnFromKey(key)
        if btn != null
            btn.simulateClick(p)

    private static function updateActionPointsLocal(BoardEntity entity, int ap)
        if not entity.getConntrollingPlayer().isLocal()
            for i = 0 to handleActionPoints.length - 1
                handleActionPoints[i].setTexture("UI/glues/singleplayer/humancampaign3d/black32.ds")
            return
    
        let maxActionPoints = entity.getMaxAP()
        let maxRemainingPoints = entity.getRemainingAP()
        let startPreview = maxRemainingPoints - ap
        for i = 0 to handleActionPoints.length - 1
            if i < maxActionPoints
                if i >= maxRemainingPoints
                    handleActionPoints[i].setTexture("UI/BoardConsole/WarningColor.dds")
                else if i >= startPreview
                    handleActionPoints[i].setTexture("UI/BoardConsole/SecondaryColor.dds")
                else
                    handleActionPoints[i].setTexture("UI/BoardConsole/PrimaryColor.dds")
            else
                handleActionPoints[i].setTexture("UI/glues/singleplayer/humancampaign3d/black32.ds")