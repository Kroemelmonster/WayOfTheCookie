package UIMenuBoardConsole

import PlayerData
import UIButton

import initlater InitiativeList
import initlater BoardStack
import initlater MouseContext
import initlater BoardEntity
import UIButtonIcon
import UIHandle
import UIWindow
import initlater UIMenuActionConsole

class InitiativeCommandButton extends UIButtonIcon
    protected framehandle handleTime
    protected BoardEntity entity

    construct(UIHandle parent, boolean withTime, real size)
        super(parent.self, false, true, false, true)
        setSize(size, size)

        onClick() () ->
            onClickInner(GetTriggerPlayerData())
        onMouseEnter() -> 
            onEnterInner(GetTriggerPlayerData())
        onMouseLeave() -> 
            onLeaveInner(GetTriggerPlayerData())
        

        if withTime
            handleTime = createUIFrame("TEXT", self)
            ..setPoint(FRAMEPOINT_BOTTOMLEFT, self, FRAMEPOINT_TOPLEFT)
            ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_TOPRIGHT)
            ..setHeight(0.009)
            ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)

    protected function setEntity(BoardEntity entity, int time)
        this.entity = entity
        if time >= 0
            handleTime.setText(time.toString())

        setBackground(entity.getIcon())
        let player1 = entity.getBoard().getPlayer(0)
        if player1.isLocal()
            setBorderBasedOnPlayerRelationship(player1.getRelationshipStatusTo(entity.getPlayer()))
        let player2 = entity.getBoard().getPlayer(1)
        if player2.isLocal()
            setBorderBasedOnPlayerRelationship(player2.getRelationshipStatusTo(entity.getPlayer()))

        switch(entity.getType())
            case STACK
                setAmount(entity.toStack().stats.getAmount())
            case HERO
                setAmountIcon("UI/BoardConsole/HeroIcon.dds")

    protected function showHighlightBasedOnEntity(BoardEntity entity)
        showHighlight(entity == this.entity)

    private function onClickInner(Player p)
        if entity == null
            return
        
        let entityCell = entity.getCell()
        if entityCell != null
            MouseContext.forcePlayerSelect(p, entityCell)
    
    private function onEnterInner(Player p)
        if entity == null
            return

        let entityCell = entity.getCell()
        if entityCell != null
            MouseContext.forceMouseEnter(p, entityCell)

    private function onLeaveInner(Player p)
        MouseContext.forceMouseLeave(p)

init
    Initializer.register(InitializerNames.UI) -> 
        UIMenuBoardConsole.create()

class UIMenuBoardConsole
    protected static UIMenu menu

    private static InitiativeCommandButton array[15] btns

    protected static function create()
        let iconSize = 0.035
        let firstIconScale = 1.5
        let padding = 0.002
        menu = UIMenu.create()
        ..setPointToGameUI(FRAMEPOINT_BOTTOMLEFT, FRAMEPOINT_BOTTOMLEFT)
        ..setSize(0.4, iconSize * firstIconScale + padding)

        UIMenuActionConsole.create()

        btns[0] = new InitiativeCommandButton(menu, false, iconSize)
        ..setPoint(FRAMEPOINT_TOPLEFT, menu, FRAMEPOINT_TOPLEFT)
        ..setScale(firstIconScale)

        for i = 1 to btns.length - 1
            btns[i] = new InitiativeCommandButton(menu, true, iconSize)
            ..setPoint(FRAMEPOINT_BOTTOMLEFT, btns[i - 1].self, FRAMEPOINT_BOTTOMRIGHT, padding, 0)

    static function refresh(InitiativeList initiative)
        if not initiative.getBoard().isLocalPlayer()
            return
        
        let cur = initiative.getCurrent()
        if cur != null
            btns[0].setEntity(cur.getBoardEntity(), -1)

        let iterator = initiative.iterator()
        for i = 1 to btns.length - 1
            if iterator.hasNext()
                InitiativeEntry entry = null
                InitiativeBoardEntity entity = null
                while entity == null and iterator.hasNext()
                    entry = iterator.next()
                    entity = entry.getBoardEntity()
                if entity != null
                    btns[i].setEntity(entity.getBoardEntity(), entry.getTime())
                else
                    btns[i].setVisible(false)
            else
                btns[i].setVisible(false)

        destroy iterator
        
    static function highlightEntity(Player p, BoardEntity highlightEntit)
        if not p.isLocal()
            return

        for i = 0 to btns.length - 1
            btns[i].showHighlightBasedOnEntity(highlightEntit)

    static function hide(Player p)
        menu.hide(p)
        UIMenuActionConsole.hide(p)

    static function show(Player p)
        menu.show(p)
        UIMenuActionConsole.show(p)
    
    static function resetHighlight(Player p)
        if not p.isLocal()
            return

        for i = 0 to btns.length - 1
            btns[i].showHighlight(false)
