package UIHeroInventory

import Textures

import UIButton

import Stack
import UIStackSplitDialog

import initlater PlayerData
import initlater Hero
import initlater KItem
import UITooltip
import UIButtonIcon
import UIHandle

constant int MAX_ACTIVESLOTS = 8

class UIHeroInventoryDragInfo
    int pos
    KItem object

    function reset()
        pos = -1
        object = null

public class UIHeroInventoryInfo
    protected int startDragMousePressedIndex = -1

    protected Hero hero = null
    protected UIHeroInventoryDragInfo startDrag = new UIHeroInventoryDragInfo()
    protected UIHeroInventoryDragInfo endDrag = new UIHeroInventoryDragInfo()

    protected function setupDragStart(int i, boolean flagActive)
        if flagActive
            startDrag.object = hero.getActiveItem(i)
        else
            startDrag.object = hero.getBackPackItem(i)

        if startDrag.object == null
            endDrag.reset()
            startDrag.reset()
        else
            startDrag.pos = i
            if flagActive == false
                startDrag.pos += MAX_ACTIVESLOTS

    protected function reset()
        startDrag.reset()
        endDrag.reset()

    protected function setupDragEnd(int i, boolean flagActive)
        if flagActive
            endDrag.object = hero.getActiveItem(i)
        else
            endDrag.object = hero.getBackPackItem(i)
        
        endDrag.pos = i
        if flagActive == false
            endDrag.pos += MAX_ACTIVESLOTS

class UIHeroInventoryItemButton extends UIButtonIcon
    protected int index

    construct(framehandle parent)
        super(parent, true, false, false)

public class UIHeroInventory
    protected UIHeroInventoryItemButton array[MAX_ACTIVESLOTS] activeBtns
    protected UIHeroInventoryItemButton array[20] backPackBtns

    construct(framehandle reference)
        for int i = 0 to activeBtns.length - 1
            activeBtns[i] = new UIHeroInventoryItemButton(reference)
            if i == 0
                activeBtns[i].setPoint(FRAMEPOINT_TOPLEFT, reference, FRAMEPOINT_TOPLEFT, 0.015, -0.015)
            else
                activeBtns[i].setPoint(FRAMEPOINT_TOPLEFT, activeBtns[i - 1].self, FRAMEPOINT_TOPRIGHT, 0.002, 0)
            activeBtns[i].onClick() ->
                let p = GetTriggerPlayerData()
                let kItem = p.heroWindoInfo.inventory.hero.getActiveItem(i)
                if kItem != null
                    Log.info("item klick "+kItem.toString())

            activeBtns[i].onMouseDown() -> 
                let mouseBtn = BlzGetTriggerPlayerMouseButton()
                if mouseBtn == MOUSE_BUTTON_TYPE_LEFT
                    let p = GetTriggerPlayerData()
                    let info = p.heroWindoInfo.inventory
                    info.setupDragStart(i, true)
                    info.startDragMousePressedIndex = p.mousePressedIndex

            activeBtns[i].onMouseUp() -> 
                let p = GetTriggerPlayerData()
                let info = p.heroWindoInfo.inventory
                let mouseBtn = BlzGetTriggerPlayerMouseButton()
                if mouseBtn == MOUSE_BUTTON_TYPE_LEFT
                    dragEnd(p)
                    info.startDragMousePressedIndex  = -1
                
            activeBtns[i].onMouseEnter() -> 
                let p = GetTriggerPlayerData()
                let info = p.heroWindoInfo.inventory

                if info.startDrag.pos >= 0
                    info.setupDragEnd(i, true)
                    update(p)
                else
                    showItemInfo(p, activeBtns[i], p.heroWindoInfo.inventory.hero.getActiveItem(i))

            activeBtns[i].onMouseLeave() ->
                let p = GetTriggerPlayerData()
                UITooltip.hide(p)
        
        for int i = 0 to backPackBtns.length - 1
            backPackBtns[i] = new UIHeroInventoryItemButton(reference)
            if ModuloInteger(i, 5) == 0
                backPackBtns[i].setPoint(FRAMEPOINT_TOPLEFT, reference, FRAMEPOINT_TOPLEFT, 0.015, (i / 5.0).floor() * -0.04 - 0.08)
            else
                backPackBtns[i].setPoint(FRAMEPOINT_TOPLEFT, backPackBtns[i - 1].self, FRAMEPOINT_TOPRIGHT, 0.002, 0)
            backPackBtns[i].onClick() ->
                let p = GetTriggerPlayerData()
                let kItem = p.heroWindoInfo.inventory.hero.getBackPackItem(i)
                if kItem != null
                    Log.info("item klick backpack "+kItem.toString())

            backPackBtns[i].onMouseDown() -> 
                let mouseBtn = BlzGetTriggerPlayerMouseButton()
                if mouseBtn == MOUSE_BUTTON_TYPE_LEFT
                    let p = GetTriggerPlayerData()
                    let info = p.heroWindoInfo.inventory
                    info.setupDragStart(i, false)
                    info.startDragMousePressedIndex = p.mousePressedIndex

            backPackBtns[i].onMouseUp() -> 
                let p = GetTriggerPlayerData()
                let info = p.heroWindoInfo.inventory
                let mouseBtn = BlzGetTriggerPlayerMouseButton()
                if mouseBtn == MOUSE_BUTTON_TYPE_LEFT
                    dragEnd(p)
                    info.startDragMousePressedIndex  = -1
                
            backPackBtns[i].onMouseEnter() -> 
                let p = GetTriggerPlayerData()
                let info = p.heroWindoInfo.inventory

                if info.startDrag.pos >= 0
                    info.setupDragEnd(i, false)
                    update(p)
                else
                    showItemInfo(p, backPackBtns[i], p.heroWindoInfo.inventory.hero.getBackPackItem(i))
            
            backPackBtns[i].onMouseLeave() ->
                let p = GetTriggerPlayerData()
                UITooltip.hide(p)

    protected function showItemInfo(Player p, UIHeroInventoryItemButton btn, KItem kitem)
        if kitem == null
            return
        let tt = kitem.createTooltip()
        tt.display(p, true, TooltipAnchor.TOP_LEFT, btn.self)

    function firstOpen(Player p)
        p.heroWindoInfo.inventory.hero = p.hero

    function update(Player p)
        let info = p.heroWindoInfo.inventory
        // are you currently Dragging ?
        if info.startDrag.pos >= 0
            // mouse stopped or mouseDragINdex is different ?
            if p.mousePressed == false or p.mousePressedIndex != info.startDragMousePressedIndex
                // stop any drag
                info.reset()

        if p.isLocal() == false
            return

        for int i = 0 to activeBtns.length - 1
            let kItem = info.hero.getActiveItem(i)
            let btn = activeBtns[i]
            drawButton(info, kItem, btn, i)
        for int i = 0 to backPackBtns.length - 1
            let kItem = info.hero.getBackPackItem(i)
            let btn = backPackBtns[i]
            drawButton(info, kItem, btn, MAX_ACTIVESLOTS + i)
    
    private function dragEnd(Player p)
        let info = p.heroWindoInfo.inventory
        if info.startDrag.object == null
            return
        if info.endDrag.object == info.startDrag.object
            return

        if info.endDrag.pos >= 0

            if info.startDrag.pos < MAX_ACTIVESLOTS
                info.hero.removeActiveItem(info.startDrag.pos)
            else
                info.hero.removeBackPackItem(info.startDrag.pos - MAX_ACTIVESLOTS)
            if info.endDrag.object != null
                if info.endDrag.pos < MAX_ACTIVESLOTS
                    info.hero.removeActiveItem(info.endDrag.pos)
                else
                    info.hero.removeBackPackItem(info.endDrag.pos- MAX_ACTIVESLOTS)

            if info.endDrag.pos < MAX_ACTIVESLOTS
                info.hero.setActiveItem(info.endDrag.pos, info.startDrag.object)
            else
                info.hero.setBackPackItem(info.endDrag.pos - MAX_ACTIVESLOTS, info.startDrag.object)
            if info.endDrag.object != null
                if info.endDrag.pos < MAX_ACTIVESLOTS
                    info.hero.setActiveItem(info.startDrag.pos, info.endDrag.object)
                else
                    info.hero.setBackPackItem(info.startDrag.pos - MAX_ACTIVESLOTS, info.endDrag.object)

    private function drawButton(UIHeroInventoryInfo info, KItem kItem, UIHeroInventoryItemButton btn, int position)
        btn.setAlpha(255)
        btn.enable()
        // wenn wir auf startDrag sind zeige potentiell endrag an
        if info.startDrag.pos == position
            // zeige das an was auf dragEnd ist an
            if info.endDrag.object != null
                btn.setIcon(info.endDrag.object.getIcon())
                // sind die nicht identisch wird es ein swap ansonten haben wir gerade einfach nur den normalen status angezeigt
                if info.endDrag.object != info.startDrag.object
                    btn.setAlpha(80)
            else if info.endDrag.pos > 0
                btn.setIcon(Textures.dISorc_inventory_slotfiller)
                btn.enable()
        else if info.endDrag.pos == position
            // zeige das was auf dragStart ist an au√üer das sind wir selber
            if info.startDrag.object != info.endDrag.object
                btn.setIcon(info.startDrag.object.getIcon())
                btn.setAlpha(80)
        else if kItem != null
            // there is not drag but maybe there is astack to show
            btn.setIcon(kItem.getIcon())
        else
            // there is nothing sooo ?
            btn.setIcon(Textures.dISorc_inventory_slotfiller)
            btn.enable()