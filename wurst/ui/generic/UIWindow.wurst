package UIWindow
import UIHandle

import ClosureFrames
import initlater MouseContext
import PlayerData
import LinkedList

public framehandle CONSOLE_UI

public class UIMouseBlockElement extends UIHandle
    static function create(UIMenu parent) returns UIMouseBlockElement
        return new UIMouseBlockElement(parent.self)

    private LinkedList<framehandle> simpleFrames

    private construct(framehandle parent)
        super(createUIFrame("MENU", parent, true))
        self.onMouseEnter() () ->
            MouseContext.enableMouseMovement(GetTriggerPlayerData(), false)
        self.onMouseLeave() -> 
            MouseContext.enableMouseMovement(GetTriggerPlayerData(), true)

    function setPointToGameUI(framepointtype point, framepointtype relativePoint)
        setPoint(point, GAME_UI, relativePoint)

    function setPointToGameUI(framepointtype point, framepointtype relativePoint, real x, real y)
        setPoint(point, GAME_UI, relativePoint, x, y)

    function setPointToConsoleUI(framepointtype point, framepointtype relativePoint)
        setPoint(point, CONSOLE_UI, relativePoint)

    function setPointToConsoleUI(framepointtype point, framepointtype relativePoint, real x, real y)
        setPoint(point, CONSOLE_UI, relativePoint, x, y)

    override function setVisible(boolean flag)
        super.setVisible(flag)
        if simpleFrames != null
            for simpleFrame in simpleFrames
                simpleFrame.setVisible(flag)

    function addSimpleFrame(framehandle simple)
        if simpleFrames == null
            simpleFrames = new LinkedList<framehandle>()
        simpleFrames.add(simple)
        simple.setVisible(false)

public class UIMenu extends UIMouseBlockElement
    static function create() returns UIMenu
        return new UIMenu()

    private construct()
        super(GAME_UI)
        self.setVisible(false)

public class UIWindow extends UIMenu
    static function create() returns UIWindow
        return new UIWindow()

    static function closeCurrent(Player p)
        let lastWindow = p.currentOpenWindows.peek()
        if lastWindow != null
            lastWindow.close(p)

    static function closeAll(Player p)
        let backItr = p.currentOpenWindows.staticBackItr()
        while backItr.hasNext()
            let window = backItr.next()
            window.close(p)
        destroy backItr

    private PlayerListener onCloseListener
    private PlayerListener onOpenListener

    private function isOpen(Player p) returns boolean
        return p.currentOpenWindows.has(this)

    function open(Player p)
        if not isOpen(p)
            p.currentOpenWindows.add(this)
            if onOpenListener != null
                onOpenListener.onEvent(p)
        if p.isLocal()
            super.setVisible(true)

    function close(Player p)
        if isOpen(p)
            p.currentOpenWindows.remove(this)
            if onCloseListener != null
                onCloseListener.onEvent(p)
        if p.isLocal()
            super.setVisible(false)

    protected function closeWithoutTrigger(Player p)
        if isOpen(p)
            p.currentOpenWindows.remove(this)
        if p.isLocal()
            super.setVisible(false)

    function toggle(Player p)
        if isOpen(p)
            close(p)
        else
            open(p)

    
    override function setVisible(boolean flag)
        super.setVisible(flag)
        Log.trace("PLEASE dont use set Visible on a Window, use close / open instead")

    function onClose(PlayerListener listener)
        onCloseListener = listener
    
    function onOpen(PlayerListener listener)
        onOpenListener = listener

public class UIWindowBasic extends UIWindow
    static function create(boolean small) returns UIWindowBasic
        return new UIWindowBasic(small)

    protected framehandle innerFrame

    private construct(boolean small)
        super()
        var frameName = "WindowBasic"
        var padding = 0.03
        if small
            frameName += "Small"
            padding = 0.015
        createUIFrameByName(frameName, self, false)
        ..setAllPoints(self)

        innerFrame = createUIFrame("FRAME", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, padding, -padding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -padding, padding)


        /*
        window = UIWindow.create()
        ..setPointToConsoleUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT)
        ..setSize(0.5, 0.3)
        createUIFrameByName("WindowBasic", window, false)
        ..setAllPoints(window)
        */

public function framehandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint)
    this.setPoint(point, relative.innerFrame, relativePoint)

public function framehandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint, real x, real y)
    this.setPoint(point, relative.innerFrame, relativePoint, x, y)

public function UIHandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint)
    this.setPoint(point, relative.innerFrame, relativePoint)

public function UIHandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint, real x, real y)
    this.setPoint(point, relative.innerFrame, relativePoint, x, y)