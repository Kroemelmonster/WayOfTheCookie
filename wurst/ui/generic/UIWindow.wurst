package UIWindow
import UIHandle

import ClosureFrames
import initlater MouseContext
import PlayerData
import LinkedList
import initlater UIButtonMenu

public framehandle CONSOLE_UI

public class UIMenuPlayerInfo
    LinkedList<UIMenu> currentVisibleMenues = new LinkedList<UIMenu>()
    LinkedList<UIWindow> currentOpenWindows = new LinkedList<UIWindow>()

public abstract class UIMouseBlockElement extends UIHandle
    private LinkedList<framehandle> simpleFrames
    protected PlayerListener onShowListener
    protected PlayerListener onHideListener

    private construct(framehandle parent)
        super(createUIFrame("MENU", parent, true))
        self.onMouseEnter() () ->
            MouseContext.enableMouseMovement(GetTriggerPlayerData(), false)
        self.onMouseLeave() -> 
            MouseContext.enableMouseMovement(GetTriggerPlayerData(), true)
       
        self.onMouseUp() -> 
            preventFocusBug(GetTriggerPlayerData())

    function setPointToGameUI(framepointtype point, framepointtype relativePoint)
        setPoint(point, GAME_UI, relativePoint)

    function setPointToGameUI(framepointtype point, framepointtype relativePoint, real x, real y)
        setPoint(point, GAME_UI, relativePoint, x, y)

    function setPointToConsoleUI(framepointtype point, framepointtype relativePoint)
        setPoint(point, CONSOLE_UI, relativePoint)

    function setPointToConsoleUI(framepointtype point, framepointtype relativePoint, real x, real y)
        setPoint(point, CONSOLE_UI, relativePoint, x, y)

    override function setVisible(boolean flag)
        super.setVisible(flag)
        if simpleFrames != null
            for simpleFrame in simpleFrames
                simpleFrame.setVisible(flag)

    abstract function isVisible(Player p) returns boolean

    function addSimpleFrame(framehandle simple)
        if simpleFrames == null
            simpleFrames = new LinkedList<framehandle>()
        simpleFrames.add(simple)
        simple.setVisible(false)

public class UIMenu extends UIMouseBlockElement
    static function create() returns UIMenu
        return new UIMenu(GAME_UI, false)

    static function create(UIMenu parent) returns UIMenu
        let menu = new UIMenu(parent.self, true)
        parent.children.add(menu)
        menu.parent = parent
        return menu

    protected LinkedList<UIMenu> children = new LinkedList<UIMenu>
    protected UIMenu parent

    private construct(framehandle parent, boolean initalVisible)
        super(parent)
        super.setVisible(initalVisible)

    override function isVisible(Player p) returns boolean
        if parent != null
            return parent.isVisible(p)
        else
            return p.uiMenuPlayerInfo.currentVisibleMenues.has(this)

    function show(Player p)
        if parent != null
            Log.warn("You cant show a children menu")
            return
        if isVisible(p)
            return
        p.uiMenuPlayerInfo.currentVisibleMenues.add(this)
        triggerOnShow(p)
        for child in children
            child.triggerOnShow(p)
        if p.isLocal()
            super.setVisible(true)

    function hide(Player p)
        if parent != null
            Log.warn("You cant hide a children menu")
            return
        if not isVisible(p)
            return
        p.uiMenuPlayerInfo.currentVisibleMenues.remove(this)
        for child in children
            child.triggerOnHide(p)
        triggerOnHide(p)
        if p.isLocal()
            super.setVisible(false)

    private function triggerOnShow(Player p)
        if onShowListener != null
            onShowListener.onEvent(p)
      
    private function triggerOnHide(Player p)
        if onHideListener != null
            onHideListener.onEvent(p)

    override function setVisible(boolean flag)
        super.setVisible(flag)
        Log.warn("PLEASE dont use set Visible on a Menu, use show / hide instead")

    function onShow(PlayerListener listener)
        onShowListener = listener
    
    function onHide(PlayerListener listener)
        if onHideListener != null
            Log.warn("You allready added an onHideListener to this Menu")
        onHideListener = listener

public class UIWindow extends UIMouseBlockElement
    protected string name
    protected UIButtonMenuToWindow btnToOpen

    static function create(string name) returns UIWindow
        return new UIWindow(name)

    static function closeCurrent(Player p)
        let lastWindow = p.uiMenuPlayerInfo.currentOpenWindows.peek()
        if lastWindow != null
            lastWindow.close(p)

    static function closeAll(Player p)
        let backItr = p.uiMenuPlayerInfo.currentOpenWindows.staticBackItr()
        while backItr.hasNext()
            backItr.next().close(p)
        
        
    private construct(string name)
        super(GAME_UI)
        super.setVisible(false)
        this.name = name
        setLevel(100)

    function getName() returns string
        return name

    function setBtnToOpen(UIButtonMenuToWindow btn)
        this.btnToOpen = btn

    override function isVisible(Player p) returns boolean
        return p.uiMenuPlayerInfo.currentOpenWindows.has(this)

    function enable(Player p)
        if p.isLocal() and btnToOpen != null
            btnToOpen.enable()

    function disable(Player p)
        if p.isLocal() and btnToOpen != null
            btnToOpen.disable()

    function open(Player p)
        if isVisible(p)
            return
        p.uiMenuPlayerInfo.currentOpenWindows.add(this)
        if onShowListener != null
            onShowListener.onEvent(p)
        if p.isLocal()
            super.setVisible(true)

    function close(Player p)
        if not isVisible(p)
            return
        p.uiMenuPlayerInfo.currentOpenWindows.remove(this)
        if onHideListener != null
            onHideListener.onEvent(p)
        if p.isLocal()
            super.setVisible(false)

    protected function closeWithoutTrigger(Player p)
        if isVisible(p)
            p.uiMenuPlayerInfo.currentOpenWindows.remove(this)
        if p.isLocal()
            super.setVisible(false)

    function toggle(Player p)
        if isVisible(p)
            close(p)
        else
            open(p)

    override function setVisible(boolean flag)
        super.setVisible(flag)
        Log.warn("PLEASE dont use set Visible on a Window, use close / open instead")

    function onClose(PlayerListener listener)
        onHideListener = listener
    
    function onOpen(PlayerListener listener)
        onShowListener = listener

public class UIWindowBasic extends UIWindow
    static function create(string name, boolean small) returns UIWindowBasic
        return new UIWindowBasic(name, small)

    protected framehandle innerFrame

    private construct(string name, boolean small)
        super(name)
        var frameName = "WindowBasic"
        var padding = 0.03
        if small
            frameName += "Small"
            padding = 0.015
        createUIFrameByName(frameName, self, false)
        ..setAllPoints(self)

        innerFrame = createUIFrame("FRAME", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, padding, -padding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -padding, padding)

public function framehandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint)
    this.setPoint(point, relative.innerFrame, relativePoint)

public function framehandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint, real x, real y)
    this.setPoint(point, relative.innerFrame, relativePoint, x, y)

public function UIHandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint)
    this.setPoint(point, relative.innerFrame, relativePoint)

public function UIHandle.setInnerPoint(framepointtype point, UIWindowBasic relative, framepointtype relativePoint, real x, real y)
    this.setPoint(point, relative.innerFrame, relativePoint, x, y)