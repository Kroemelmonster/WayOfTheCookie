package UIWindowHero
import UIWindow
import UIHandle
import Tooltip
import PlayerData
import Scheduler
import UITooltip
import Description
import InitiativeList
import UIInteractableStatInfo
import UIInteractable
import HeroStats
import UIWindowSkillTree
import UIButtonIcon
import KItem
import Hero
import Inventory
import KItemType

init
    Initializer.register(InitializerNames.UI) -> 
        Player.forEachActive() (Player p) ->
            UIWindowHeroInfo.create(p)

        

tuple itemDrag(int pos, KItem kitem)

class UIWindowHeroInfo
    static UIWindowHeroInfo array data
    static function get(Player p) returns UIWindowHeroInfo
        return data[p castTo int]

    static function create(Player p)
        data[p castTo int] = new UIWindowHeroInfo(p)


    protected Player p
    protected int mousePressedIndexAtDragStart = -1
    protected UIWindowHeroItem dragStart = null
    protected UIWindowHeroItem dragEnd = null

    private construct(Player p)
        this.p = p

    protected function isDragging() returns boolean
        return dragStart != null

    protected function showDragEndPreview(UIWindowHeroItem handleItem)
        if dragStart != handleItem and handleItem.get(p).doesFit(dragStart.getItem(p))
            dragEnd = handleItem
            UIWindowHero.update(p)

    protected static function setupDragStart(Player p, UIWindowHeroItem handleItem)
        if handleItem.getItem(p) == null
            return
        let info = get(p)
        info.dragStart = handleItem
        info.mousePressedIndexAtDragStart = p.mousePressedIndex
        UIWindowHero.update(p)


    protected static function checkAndCancelDrag(Player p)
        let info = get(p)
        if info.dragStart == null
            return
        if info.mousePressedIndexAtDragStart != p.mousePressedIndex
            cancelDrag(p)
    
    protected static function cancelDrag(Player p)
        let info = get(p)
        info.dragStart = null
        info.dragEnd = null
        info.mousePressedIndexAtDragStart = -1

    protected static function tryFinishDrag(Player p)
        let info = get(p)
        if info.dragStart != null
            let startItem = info.dragStart.unequip(p)
            let endItem = info.dragEnd.unequip(p)

            info.dragStart.equip(p, endItem)
            info.dragEnd.equip(p, startItem)

            cancelDrag(p)

        UIWindowHero.update(p)

class UIWindowHeroItem extends UIButtonIcon
    protected int index
    protected boolean isBackpack

    protected framehandle handleBackground2
    protected framehandle handleBackground3

    construct(UIHandle parent, int index, boolean active)
        super(parent.self, true, false, false)
        handleBackground2 = createUIFrame("BACKDROP", handleBackground)
        ..setAllPoints(handleBackground)
        handleBackground3 = createUIFrame("BACKDROP", handleBackground)
        ..setAllPoints(handleBackground)
        ..setTexture("Icons/ISplit.dds")
        ..setVisible(false)

        setSize(0.035, 0.035)
        onMouseDown() -> 
            let p = GetTriggerPlayerData()
            UITooltip.hide(p)
            if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_LEFT
                UIWindowHeroInfo.setupDragStart(p, this)
            if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_RIGHT
                UIWindowHero.openPopup(p, this)
        onMouseUp() -> 
            UIWindowHeroInfo.tryFinishDrag(GetTriggerPlayerData())
        onMouseEnter() -> 
            let info = UIWindowHeroInfo.get(GetTriggerPlayerData())
            if info.isDragging()
                info.showDragEndPreview(this)
            else
                showTooltip(info.p)
        onMouseLeave() ->
            UITooltip.hide(GetTriggerPlayerData())

        this.index = index
        this.isBackpack = active

    protected function get(Player p) returns KItemPlaceholder
        return p.hero.inventory.get(index, isBackpack)

    protected function getItem(Player p) returns KItem
        return p.hero.inventory.getItem(index, isBackpack)

    protected function unequip(Player p) returns KItem
        return p.hero.inventory.unquip(index, isBackpack)

    protected function equip(Player p, KItem newItem)
        p.hero.inventory.equip(index, isBackpack, newItem)

    protected function showTooltip(Player p)
        let kitem = getItem(p)
        if kitem != null
            UITooltip.display(p, kitem.createTooltip(), TooltipAnchor.RIGHT_BOTTOM, this)

    protected function updateIcon(KItem kitem, boolean wasDragged)
        if kitem == null
            return

        handleBackground2.hide()
        handleBackground3.hide()
        enable()
        setBackground(kitem.getIcon())
        if wasDragged
            setAlpha(80)
        else
            setAlpha(255)

    protected function updateIcon(KItemPlaceholder placeholder)
        let kitem = placeholder.get()
        if kitem != null
            updateIcon(kitem, false)
        else
            handleBackground2.show()
            setAlpha(255)
            disable()
            setBackground("Icons/IT" + placeholder.upper.toString() + ".dds")
            handleBackground2.setTexture("Icons/IB" + placeholder.lower.toString() + ".dds")
            handleBackground3.setVisible(placeholder.isDifference())
            
    protected function update(Player p)
        let info = UIWindowHeroInfo.get(p)
        // we currently drag somehting to here
        if info.dragEnd == this
            updateIcon(info.dragStart.getItem(p), true)
            return
        // we currently drag something from here
        if info.dragStart == this and info.dragEnd != null
            updateIcon(info.dragEnd.getItem(p), true)
            return
        updateIcon(get(p))


public class UIWindowHero
    protected static UIWindowBasic window

    protected static UIInteractableStatInfo attackInfo
    protected static UIInteractableStatInfo defenceInfo
    protected static UIInteractableStatInfo powerInfo
    protected static UIInteractableStatInfo wisdomInfo
    protected static UIInteractableStatInfo damageInfo
    protected static UIInteractableStatInfo inititaiveInfo

    protected static UIWindowHeroItem array[MAX_ACTIVE_ITEMS + MAX_BACKPACK_ITEMS] items

    static function create() returns UIWindowBasic
        window = UIWindowBasic.create("Stats", true)
        ..setPointToConsoleUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT, UIWindowSkillTree.WIDTH + 0.01, 0)
        ..setSize(0.25, 0.35)

        window.onOpen() (Player p) ->
            update(p)

        items[0] = new UIWindowHeroItem(window, 0, false)
        ..setInnerPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT)
        for i = 1 to MAX_ACTIVE_ITEMS - 1
            items[i] = new UIWindowHeroItem(window, i, false)
            ..setPoint(FRAMEPOINT_TOPLEFT, items[i - 1], FRAMEPOINT_TOPRIGHT, 0.0015, 0)

        
        items[MAX_ACTIVE_ITEMS] = new UIWindowHeroItem(window, 0, true)
        ..setPoint(FRAMEPOINT_TOPLEFT, items[0], FRAMEPOINT_BOTTOMLEFT, 0, -0.01)
        for i = MAX_ACTIVE_ITEMS + 1 to items.length - 1
            items[i] = new UIWindowHeroItem(window, i - MAX_ACTIVE_ITEMS, true)
            if i % 6 == 0
                items[i].setPoint(FRAMEPOINT_TOPLEFT, items[i - 6], FRAMEPOINT_BOTTOMLEFT, 0, -0.0015)
            else
                items[i].setPoint(FRAMEPOINT_TOPLEFT, items[i - 1], FRAMEPOINT_TOPRIGHT, 0.0015, 0)

        let infoPadding = 0.005
        inititaiveInfo = UIInteractableStatInfo.create(window)
        ..setInnerPoint(FRAMEPOINT_BOTTOMLEFT, window, FRAMEPOINT_BOTTOMLEFT)
        ..setInnerPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOM)
        ..setIcon("ICONS/STATInitiative.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Initiative")
            Description.extendTooltip(tt, "Initiative")
            tt.addLine("-----")
            let p = GetTriggerPlayerData()
            InitiativeList.extendTooltip(tt, p.hero.stats.initiative.value())
            UITooltip.display(p, tt, TooltipAnchor.BOTTOM_RIGHT, inititaiveInfo)

        damageInfo = UIInteractableStatInfo.create(window)
        ..setInnerPoint(FRAMEPOINT_BOTTOMLEFT, window, FRAMEPOINT_BOTTOM)
        ..setInnerPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOMRIGHT)
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Damage")
            Description.extendTooltip(tt, "Damage")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.BOTTOM_RIGHT, damageInfo)

        powerInfo = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, inititaiveInfo, FRAMEPOINT_TOPLEFT, 0, infoPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, inititaiveInfo, FRAMEPOINT_TOPRIGHT, 0, infoPadding)
        ..setIcon("ICONS/STATPower.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Power")
            Description.extendTooltip(tt, "Power")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.BOTTOM_RIGHT, powerInfo)

        wisdomInfo = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, damageInfo, FRAMEPOINT_TOPLEFT, 0, infoPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, damageInfo, FRAMEPOINT_TOPRIGHT, 0, infoPadding)
        ..setIcon("ICONS/STATWisdom.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Wisdom")
            Description.extendTooltip(tt, "Wisdom")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.BOTTOM_RIGHT, wisdomInfo)
        
        attackInfo = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, powerInfo, FRAMEPOINT_TOPLEFT, 0, infoPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, powerInfo, FRAMEPOINT_TOPRIGHT, 0, infoPadding)
        ..setIcon("ICONS/STATAttack.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Attack")
            Description.extendTooltip(tt, "AttackHero")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.BOTTOM_RIGHT, attackInfo)

        defenceInfo = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, wisdomInfo, FRAMEPOINT_TOPLEFT, 0, infoPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, wisdomInfo, FRAMEPOINT_TOPRIGHT, 0, infoPadding)
        ..setIcon("ICONS/STATDefence.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Defence")
            Description.extendTooltip(tt, "Defence")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.BOTTOM_RIGHT, defenceInfo)

        Configurations.debugReal1.addListener() (Real value) ->
            Log.trace("real1 changed to "+value.self.toString())

        window.onClose() p ->
            UIWindowHeroInfo.cancelDrag(p)

        Scheduler.onTime() p ->
            if window.isVisible(p)
                update(p)

        return window

    static function get() returns UIWindowBasic
        return window

    protected static function update(Player p)
        if not p.isLocal()
            return
        let stats = p.hero.stats

        attackInfo.setTextBasedOnStats(stats.attack)
        defenceInfo.setTextBasedOnStats(stats.defence)
        wisdomInfo.setTextBasedOnStats(stats.wisdom)
        powerInfo.setTextBasedOnStats(stats.power)

        damageInfo.setTextBasedOnStats(stats.baseAttackDamage.value(), stats.getAttackDamage())
        damageInfo.setIcon(stats.getDamageType())
        inititaiveInfo.setTextBasedOnStats(stats.initiative)

        UIWindowHeroInfo.checkAndCancelDrag(p)

        for i = 0 to items.length - 1
            items[i].update(p)

    protected static function openPopup(Player p, UIWindowHeroItem handleItem)
        