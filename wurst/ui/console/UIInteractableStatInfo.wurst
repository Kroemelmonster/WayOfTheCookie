package UIInteractableStatInfo
import UIHandle
import UIInteractable
import UITooltipNew
import PlayerData
import DamageType
import StatsModifier
import TooltipGenerator

public class UIInteractableStatInfo extends UIInteractable
    static function create(UIHandle parent) returns UIInteractableStatInfo
        return new UIInteractableStatInfo(parent)

    protected framehandle handleIcon
    protected framehandle handleText

    private construct(UIHandle parent)
        super(createUIFrame("MENU", parent, true))
        let height = 0.025
        setHeight(height)

        handleIcon = createUIFrame("BACKDROP", self)
        ..setPoint(FRAMEPOINT_LEFT, self, FRAMEPOINT_LEFT)
        ..setSize(height, height)
        handleText = createUIFrame("TEXT", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleIcon, FRAMEPOINT_TOPRIGHT, 0.005, 0)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT)
        ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_LEFT)

        onMouseLeave() () ->
            UITooltipNew.hide(GetTriggerPlayerData())

    function setIcon(string str)
        handleIcon.setTexture(str)

    function setIcon(DamageType damageType)
        switch damageType
            case MAGIC
                handleIcon.setTexture("UI/Textures/StackInfo/dmg-magic.dds")
            case FIRE
                handleIcon.setTexture("UI/Textures/StackInfo/dmg-fire.dds")
            case POISON
                handleIcon.setTexture("UI/Textures/StackInfo/dmg-poison.dds")
            default
                handleIcon.setTexture("UI/Textures/StackInfo/dmg-physical.dds")

    function setText(string txt)
        handleText.setText(txt)

    function setTextBasedOnStats(int basic, int modified, StatsModifier _modi)
        handleText.setText(basic.toString() + TooltipGenerator.coloredModiInt(modified - basic))