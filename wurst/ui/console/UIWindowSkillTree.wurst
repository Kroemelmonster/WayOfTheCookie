package UIWindowSkillTree
import UIButton
import PlayerData
import ClosureFrames
import UIHandle
import UIButtonIcon
import Action
import UIWindow
import initlater Scheduler
import Hero
import Tooltip
import UITooltip
import SkillTree

public class UIWindowSkillTreeInfo
    protected int currentTab = 0

    protected static function getCurrentTab(Player p) returns int
        return p.menuConsoleInfo.skillTreeInfo.currentTab

    protected static function setCurrentTab(Player p, int index)
        p.menuConsoleInfo.skillTreeInfo.currentTab = index

    protected static function getCurrentSkillTree(Player p) returns SkillTree
        return p.hero.getSkillTree(getCurrentTab(p))

public class UIWindowSkillTree
    static constant WIDTH = 0.29
    protected static UIWindowBasic window
    protected static UIButton array[3] tabs
    protected static framehandle array[3] handleTabNames
    protected static framehandle handleBackground

    protected static real innerWidth
    protected static real innerHeight
    protected static framehandle handlInnerFrame
    protected static UIButtonIcon array[15] skills


    static function create() returns UIWindowBasic
        let tabHeight = 0.03
        let tabPaddingTop = 0.01
        let width = 0.29
        window = UIWindowBasic.create("SkillTree", true)
        ..setPointToConsoleUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT, 0, -(tabHeight - tabPaddingTop))
        ..setSize(WIDTH, 0.35 -(tabHeight - tabPaddingTop))

        window.onOpen() (Player p) ->
            update(p)

        let backdropPadding = 0.01
        handleBackground = createUIFrame("BACKDROP", window)
        ..setPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT, backdropPadding, -backdropPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOMRIGHT, -backdropPadding, backdropPadding)
        ..setAlpha(180)

        let innerPadding = 0.03
        innerWidth = width - (innerPadding * 2)
        innerHeight = WIDTH - (innerPadding * 2)
        handlInnerFrame = createUIFrame("FRAME", window)
        ..setPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT, innerPadding, -innerPadding)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOMRIGHT, -innerPadding, innerPadding)
 

        let tabPaddingH = 0.005
        let tabWidth = (width - (tabPaddingH * 6)) / 3

        createTab(0, tabWidth, tabHeight)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, window, FRAMEPOINT_TOPLEFT, tabPaddingH * 2, -tabPaddingTop)

        createTab(1, tabWidth, tabHeight)
        ..setPoint(FRAMEPOINT_LEFT, tabs[0], FRAMEPOINT_RIGHT, tabPaddingH, 0)

        createTab(2, tabWidth, tabHeight)
        ..setPoint(FRAMEPOINT_LEFT, tabs[1], FRAMEPOINT_RIGHT, tabPaddingH, 0)

        for i = 0 to skills.length - 1
            skills[i] = UIButtonIcon.create(window, true, false, true)
            ..setSize(0.035, 0.035)
            skills[i].onClick() -> 
                UIWindowSkillTreeInfo.getCurrentSkillTree(GetTriggerPlayerData())
                .skills.get(i).dolevelUp()

            skills[i].onMouseEnter() -> 
                let p = GetTriggerPlayerData()
                let skill = UIWindowSkillTreeInfo.getCurrentSkillTree(p).skills.get(i)
                UITooltip.display(p, skill.createTooltip(), TooltipAnchor.RIGHT_BOTTOM, skills[i])

            skills[i].onMouseLeave() -> 
                UITooltip.hide(GetTriggerPlayerData())

        Scheduler.onTime() (Player p) ->
            if window.isVisible(p)
                update(p)

        return window

    static function get() returns UIWindowBasic
        return window

    static function initHero(Hero h)
        updateTabs(h)
        if not h.getPlayer().isLocal()
            return
        for i = 0 to handleTabNames.length - 1
            handleTabNames[i].setText(h.getSkillTree(i).getName())

    private static function createTab(int index, real width, real height) returns UIButton
        tabs[index] = UIButton.create(true, window)
        ..setSize(width, height)
        ..setBackground("UI/Console/WoodPlanket.dds")
        ..onClick() -> 
            changeToTab(GetTriggerPlayerData(), index)

        handleTabNames[index] = createUIFrame("TEXT", tabs[index])
        ..setAllPoints(tabs[index])
        ..setTextAlignment(TEXT_JUSTIFY_MIDDLE, TEXT_JUSTIFY_CENTER)

        return tabs[index]

    private static function changeToTab(Player p, int index)
        if UIWindowSkillTreeInfo.getCurrentTab(p) == index
            return
        UIWindowSkillTreeInfo.setCurrentTab(p, index)
        updateTabs(p.hero)
        update(p)

    private static function updateTabs(Hero h)
        if not h.getPlayer().isLocal()
            return
        let currentTab = UIWindowSkillTreeInfo.getCurrentTab(h.getPlayer())
        for i = 0 to handleTabNames.length - 1
            tabs[i].setLevel(currentTab == i ? 1 : -1)
        
        handleBackground.setTexture("UI/Console/SkillTree" + h.getSkillTree(currentTab).getName()+ ".dds")
        
    private static function update(Player p)
        if not p.isLocal()
            return
        let currentTab = UIWindowSkillTreeInfo.getCurrentTab(p)
        let skillTree = p.hero.getSkillTree(currentTab)
        let size = skillTree.skills.size()
        for i = 0 to skills.length - 1
            if i < size
                let skill = skillTree.skills.get(i)
                skills[i].setPoint(FRAMEPOINT_CENTER, handlInnerFrame, FRAMEPOINT_TOPLEFT, innerWidth * skill.x, innerHeight * -skill.y)
                skills[i].setVisible(true)
                skills[i].setCounter(skill.level)
                skills[i].setBackground(skill.icon)
                skills[i].setGlowVisible(skill.canLevelUp())
            else
                skills[i].setVisible(false)