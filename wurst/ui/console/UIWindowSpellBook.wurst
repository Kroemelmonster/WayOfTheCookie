package UIWindowSpellBook

import PlayerData
import SpellAction
import UIHandle
import ClosureFrames
import UIWindow
import UIMenuActionConsole
import Scheduler
import UIInteractable
import PlayerBoardHelper
import UIButton
import UIWindowDropdown

class UIElementSpell extends UIButton
    static function create(framehandle parent) returns UIElementSpell
        return new UIElementSpell(parent)

    protected framehandle handleIcon
    protected framehandle handleSelect
    protected framehandle handleName
    protected framehandle handleLevel

    protected SpellAction spellAction
    protected Spell spell
    
    private construct(framehandle parent)
        super(UIButton.createBasicButtonFrame(false, parent))
        setHeight(0.0585)
        setVisible(false)
        enableClick(MOUSE_BUTTON_TYPE_RIGHT, true)

        let paddingH = 0.01
        handleIcon = createUIFrame("BACKDROP", self)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, paddingH, -0.008)
        ..setSize(0.036, 0.0335)

        handleName = createUIFrameByName("SpellBookText", self, false)
        ..setTextColor(colorA(0, 0, 0, 255))
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, self, FRAMEPOINT_BOTTOMLEFT, paddingH, 0.007)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -paddingH, 0.007)
        ..setTextAlignment(TEXT_JUSTIFY_BOTTOM, TEXT_JUSTIFY_LEFT)

        handleLevel = createUIFrameByName("SpellBookBigText", self, false)
        ..setTextColor(colorA(0, 0, 0, 255))
        ..setPoint(FRAMEPOINT_TOPLEFT, handleIcon, FRAMEPOINT_TOPRIGHT)
        ..setPoint(FRAMEPOINT_BOTTOMLEFT, handleIcon, FRAMEPOINT_BOTTOMRIGHT)
        ..setPoint(FRAMEPOINT_RIGHT, self, FRAMEPOINT_RIGHT, -paddingH, 0)
        ..setTextAlignment(TEXT_JUSTIFY_CENTER, TEXT_JUSTIFY_MIDDLE)
                
        handleSelect = handleBackground
        ..setAlpha(150)
        ..setTexture("UI/Console/SelectedSpell.dds")

        self.onMouseWheel() -> 
            if spellAction != null
                actionScaleLevel(BlzGetTriggerFrameValue() > 0)


        onClick() (p, mouseBtn) -> 
            if mouseBtn == MOUSE_BUTTON_TYPE_LEFT
                leftClick(p)
            else if mouseBtn == MOUSE_BUTTON_TYPE_RIGHT
                rightClick(p)
        onMouseEnter() (p) -> 
            mouseEnterInner(p)
        onMouseLeave() (p) -> 
            UITooltip.hide(p)

    protected function highlightSelect(boolean flag)
        if flag
            handleSelect.setAlpha(200)
        else
            handleSelect.setAlpha(130)

    protected function updateLevel(int level)
        handleLevel.setText((level + 1).toRomanLetters())

    function setSpellAction(SpellAction spellaction)
        this.spellAction = spellaction
        this.spell = null
        setVisible(true)
        handleName.setText(spellaction.getName())
        handleIcon.setTexture(spellaction.getIcon())
        highlightSelect(spellAction.getBoardHero().isQuickCast(spellaction))
        updateLevel(spellaction.getLevelIndex())

    function setSpell(Spell spell)
        this.spellAction = null
        this.spell = spell
        setVisible(true)
        handleName.setText(spell.getName())
        handleIcon.setTexture(spell.getIcon())
        
        highlightSelect(false)
        updateLevel(spell.getLevel())

    protected function createTooltip() returns Tooltip
        if spellAction != null
            return spellAction.createTooltip()
        else if spell != null
            return spell.createTooltip(false)
        return null

    function mouseEnterLevelUpInner(Player p)
        if spell.getLevel() < spell.getMaxLevel()
            let tt = spell.createTooltip(spell.getLevel() + 1, true)
            UITooltip.display(p, tt, TooltipAnchor.RIGHT_BOTTOM, self)

    function mouseEnterInner(Player p)
        let tt = createTooltip()
        if tt != null
            UITooltip.display(p, tt, TooltipAnchor.RIGHT_BOTTOM, self)

    private function leftClick(Player p)
        if spellAction != null
            actionAddToQuickcast(p)

    private function rightClick(Player p)
        if spell != null
            let dropDown = UIWindowDropdown.start(p, self, DropDownAnchor.DOWN)
            dropDown.addOption("Level Up", spell.canLevelUp()) (p) ->
                actionPayToNextLevel()
            dropDown.onMouseEnter() (p) ->
                mouseEnterLevelUpInner(p)
            dropDown.onMouseLeave() (Player p) ->
                UITooltip.hide(p)
            dropDown.open()
        else if spellAction != null
            let dropDown = UIWindowDropdown.start(p, self, DropDownAnchor.DOWN)
            dropDown.addOption("Add to Quickcast", true) (p) ->
                actionAddToQuickcast(p)
            dropDown.addOption("Scale Up", "Scroll+", spellAction.canScaleLevel(spellAction.getLevelIndex() + 1)) (p) ->
                actionScaleLevel(true)
            dropDown.addOption("Scale Down", "Scroll-", spellAction.canScaleLevel(spellAction.getLevelIndex() - 1)) (p) ->
                actionScaleLevel(false)
            dropDown.open()

    private function actionAddToQuickcast(Player p)
        spellAction.toggleQuickcast()
        // this just updates this spell
        setSpellAction(spellAction)
        UIMenuActionConsole.update(p)

    private function actionPayToNextLevel()
        if spell.levelUp()
            updateLevel(spell.getLevel())

    private function actionScaleLevel(boolean add)
        let newLevel = spellAction.getLevelIndex() + (add ? 1 : -1)
        if not spellAction.canScaleLevel(newLevel)
            return
        spellAction.scaleLevelTo(newLevel)
        updateLevel(spellAction.getLevelIndex())
        mouseEnterInner(GetTriggerPlayerData())

public class UIWindowSpellBook
    private static UIWindow window
    private static UIElementSpell array[10] spells

    static function create() returns UIWindow
        window = UIWindow.create("SpellBook")
        ..setPointToConsoleUI(FRAMEPOINT_TOPLEFT, FRAMEPOINT_TOPLEFT)
        ..setSize(0.5, 0.3)

        window.onOpen() (Player p) ->
            update(p)

        createUIFrame("BACKDROP", window)
        ..setAllPoints(window)
        ..setTexture("UI/Console/SpellBook.dds")

        let leftSideFrameHandle = createUIFrame("FRAME", window)
        ..setPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT, 0.043, -0.032)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, window, FRAMEPOINT_BOTTOM, -0.016, 0)

        createUIFrame("BACKDROP", window)
        ..setAllPoints(window)
        ..setTexture("UI/Console/SpellBookRipped.dds")

        spells[0] = UIElementSpell.create(leftSideFrameHandle)
        ..setPoint(FRAMEPOINT_TOPLEFT, leftSideFrameHandle, FRAMEPOINT_TOPLEFT, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, leftSideFrameHandle, FRAMEPOINT_TOP, 0, 0)

        spells[1] = UIElementSpell.create(leftSideFrameHandle)
        ..setPoint(FRAMEPOINT_TOPLEFT, leftSideFrameHandle, FRAMEPOINT_TOP, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, leftSideFrameHandle, FRAMEPOINT_TOPRIGHT, 0, 0)

        for index = 2 to spells.length - 1
            spells[index] = UIElementSpell.create(leftSideFrameHandle)
            spells[index].setPoint(FRAMEPOINT_TOPLEFT, spells[index - 2], FRAMEPOINT_BOTTOMLEFT, 0, 0)
            spells[index].setPoint(FRAMEPOINT_TOPRIGHT, spells[index - 2], FRAMEPOINT_BOTTOMRIGHT, 0, 0)

        Scheduler.onTime() p ->
            if window.isVisible(p)
                update(p)
        

        return window

    static function get() returns UIWindow
        return window

    protected static function update(Player p)
        if not p.isLocal()
            return
            
        if p.isPlayingOnABoard()
            updateForBoardLocal(p)
        else
            updateForWorldLocal(p)

    protected static function updateForBoardLocal(Player p)
        let boardHero = PlayerBoardHelper.getPlayerBoardHero(p)
        
        var index = 0
        let actionsIterator = boardHero.actionsIterator()
        while actionsIterator.hasNext()
            let action = actionsIterator.next()
            if action.hasOption(ActionTypeOption.SPELL)
                let spell = action castTo SpellAction
                spells[index].setSpellAction(spell)
                index++

        for i = index to spells.length - 1
            spells[i].setVisible(false)


    protected static function updateForWorldLocal(Player p)
        let hero = p.hero
        
        var index = 0
        let spellIterator = hero.spellBook.iterator()
        while spellIterator.hasNext()
            let spell = spellIterator.next()
            spells[index].setSpell(spell)
            index++

        for i = index to spells.length - 1
            spells[i].setVisible(false)
