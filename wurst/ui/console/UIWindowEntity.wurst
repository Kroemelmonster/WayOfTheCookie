package UIWindowEntity
import UIWindow
import UIHandle
import Tooltip
import StackType
import StatsModifier
import PlayerData
import Stack
import Scheduler
import UITooltip
import Description
import StackStats
import InitiativeList
import UIInteractableStatInfo
import UIInteractable
import BoardEntity
import TalentType
import Status

public class UIWindowEntityInfo
    private BoardEntity entity
    private HasEntityStats entityStats

    protected static function get(Player p) returns UIWindowEntityInfo
        return p.menuConsoleInfo.entityInfo

    protected static function setEntity(Player p, ArmyStack stack)
        let info = get(p)
        info.entityStats = stack.stats
        info.entity = null

    protected static function setBoardEntity(Player p, BoardEntity entity) returns boolean
        let info = get(p)
        info.entity = entity
        if entity.getType() == EntityType.STACK
            info.entityStats = entity.toStack().stats
            return true
        return false

    protected static function getStats(Player p) returns HasEntityStats
        return get(p).entityStats

    protected static function forEachStatus(Player p, LLItrClosure<StatusStats> itr)
        let entity = get(p).entity
        if entity != null
            entity.forEachStatusStats(itr)
        else
            destroy itr
            

class UITalent extends UIInteractable
    protected static function create(UIHandle parent) returns UITalent
        return new UITalent(parent)

    protected framehandle hanldeIcon
    protected TalentStats talent

    private construct(UIHandle parent)  
        super(createUIFrame("MENU", parent, true))
        setSize(0.023, 0.023)
        hanldeIcon = createUIFrame("BACKDROP", self)
        ..setAllPoints(self)

        onMouseEnter() () ->
            UITooltip.display(GetTriggerPlayerData(), 
                talent.createTooltip(), TooltipAnchor.LEFT_BOTTOM , self)
        onMouseLeave() ->
            UITooltip.hide(GetTriggerPlayerData())

    protected function setStat(TalentStats talent)
        setVisible(true)
        hanldeIcon.setTexture(talent.getIcon())
        this.talent = talent

    protected function hide()
        setVisible(false)

class UIStatus extends UIInteractable
    protected static function create(UIHandle parent) returns UIStatus
        return new UIStatus(parent)

    protected framehandle hanldeIcon
    protected StatusStats status

    private construct(UIHandle parent)  
        super(createUIFrame("MENU", parent, true))
        setSize(0.023, 0.023)
        hanldeIcon = createUIFrame("BACKDROP", self)
        ..setAllPoints(self)

        onMouseEnter() () ->
            UITooltip.display(GetTriggerPlayerData(), 
                status.createTooltip(), TooltipAnchor.LEFT_BOTTOM , self)
        onMouseLeave() ->
            UITooltip.hide(GetTriggerPlayerData())

    protected function setStat(StatusStats status)
        setVisible(true)
        hanldeIcon.setTexture(status.getIcon())
        this.status = status

    protected function hide()
        setVisible(false)

public class UIWindowEntity
    protected static UIWindowBasic window
    protected static framehandle handleIcon

    protected static UIInteractableStatInfo infoAttack
    protected static UIInteractableStatInfo infoDefence
    protected static UIInteractableStatInfo infoDamage
    protected static UIInteractableStatInfo infoRange
    protected static UIInteractableStatInfo infoInititaive
    protected static UIInteractableStatInfo infoAP
    protected static UIInteractableStatInfo infoHP
    protected static UIInteractableStatInfo infoLeadership

    protected static UITalent array[10] handleTalents
    protected static UIStatus array[10] handleStatus

    static function create()
        window = UIWindowBasic.create("EntityStats", true)
        ..setPointToConsoleUI(FRAMEPOINT_TOPRIGHT, FRAMEPOINT_TOPRIGHT)
        ..setSize(0.25, 0.25)

        window.onOpen() (Player p) ->
            update(p)
    
        let iconSize = 0.04
        handleIcon = createUIFrame("BACKDROP", window)
        ..setInnerPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT)
        ..setSize(iconSize, iconSize)

        let infoPadding = 0.005
        infoAttack = UIInteractableStatInfo.create(window)
        ..setInnerPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOPLEFT, 0, -(iconSize + infoPadding))
        ..setInnerPoint(FRAMEPOINT_TOPRIGHT, window, FRAMEPOINT_TOP, 0,  -(iconSize + infoPadding))
        ..setIcon("ICONS/STATAttack.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Attack")
            Description.extendTooltip(tt, "Attack")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoAttack)

        infoDefence = UIInteractableStatInfo.create(window)
        ..setInnerPoint(FRAMEPOINT_TOPLEFT, window, FRAMEPOINT_TOP, 0,  -(iconSize + infoPadding))
        ..setInnerPoint(FRAMEPOINT_TOPRIGHT, window, FRAMEPOINT_TOPRIGHT, 0,  -(iconSize + infoPadding))
        ..setIcon("ICONS/STATDefence.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Defence")
            Description.extendTooltip(tt, "Defence")
            tt.addLine("-----")
            let p = GetTriggerPlayerData()
            UIWindowEntityInfo.getStats(p).getResistance().extendTooltip(tt)
            UITooltip.display(p, tt, TooltipAnchor.LEFT_BOTTOM , infoDefence)

        infoDamage = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoAttack, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoAttack, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Damage")
            Description.extendTooltip(tt, "Damage")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoDamage)

        infoRange = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoDefence, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoDefence, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..setIcon("ICONS/STATRange.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Range")
            Description.extendTooltip(tt, "Range")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoRange)

        infoInititaive = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoDamage, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoDamage, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..setIcon("ICONS/STATInitiative.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Initiative")
            Description.extendTooltip(tt, "Initiative")
            tt.addLine("-----")
            let p = GetTriggerPlayerData()
            InitiativeList.extendTooltip(tt, UIWindowEntityInfo.getStats(p).getInitiative())
            UITooltip.display(p, tt, TooltipAnchor.LEFT_BOTTOM , infoInititaive)

        infoAP = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoRange, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoRange, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..setIcon("ICONS/STATActionpoints.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("ActionPoints")
            Description.extendTooltip(tt, "ActionPoints")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoAP)

        infoHP = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoInititaive, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoInititaive, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..setIcon("ICONS/STATHp.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("HitPoints")
            Description.extendTooltip(tt, "HitPoints")
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoHP)

        infoLeadership = UIInteractableStatInfo.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoAP, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
        ..setPoint(FRAMEPOINT_TOPRIGHT, infoAP, FRAMEPOINT_BOTTOMRIGHT, 0, -infoPadding)
        ..setIcon("ICONS/STATLeadership.dds")
        ..onMouseEnter() -> 
            let tt = Tooltip.create("Leadership")
            Description.extendTooltip(tt, "Leadership")
            // TODO advanced like this :
        /*
            stackInfoHp.setPoint(FRAMEPOINT_TOPRIGHT, stackInfoInitiative.self, FRAMEPOINT_BOTTOMRIGHT, 0, -0.005)
            stackInfoLeadership.setVisible(true)
            bar.setVisible(false)
            stackInfoLeadership.setText(stackType.leadership.toString())
            stackInfoLeadership.setTooltipLine(2, "You currently need "
             + Tooltip.primaryString(p.hero.getCurrentLeadershipRequirementOfStackType(stackType).toString())
             + " " + Tooltip.secondaryString("Leadership") + " to controll all your Stacks of "
             + Tooltip.secondaryString(stackType.name) + ".")
            stackInfoLeadership.setTooltipLine(3, "You can still controll "
             + Tooltip.primaryString(p.hero.getMaxAmountOfStackTypeRemainingBasedOnLeadership(stackType).toString())
             + " more Stacks of " + Tooltip.secondaryString(stackType.name) + ".")*/
            UITooltip.display(GetTriggerPlayerData(), tt, TooltipAnchor.LEFT_BOTTOM , infoLeadership)
        
        let paddingSmallerIcons = 0.002

        handleTalents[0] = UITalent.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, infoHP, FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
    
        for i = 1 to handleTalents.length - 1
            handleTalents[i] = UITalent.create(window)
            ..setPoint(FRAMEPOINT_TOPLEFT, handleTalents[i - 1], FRAMEPOINT_TOPRIGHT, paddingSmallerIcons, 0)

        handleStatus[0] = UIStatus.create(window)
        ..setPoint(FRAMEPOINT_TOPLEFT, handleTalents[0], FRAMEPOINT_BOTTOMLEFT, 0, -infoPadding)
    
        for i = 1 to handleStatus.length - 1
            handleStatus[i] = UIStatus.create(window)
            ..setPoint(FRAMEPOINT_TOPLEFT, handleStatus[i - 1], FRAMEPOINT_TOPRIGHT, paddingSmallerIcons, 0)

        Scheduler.onTime() p ->
            if window.isVisible(p)
                update(p)

    static function get() returns UIWindowBasic
        return window

    static function open(Player p, ArmyStack armyStack)
        UIWindowEntityInfo.setEntity(p, armyStack)
        window.open(p)

    static function open(Player p, BoardEntity entity)
        let isAllowed = UIWindowEntityInfo.setBoardEntity(p, entity)
        if not isAllowed
            return
        window.open(p)

    private static function update(Player p)
        if not p.isLocal()
            return
        let stats = UIWindowEntityInfo.getStats(p)
        let basis = stats.getBasis()

        handleIcon.setTexture(stats.getIcon())
        infoAttack.setTextBasedOnStats(basis.getAttack(), stats.getAttack(), stats.getAttackModifier())
        infoDefence.setTextBasedOnStats(basis.getDefence(), stats.getDefence(), stats.getDefenceModifier())
        infoDamage.setText(damageToText(basis.getDamage(), stats.getDamage()))
        infoDamage.setIcon(stats.getDamageType())
        infoRange.setText(rangeToText(stats.getRange()))
        infoInititaive.setTextBasedOnStats(basis.getInitiative(), stats.getInitiative(), stats.getInitiativeModifier())
        infoAP.setText(apToText(basis.getMaxAP(), stats.getMaxAP(), stats.getMaxMoveAP()))
        infoHP.setTextBasedOnStats(basis.getMaxHP(), stats.getMaxHP(), stats.getMaxHPModifier())
        infoLeadership.setText(stats.getLeadership().toString())
        
        
        for i = 0 to handleTalents.length - 1
            handleTalents[i].hide()
        
        var index = 0
        stats.forEachTalentStat() talentStat ->
            handleTalents[index].setStat(talentStat)
            index ++

        for i = 0 to handleStatus.length - 1
            handleStatus[i].hide()
        
        index = 0
        UIWindowEntityInfo.forEachStatus(p) statusStats ->
            handleStatus[index].setStat(statusStats)
            index ++
            
    private static function damageToText(realRange basisDmg, realRange modifiedDmg) returns string
        let dmgDifference = modifiedDmg.avg() - basisDmg.avg()
        let roundedBasisDmg = basisDmg.round()
        return roundedBasisDmg.min.toString() + " - " + roundedBasisDmg.max.toString() + KStringUtils.coloredModiReal(dmgDifference, 1)
    
    private static function rangeToText(intRange attackRange) returns string
        if attackRange.max == 1
            return "Melee"
        if attackRange.min == 1
            return attackRange.max.toString()
        return attackRange.min.toString() + " - " + attackRange.max.toString() 

    private static function apToText(int basisAP, int modifiedAP, int modifiedMoveAP) returns string
        var str = basisAP.toString() + KStringUtils.coloredModiInt(basisAP - modifiedAP)
        if modifiedMoveAP > 0 and modifiedMoveAP != modifiedAP
            str += " | "
            if modifiedMoveAP > modifiedAP
                str += KStringUtils.coloredString(KStringUtils.COLOR_POSITIVE, " " + modifiedMoveAP.toString())
            else
                str += KStringUtils.coloredString(KStringUtils.COLOR_NEGATIVE, " " + modifiedMoveAP.toString())
        return str

    /*

        updateTalents(armyStats.getAllVisibleTalents())
        for int i = 0 to buffs.length
            buffs[i].setVisible(false)
        

*/