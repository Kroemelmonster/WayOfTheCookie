package UIStackWindow

import ClosureFrames

import PlayerData
import UIButton
import UITooltip
import StackType
import UIInteractableIcon

import initlater BoardStack

public class UIStackWindowInfo
    BoardStack boardStack
    StackType stack

class UIStackWindow
    private static framehandle frame
    private static framehandle pane
    private static framehandle icon
    private static ButtonBorder iconBorder

    private static framehandle header
    private static framehandle subHeader
    private static framehandle text

    private static UIInteractableIcon array[10] buffs
    private static UIInteractableIcon array[10] talents

    static function setup()
        frame = createFrame("UnitWindow", GAME_UI, 0, 0)
        ..setPoint(FRAMEPOINT_TOPRIGHT,  GAME_UI, FRAMEPOINT_TOPRIGHT)
        ..setVisible(false)
        pane = getFrame("WindowPane")

        icon = getFrame("UnitWindowIcon")
        iconBorder = new ButtonBorder(icon)

        header = getFrame("UnitWindowHeader")
        subHeader = getFrame("UnitWindowSubHeader")
        text = getFrame("UntiWindowText")

        let buffBar = getFrame("UnitWindowBuffs")

        for int i = 0 to buffs.length
            buffs[i] = new UIInteractableIcon(buffBar, 0.018, 0.018)
            ..setPoint(FRAMEPOINT_TOPLEFT, buffBar, FRAMEPOINT_TOPLEFT, i * 0.02, 0)
            ..setVisible(false)
            buffs[i].onMouseEnter() ->
                let p = GetTriggerPlayerData()
                let b = p.stackWindowInfo.boardStack.getBuff(i)
                b.createCurrentTooltip().display(p, true)
            buffs[i].onMouseLeave() ->
                let p = GetTriggerPlayerData()
                UITooltip.hide(p)
    
        let talentBar = getFrame("UnitWindowTalents")
        for int i = 0 to talents.length
            talents[i] = new UIInteractableIcon(talentBar, 0.030, 0.030)
            ..setPoint(FRAMEPOINT_TOPLEFT, talentBar, FRAMEPOINT_TOPLEFT, i * 0.032, 0)
            ..setVisible(false)
            talents[i].onMouseEnter() ->
                let p = GetTriggerPlayerData()
                StackType _stackType = null
                if p.stackWindowInfo.boardStack != null
                    _stackType = p.stackWindowInfo.boardStack.getStackType()
                else
                    _stackType = p.stackWindowInfo.stack
                let talent = _stackType.getNonHiddenTalent(i)
                talent.createTooltip(_stackType).display(p, true)
            talents[i].onMouseLeave() ->
                let p = GetTriggerPlayerData()
                UITooltip.hide(p)

    static function update(Player p)
        if p.stackWindowInfo.boardStack != null
            if p.stackWindowInfo.boardStack.isAlive()
                updateForBoardStack(p)
                frame.setVisible(p.blzPlayer, true)
            else
                p.stackWindowInfo.boardStack = null
                frame.setVisible(p.blzPlayer, false)
            
        else if p.stackWindowInfo.stack != null
            updateForStack(p)
            frame.setVisible(p.blzPlayer, true)
        else
            frame.setVisible(p.blzPlayer, false)

    private static function updateTalent(StackType stackType)
        let itr = stackType.talentIterator()
        var counter = 0
        while itr.hasNext()
            let talent = itr.next()
            if talent.isHidden() == false
                talents[counter].setVisible(true)
                talents[counter].setIcon(talent.getIcon())
                counter++
            
        for int i = counter to talents.length
            talents[i].setVisible(false)
        
        destroy itr

    private static function updateForStack(Player p)
        let stackType = p.stackWindowInfo.stack
        if p.isLocal() == false
            return
        icon.setTexture(stackType.icon, 0, true)
        iconBorder.setBorder(BorderColor.NONE)
        header.setText(stackType.name)
        subHeader.setText("")

        var str = ""

        str += Tooltip.stat("Level", stackType.level) + "|n"
        str += Tooltip.stat("Leadership", stackType.leadership) + "|n"
        str += Tooltip.stat("Health", stackType.maxHp) + "|n"
        str += Tooltip.stat("Attack", stackType.attack) + "|n"
        str += Tooltip.stat("Defence", stackType.defence) + "|n"
        str += Tooltip.stat("Damage", stackType.damage) + "|n"
        str += Tooltip.stat("Attackrange", stackType.attackRange) + "|n"
        str += Tooltip.stat("Initiative", stackType.initiative) + "|n"
        str += Tooltip.stat("ActionPoints", stackType.actionPoints) + "|n"
        text.setText(str)

        for int i = 0 to buffs.length
            buffs[i].setVisible(false)

        updateTalent(stackType)

    private static function updateForBoardStack(Player p)
        let stack = p.stackWindowInfo.boardStack
        if p.isLocal() == false
            return
        icon.setTexture(stack.getIcon(), 0, true)
        iconBorder.setBorder(stack.getPlayer().borderColor)
        header.setText(stack.getName())
        subHeader.setText(stack.stats.getAmount().toString() + " / "+stack.stats.getStartAmount().toString())

        var str = ""
        
        let sType = stack.stats.getStackType()
        
        str += Tooltip.stat("Level", sType.level) + "|n"
        str += Tooltip.stat("Leadership", sType.leadership) + "|n"

        str += "Health : " + Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, stack.stats.getHp()) + " / "+ Tooltip.coloredInt(Tooltip.COLOR_PRIMARY, stack.stats.getMaxHp()) +"|n"
        str += Tooltip.stat("Attack", stack.stats.getAttack()) + "|n"
        str += Tooltip.stat("Defence", stack.stats.getDefence()) + "|n"
        str += Tooltip.stat("Damage", stack.stats.getDamage()) + "|n"
        str += Tooltip.stat("Attackrange", stack.stats.getAttackRange()) + "|n"
        str += Tooltip.stat("Initiative", stack.stats.getInitiative()) + "|n"
        str += Tooltip.stat("ActionPoints", stack.stats.getMaxActionPoints()) + "|n"
        text.setText(str)

        let itr = stack.buffIterator()
        for int i = 0 to buffs.length
            buffs[i].setVisible(itr.hasNext())
            if itr.hasNext()
                let b = itr.next()
                buffs[i].setIcon(b.getIcon())
        
        destroy itr

        updateTalent(sType)
