package UIHeroSkillTree
import UIButton
import PlayerData
import UITooltip
import ClosureFrames

public class UIHeroSkillTreeInfo
    protected integer currentTree = 0

public class UIHeroSkillTree
    private static constant int MAX_SKILLS = 15

    private framehandle self
    private framehandle inner
    private framehandle background
    private ActionButton array[MAX_SKILLS] skills

    private framehandle array[3] skillTreeTabs
    private framehandle array[3] skillTreeTabNames

    private real width
    private real height

    construct(framehandle parent, framehandle self)
        this.self = self
        this.width = 0.255
        this.height = 0.42

        background = createFrame("BACKDROP", "", parent, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT)
        ..setLevel(-INT_MAX)

        let size = 0.05
        skillTreeTabs[0] = createFrame("DialogAcceptButton", self, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, 0.0, 0.0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, self, FRAMEPOINT_TOP, -size, 0.0)
        ..setLevel(100)
        ..onClick() ->
            changeTab(GetTriggerPlayerData(), 0)
        skillTreeTabNames[0] = getFrame("DialogButtonText")

        skillTreeTabs[1] = createFrame("DialogAcceptButton", self, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOP, -size, 0.0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, self, FRAMEPOINT_TOP, size, 0.0)
        ..setLevel(100)
        ..onClick() ->
            changeTab(GetTriggerPlayerData(), 1)
        skillTreeTabNames[1] = getFrame("DialogButtonText")

        skillTreeTabs[2] = createFrame("DialogAcceptButton", self, 0, 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOP, size, 0.0)
        ..setPoint(FRAMEPOINT_TOPRIGHT, self, FRAMEPOINT_TOPRIGHT, 0.0, 0.0)
        ..setLevel(100)
        ..onClick() ->
            changeTab(GetTriggerPlayerData(), 2)
        skillTreeTabNames[2] = getFrame("DialogButtonText")


        inner = createFrame("FRAME", "", self, "", 0)
        ..setPoint(FRAMEPOINT_TOPLEFT, self, FRAMEPOINT_TOPLEFT, 0.025, -0.025)
        ..setPoint(FRAMEPOINT_BOTTOMRIGHT, self, FRAMEPOINT_BOTTOMRIGHT, -0.02, -0.01)

        for int i = 0 to MAX_SKILLS - 1
            skills[i] = new ActionButton(inner)
            skills[i].onClick() -> 
                let p = GetTriggerPlayerData()
                let h = p.hero
                let info = p.heroWindoInfo.skillTree
                let skill = h.getSkillTree(info.currentTree).skills.get(i)
                skill.dolevelUp(h)
                let tt = skill.createTooltip(h)
                tt.display(p, true, TooltipAnchor.TOP_RIGHT, skills[i].self)

            skills[i].onMouseEnter() -> 
                let p = GetTriggerPlayerData()
                let h = p.hero
                let info = p.heroWindoInfo.skillTree
                let skill = h.getSkillTree(info.currentTree).skills.get(i)
                let tt = skill.createTooltip(h)
                tt.display(p, true, TooltipAnchor.TOP_RIGHT, skills[i].self)

            skills[i].onMouseLeave() -> 
                let p = GetTriggerPlayerData()
                UITooltip.hide(p)

    protected function changeTab(Player p, int newIndex)
        if p.isLocal()
            p.heroWindoInfo.skillTree.currentTree = newIndex
            skillTreeTabs[0].setEnabled(true)
            skillTreeTabs[1].setEnabled(true)
            skillTreeTabs[2].setEnabled(true)
            skillTreeTabs[newIndex].setEnabled(false)
            background.setTexture("UI/Textures/hero-" + p.hero.getSkillTree(newIndex).getName().toLowerCase() + "-background.dds", 0, true)
        update(p)

    function openSkillTree(Player p)
        let h = p.hero
        for int i = 0 to skillTreeTabNames.length - 1
            skillTreeTabNames[i].setText(h.getSkillTree(i).getName())

        changeTab(p, p.heroWindoInfo.skillTree.currentTree)
    
    function update(Player p)
        if p.isLocal() == false
            return
        let h = p.hero
        let info = p.heroWindoInfo.skillTree
        let skillTree = h.getSkillTree(info.currentTree)
        let size = skillTree.skills.size()
        for int i = 0 to MAX_SKILLS - 1
            if i < size
                let skill = skillTree.skills.get(i)
                skills[i].setPoint(FRAMEPOINT_TOP, inner, FRAMEPOINT_TOPLEFT, width * skill.x, height * -skill.y)
                skills[i].setVisible(true)
                skills[i].setLevel(skill.level)
                skills[i].setIcon(skill.icon)
                skills[i].setGlowVisible(skill.canLevelUp(h))
            else
                skills[i].setVisible(false)
        

        