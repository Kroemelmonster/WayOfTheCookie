package HostileArmy


import HashMap

import Stack
import StackType
import PlayerData
import ClosureEvents
import World

constant HashMap<unit, HostileArmy> map = new HashMap<unit, HostileArmy>

public class HostileArmy
    protected Army army
    protected unit u
    protected Player p

    protected EventListener damagedListener

    construct(unit u)
        this.p = Player.NEUTRAL_AGGRESIVE
        this.u = u
        this.army = new Army()

    function getPlayer() returns Player
        return p

    static function getFromUnit(unit u) returns HostileArmy
        return map.get(u)

    function getArmy() returns Army
        return army

    function enable(boolean flag)
        if flag == false
            u.pause()
            u.setInvulnerable(true)
            u.addAbility(LOCUST_ID)
        else
            u.unpause()
            u.setInvulnerable(false)
            u.removeAbility(LOCUST_ID)

    function addStackAtFree(StackType stackType, int amount) returns boolean
        return army.addStackAtFree(stackType, amount)

    function addStack(StackType stackType, int amount) returns boolean
        return army.addStack(stackType, amount)

    function replaceChicken()
        let pos = u.getPos()
        u.remove()
        u = createUnit(p.blzPlayer, army.getFirstStack().getStackType().armyUnitId, pos, angle(GetRandomReal(0, PI2)))
        map.put(u, this)

        damagedListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) ->
            if u.isInvulnerable() == false
                World.onHostileArmyDamaged(this, GetEventDamageSource())

    function toString() returns string
        return "Hostile "+army.toString()

    ondestroy
        destroy army
        destroy damagedListener

        map.remove(u)

 