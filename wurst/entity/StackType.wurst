package StackType

import LinkedList

import StackSoundSet
import KUtil
import Talent
import initlater BoardStack

public enum DamageType
    PHYISICAL
    MAGIC
    FIRE
    POISON

public class Family
    string name

    construct(string name)
        this.name = name

    static Family TROLL = new Family("Troll")
    static Family GNOLL = new Family("Gnoll")
    static Family SKELTON = new Family("Skelton")
    static Family SASQUATCH = new Family("Sasquatch")


public class StackType
    integer unitId
    integer armyUnitId
    StackSoundSet soundSet
    string icon
    string name

    integer level
    integer leadership
    integer value
    int weight

    integer initiative
    integer actionPoints

    integer maxHp
    intRange damage
    intRange attackRange
    int attack
    int defence

    DamageType damageType = PHYISICAL

    int phyisicalResistance = 0
    int magicResistance = 0
    int fireResistance = 0
    int poisonResistance = 0

    LinkedList<Talent> talents = new LinkedList<Talent>()

    LinkedList<Family> families = new LinkedList<Family>()

    construct(integer unitId, integer armyUnitId, string icon, StackSoundSet soundSet, string name, int level, int leadership, int value, int weight)
        this.unitId = unitId
        this.armyUnitId = armyUnitId
        this.soundSet = soundSet
        this.icon = icon
        this.name = name
        this.level = level
        this.leadership = leadership
        this.value = value
        this.weight = weight

    function addTalent(Talent talent)
        talents.add(talent)

    function addFamily(Family fam)
        families.add(fam)
    
    function isFamily(Family fam) returns boolean
        return families.has(fam)
        
    function getAllVisibleTalents() returns LinkedList<Talent>
        return talents.filter() (Talent t) ->
            return t.isHidden() == false

    @inline
    function getResistance(DamageType dType) returns int
        switch dType
            case MAGIC
                return magicResistance
            case FIRE
                return fireResistance
            case POISON
                return poisonResistance
            default
                return phyisicalResistance

    @inline
    function setMaxHp(int value)
        maxHp = value
    
    @inline
    function setDamage(intRange value)
        damage = value

    @inline
    function getCost() returns int
        return value

    @inline
    function setAttackRange(intRange value)
        attackRange = value

    @inline
    function setInitiative(int value)
        initiative = value

    @inline
    function setActionPoints(int value)
        actionPoints = value

    @inline
    function setAttack(int value)
        attack = value

    @inline
    function setDefence(int value)
        defence = value
    
    @inline
    function setDamageType(DamageType value)
        this.damageType = value

    @inline
    function setResistanceAgainst(DamageType dType, int value)
        switch dType
            case MAGIC
                magicResistance = value
            case FIRE
                fireResistance = value
            case POISON
                poisonResistance = value
            default
                phyisicalResistance = value