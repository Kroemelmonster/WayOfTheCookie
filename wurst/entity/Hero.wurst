package Hero

import HashMap

import Stack
import PlayerData
import StackType
import UnitDefinition
import ClosureEvents
import World
import Orders
import NPC
import UIWorldConsole
import KItem

constant HashMap<unit, Hero> map = new HashMap<unit, Hero>

public class Hero
    protected unit u
    protected Player p
    protected int gold
    protected int leadership

    protected int attack = 0
    protected int defence = 0

    protected KItem array[8] items

    protected Army army

    protected NPC currentInteract


    protected EventListener damagedListener
    protected EventListener orderUnitListener
    protected EventListener orderPointListener
    protected OnCastListener interactWithNPCListener

    construct(Player p)
        this.p = p
        u = createUnit(playerData[0].blzPlayer, UnitTypesIds.HERO_FAR_SEER, playerData[0].blzPlayer.getStartLocation(), angle(0))
        army = new Army()
        p.hero = this
        map.put(u, this)

        damagedListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) ->
            if u.isInvulnerable() == false
                World.onHeroDamaged(this, GetEventDamageSource())


        orderUnitListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this, GetOrderTargetUnit())

        orderPointListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this)

        interactWithNPCListener = EventListener.onCast(u, AbilityTypesIds.TARGET_UNIT_SPELL) cb ->
            World.onHeroInteractWithNPC(this, GetSpellTargetUnit())

        gold = 450 //GetRandomInt(200, 400)
        leadership = 400

        UIWorldConsole.setupHero(this)
        p.blzPlayer.selectSingle(u)

    static function getFromUnit(unit u) returns Hero
        return map.get(u)

    function createSummon(StackType stackType, int amount) returns ArmyStack
        let summon = new ArmyStack(stackType, amount, true)
        updateArmyStackStats(summon)
        return summon
    
    function addStack(StackType stackType, int amount)
        let armyStack = army.addStack(stackType, amount)
        updateArmyStackStats(armyStack)

    function addStackAtFree(StackType stackType, int amount)
        let armyStack = army.addStackAtFree(stackType, amount)
        updateArmyStackStats(armyStack)

    function getArmy() returns Army
        return army

    function getPlayer() returns Player
        return p

    function getGold() returns int
        return gold

    function addGold(int amount)
        gold += amount

    function getLeadership() returns int
        return leadership

    function getMaxAmountOfStackTypeBasedOnGold(StackType stackType) returns int
        return (gold / stackType.getCost()).floor()

    function getCurrentLeadershipRequirementOfStackType(StackType stackType) returns int
        var req = 0
        for int i = 0 to Army.MAX_SIZE - 1
            let stack = army.getStack(i)
            if stack != null and stack.getStackType() == stackType
                req += stackType.leadership * stack.getAmount()

        return req

    function getMaxAmountOfStackTypeRemainingBasedOnLeadership(StackType stackType) returns int
        return ((leadership - getCurrentLeadershipRequirementOfStackType(stackType)) / stackType.leadership.toReal()).floor()

    function setVulnearble(boolean flag)
        if flag == false
            u.abortOrder()
            u.setInvulnerable(true)
        else
            u.setInvulnerable(false)

    function enable(boolean flag)
        setVulnearble(flag)
        if flag
            u.unpause()
            p.blzPlayer.selectSingle(u)
        else
            u.pause()

    function issueNPC(NPC npc)
        u.issueTargetOrder(AbilityTypesIds.TARGET_UNIT_SPELL_ORDER, npc.getUnit())

    private function updateArmyStackStats(ArmyStack armyStack)
        if armyStack == null
            return
        armyStack.stats.attackModi.addBonus += attack
        armyStack.stats.defenceModi.addBonus += defence

        for int i = 0 to items.length - 1
            if items[i] != null
                items[i].onStackUpdate(armyStack, true)

    function startInteract(NPC npc)
        currentInteract = npc
        npc.startInteraction(this)
    
    function stopInteract()
        if currentInteract != null
            currentInteract.endInteraction(this)
            currentInteract = null

    function getAttack() returns int
        return attack

    function getDefence() returns int
        return defence

    function pickUpItem(int index, KItem kItem)
        items[index] = kItem
        for int i = 0 to Army.MAX_SIZE - 1
            let armyStack = army.getStack(i)
            if armyStack != null
                kItem.onStackUpdate(armyStack, true)

    function setAttack(int value)
        for int i = 0 to Army.MAX_SIZE - 1
            let armyStack = army.getStack(i)
            if armyStack != null
                armyStack.stats.attackModi.addBonus += value - attack
        this.attack = value

    function setDefence(int value)
        for int i = 0 to Army.MAX_SIZE - 1
            let armyStack = army.getStack(i)
            if armyStack != null
                armyStack.stats.defenceModi.addBonus += value - defence
        this.defence = value

    function toString() returns string
        return "Hero [" + u.getName() +"]"

    ondestroy
        destroy damagedListener
        destroy orderUnitListener
        destroy orderPointListener
        destroy interactWithNPCListener
        destroy army
        map.remove(u)