package BoardTrigger

import LinkedList

import initlater BoardStack
import initlater Cell
import initlater Damage

public abstract class SequenzListener
    function continue()
        continueInner()
        destroy this

    abstract function continueInner()

public abstract class SequenzListenerStatus
    function continue(int status)
        continueInner(status)
        destroy this

    abstract function continueInner(int status)

public abstract class BoardTriggerOnAnyCellEnter
    abstract function onEvent(BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)

public abstract class BoardTriggerOnAnyCellLeave
    abstract function onEvent(BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)

public abstract class BoardTriggerOnStackInteraction
    abstract function onEvent(BoardStack initator, BoardStack receiver, SequenzListener next)

public abstract class BoardTriggerOnDamageDealt
    abstract function onEvent(BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)

public abstract class BoardTriggerOnDamageTaken
    abstract function onEvent(BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)

public abstract class BoardTrigger
    abstract function onEvent(SequenzListener next)

public class StackTrigger
    private LinkedList<BoardTriggerOnAnyCellEnter> onAnyCellEnter = new LinkedList<BoardTriggerOnAnyCellEnter>()
    private LinkedList<BoardTriggerOnAnyCellLeave> onAnyCellLeave = new LinkedList<BoardTriggerOnAnyCellLeave>()
    private LinkedList<BoardTrigger> onTurnStart = new LinkedList<BoardTrigger>()
    private LinkedList<BoardTrigger> onTurnEnd = new LinkedList<BoardTrigger>()
    private LinkedList<BoardTriggerOnStackInteraction> onAttacked = new LinkedList<BoardTriggerOnStackInteraction>()
    private LinkedList<BoardTriggerOnDamageTaken> onDamageTaken = new LinkedList<BoardTriggerOnDamageTaken>()
    private LinkedList<BoardTriggerOnDamageDealt> onDamageDealt = new LinkedList<BoardTriggerOnDamageDealt>()

    function addOnAnyCellEnter(BoardTriggerOnAnyCellEnter listener) returns BoardTriggerOnAnyCellEnter
        onAnyCellEnter.add(listener)
        return listener

    function removeOnAnyCellEnter(BoardTriggerOnAnyCellEnter listener)
        onAnyCellEnter.remove(listener)
        destroy listener

    function addOnAnyCellLeave(BoardTriggerOnAnyCellLeave listener) returns BoardTriggerOnAnyCellLeave
        onAnyCellLeave.add(listener)
        return listener

    function removeOnAnyCellLeave(BoardTriggerOnAnyCellLeave listener)
        onAnyCellLeave.remove(listener)

    function addTurnStart(BoardTrigger listener) returns BoardTrigger
        onTurnStart.add(listener)
        return listener

    function removeOnTurnStart(BoardTrigger listener)
        onTurnStart.remove(listener)

    function addTurnEnd(BoardTrigger listener) returns BoardTrigger
        onTurnEnd.add(listener)
        return listener

    function removeOnTurnEnd(BoardTrigger listener)
        onTurnEnd.remove(listener)

    function addOnAttacked(BoardTriggerOnStackInteraction listener) returns BoardTriggerOnStackInteraction
        onAttacked.add(listener)
        return listener

    function removeOnAttacked(BoardTriggerOnStackInteraction listener)
        onAttacked.remove(listener)

    function addOnDamageTaken(BoardTriggerOnDamageTaken listener) returns BoardTriggerOnDamageTaken
        onDamageTaken.add(listener)
        return listener

    function removeOnDamageTaken(BoardTriggerOnDamageTaken listener)
        onDamageTaken.remove(listener)

    function addOnDamageDealt(BoardTriggerOnDamageDealt listener) returns BoardTriggerOnDamageDealt
        onDamageDealt.add(listener)
        return listener

    function removeOnDamageDealt(BoardTriggerOnDamageDealt listener)
        onDamageDealt.remove(listener)

    private function triggerOnDamageDealtInner(LLIterator<BoardTriggerOnDamageDealt> iter, BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, specificInstance) ->
                triggerOnDamageDealtInner(iter, source, target, specificInstance, next)
        else
            next.continue()

    function triggerOnDamageDealt(BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        let copy = onDamageDealt.copy()
        let itr = copy.iterator()
        triggerOnDamageDealtInner(itr, source, target, specificInstance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnDamageTakenInner(LLIterator<BoardTriggerOnDamageTaken> iter, BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, specificInstance) ->
                triggerOnDamageTakenInner(iter, source, target, specificInstance, next)
        else
            next.continue()

    function triggerOnDamageTaken(BoardStack source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        let copy = onDamageTaken.copy()
        let itr = copy.iterator()
        triggerOnDamageTakenInner(itr, source, target, specificInstance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnAttackedInner(LLIterator<BoardTriggerOnStackInteraction> iter, BoardStack attacker, BoardStack defender, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(attacker, defender) ->
                triggerOnAttackedInner(iter, attacker, defender, next)
        else
            next.continue()

    function triggerOnAttacked(BoardStack attacker, BoardStack defender, SequenzListener next)
        let copy = onAttacked.copy()
        let itr = copy.iterator()
        triggerOnAttackedInner(itr, attacker, defender) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnTurnEndInner(LLIterator<BoardTrigger> iter, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent() ->
                triggerOnTurnEndInner(iter, next)
        else
            next.continue()

    function triggerOnTurnEnd(SequenzListener next)
        let copy = onTurnEnd.copy()
        let itr = copy.iterator()
        triggerOnTurnEndInner(itr) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnTurnStartInner(LLIterator<BoardTrigger> iter, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent() ->
                triggerOnTurnStartInner(iter, next)
        else
            next.continue()

    function triggerOnTurnStart(SequenzListener next)
        let copy = onTurnStart.copy()
        let itr = copy.iterator()
        triggerOnTurnStartInner(itr) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnAnyCellLeaveInner(LLIterator<BoardTriggerOnAnyCellLeave> iter, BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(stack, fromCell, toCell) ->
                triggerOnAnyCellLeaveInner(iter, stack, fromCell, toCell, next)
        else
            next.continue()

    function triggerOnAnyCellLeave(BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)
        let copy = onAnyCellLeave.copy()
        let itr = copy.iterator()
        triggerOnAnyCellLeaveInner(itr, stack, fromCell, toCell) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnAnyCellEnterInner(LLIterator<BoardTriggerOnAnyCellEnter> iter, BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(stack, fromCell, toCell) ->
                triggerOnAnyCellEnterInner(iter, stack, fromCell, toCell, next)
        else
            next.continue()

    function triggerOnAnyCellEnter(BoardStack stack, Cell fromCell, Cell toCell, SequenzListener next)
        let copy = onAnyCellEnter.copy()
        let itr = copy.iterator()
        triggerOnAnyCellEnterInner(itr, stack, fromCell, toCell) () ->
            destroy itr
            destroy copy
            next.continue()

    ondestroy
        for listener in onAnyCellEnter
            destroy listener
        destroy onAnyCellEnter
        for listener in onAnyCellLeave
            destroy listener
        destroy onAnyCellLeave
        for listener in onTurnStart
            destroy listener
        destroy onTurnStart
        for listener in onTurnEnd
            destroy listener
        destroy onTurnStart
        for listener in onAttacked
            destroy listener
        destroy onAttacked
        for listener in onDamageTaken
            destroy listener
        destroy onDamageTaken
        for listener in onDamageDealt
            destroy listener
        destroy onDamageDealt