package BoardStack

import LinkedList
import Abilities
import AttachmentPoints
import ClosureEvents
import AbilityIds

import StackType
import PlayerData
import Action
import UnitDefinition
import DefaultAction
import PassiveAction
import Status

import initlater Cell
import initlater Board
import BoardStackStats
import StackStats
import Stack
import BoardTrigger
import BoardEntity

public class BoardStack extends BoardEntity
    private StackType stackType
    private ArmyStack armyStack
    private Cell cell
    private Player p

    private effect highlightEffect
    private texttag tt

    
    private DefaultAction defaultAction = null
    private LinkedList<Action> actions
    private integer currentSelectedAction = 0
    private LinkedList<PassiveAction> passiveActions

    private LinkedList<Status> stati

    private EventListener damageTakenListener
    private EventListener castListener

    private EventListener unitDamageTakenListener
    private OnCastListener unitOnCastListener
    private OnCastListener unitOnCastImmediateListener

    private StackTrigger triggers

    BoardStackStats stats

    construct(Player p, ArmyStack stack)
        super(EntityType.STACK, null)
        this.p = p
        this.stats = new BoardStackStats(this, stack.stats, stack.getAmount())
        this.armyStack = stack
        this.stackType = stack.getStackType()
        stack.representive = this

        this.actions = new LinkedList<Action>
        this.passiveActions = new LinkedList<PassiveAction>

        this.stati = new LinkedList<Status>
        this.triggers = new StackTrigger()

        stack.stats.triggerOnCreation(this)

    @inline
    override function getCell() returns Cell
        return cell

    @inline
    override function getPlayer() returns Player
        return p

    @inline
    override function getIcon() returns string
        return stackType.icon

    @inline
    function getName() returns string
        return stackType.name

    @inline
    function getStackType() returns StackType
        return stackType

    @inline
    function getArmyStack() returns ArmyStack
        return armyStack

    override function resetCurrentSelectedAction() returns boolean
        if currentSelectedAction == -1
            return false
        currentSelectedAction = -1
        return true
    
    @inline
    override function setCurrentAction(Action action)
        currentSelectedAction = actions.indexOf(action)

    @inline
    override function getDefaultAction() returns DefaultAction
        return defaultAction

    @inline
    function forEachAction(LLItrClosure<Action> itr)
        actions.forEach(itr)

    @inline
    function actionIterator() returns LLIterator<Action>
        return actions.iterator()

    @inline
    function statusIterator() returns LLIterator<Status>
        return stati.iterator()

    @inline
    function getStatus(int index) returns Status
        return stati.get(index)
        
    @inline
    function addStatus(Status status)
        stati.add(status)

    @inline
    function removeStatus(Status status)
        stati.remove(status)

    @inline
    function getTriggers() returns StackTrigger
        return triggers

    @inline
    function passiveActionIterator() returns LLIterator<PassiveAction>
        return passiveActions.iterator()

    @inline
    override function getActions() returns LinkedList<Action>
        return actions
    
    override function getAction(int index) returns Action
        if index == -1
            return defaultAction
        return actions.get(index)

    @inline
    override function getCurrentAction() returns Action
        return getAction(currentSelectedAction)

    function addAction(Action action)
        if action.isDefault()
            if defaultAction != null
                Log.error("Tried to add an Default Action to "+getName()+" while it allready has one -> opverwriting it")
            defaultAction = action castTo DefaultAction
        else
            actions.add(action)

    function addPassive(PassiveAction passive)
        passiveActions.add(passive)

    @inline
    override function getMaxActionPoints() returns int
        return stats.getMaxActionPoints()

    @inline
    override function getRemainingActionPoints() returns int
        return stats.getRemainingActionPoints()

    @inline
    override function addActionPoints(integer amount)
        stats.addActionPoints(amount)

    @inline
    override function resetActionPoints()
        stats.resetActionPoints()

    @inline 
    function isEnemy(BoardEntity other) returns boolean
        return p != other.getPlayer()

    @inline
    function canAttack(BoardStack other) returns boolean
        return isEnemy(other)

    function place(Cell cell)
        let playerIndex = cell.getBoard().getPlayerIndex(p)
        if playerIndex == -1
            return

        this.cell = cell
        this.board = cell.getBoard()
        u = createUnit(DUMMY_PLAYER, stackType.unitId, cell.getCoord(), angle(PI * playerIndex))
        u.setColor(p.blzPlayer.getColor())
        u.disableAbility(AbilityIds.attack, true, false)

        unitDamageTakenListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) () ->
            if damageTakenListener != null
                damageTakenListener.onEvent()
                destroy damageTakenListener
                damageTakenListener = null
            
        unitOnCastListener = EventListener.onCast(u, AbilityTypesIds.TARGET_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null
        unitOnCastImmediateListener = EventListener.onCast(u, AbilityTypesIds.SELFCAST_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null

        if board.getInitiative().isFirstTurn() == false
            SetUnitAnimation(u, "birth")

        resetActionPoints()

        tt = createTTEx(getTextTagPos(), stats.getAmount().toString(), 10.0)

    function replaceCell(Cell cell)
        this.cell.removeStack()
        this.cell = cell
        this.cell.setStack(this)

    override function isAlive() returns boolean
        return isOnBoard()
    
    function isOnBoard() returns boolean
        return this.cell != null

    @inline
    override function getInitiative() returns int
        return stats.getInitiative()

    function kill()
        board.triggerOnStackKilled(this)
        prepareToRemoveBlzUnit()
        u.kill()

    @inline
    function isSelectByOwnPlayer() returns boolean
        return p.currentSelectedEntity == this
    
    function doOnNextDamageTaken(EventListener listener)
        damageTakenListener = listener

    override function doOnNextCast(EventListener listener)
        castListener = listener

    function getCurrentOrder() returns int
        return u.getCurrentOrder()

    function isInRangeOf(vec2 coord, real range) returns boolean
        return u.getPos().inRange(coord, range)

    function setVisualHp(real percent)
        u.setHP(percent * 1000)

    function flashEffectOnPos(string sfx)
        flashEffect(sfx, u.getPos())

    function flashAttachEffect(string sfx, string attachment)
        flashEffect(sfx, u, attachment)

    function addAttachEffect(string sfx, string attachment) returns effect
        return addEffect(sfx, u, attachment)

    override function setHighlight(boolean flag)
        if flag == false or highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null
        if flag
            highlightEffect = addEffect(Abilities.aneuTarget, u, AttachmentPoints.overhead)

    function tick(real _delta)
        tt.setPos(getTextTagPos())
        tt.setText(stats.getAmount().toString(), 10.0)

    override function toString() returns string
        return getName() +" [" + stats.getAmount().toString() +"]"

    private function getTextTagPos() returns vec3
        var pos = u.getPos3Zero()
        pos.y -= 50
        pos.x += 33
        return pos

    private function prepareToRemoveBlzUnit()
        if cell != null
            cell.removeStack()
            cell = null
        if highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null

        if castListener != null
            destroy castListener
            castListener = null
        if damageTakenListener != null
            destroy damageTakenListener
            damageTakenListener = null

        if unitOnCastListener != null
            destroy unitOnCastListener
            unitOnCastListener = null
        if unitDamageTakenListener != null
            destroy unitDamageTakenListener
            unitDamageTakenListener = null
        if unitOnCastImmediateListener != null
            destroy unitOnCastImmediateListener
            unitOnCastImmediateListener = null
        if tt != null
            tt.destr()
            tt = null
    
    ondestroy
        prepareToRemoveBlzUnit()
        if actions != null
            for action in actions
                destroy action
            destroy actions
        if passiveActions != null
            for action in passiveActions
                destroy action
            destroy passiveActions
        if stati != null
            for status in stati
                destroy status
            destroy stati
        if defaultAction != null
            destroy defaultAction

        if armyStack.isSummoned()
            destroy armyStack
        destroy stats
        destroy triggers
    
        u.remove()
