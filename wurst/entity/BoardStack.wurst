package BoardStack

import LinkedList
import Abilities
import AttachmentPoints
import ClosureEvents
import AbilityIds

import StackType
import PlayerData
import Action
import UnitDefinition
import DefaultAction
import PassiveAction

import initlater Cell
import initlater Board
import BoardStackStats
import StackStats
import Stack
import BoardTrigger
import BoardEntity

public class BoardStack extends BoardEntity
    private StackType stackType
    private ArmyStack armyStack
    private Cell cell
    private Player p

    private texttag tt

    
    private DefaultAction defaultAction = null
    private LinkedList<Action> actions
    private integer currentSelectedAction = 0
    private LinkedList<PassiveAction> passiveActions

    BoardStackStats stats

    construct(Player p, ArmyStack stack)
        super(EntityType.STACK, null)
        this.p = p
        this.stats = new BoardStackStats(this, stack.stats, stack.getAmount())
        this.armyStack = stack
        this.stackType = stack.getStackType()
        stack.representive = this

        this.actions = new LinkedList<Action>
        this.passiveActions = new LinkedList<PassiveAction>

        stack.stats.triggerOnCreation(this)

    @inline
    override function getCell() returns Cell
        return cell

    @inline
    override function getPlayer() returns Player
        return p

    @inline
    override function getIcon() returns string
        return stackType.icon

    @inline
    function getName() returns string
        return stackType.name

    @inline
    function getStackType() returns StackType
        return stackType

    @inline
    function getArmyStack() returns ArmyStack
        return armyStack

    override function resetCurrentSelectedAction() returns boolean
        if currentSelectedAction == -1
            return false
        currentSelectedAction = -1
        return true
    
    @inline
    override function setCurrentAction(Action action)
        currentSelectedAction = actions.indexOf(action)

    @inline
    override function getDefaultAction() returns DefaultAction
        return defaultAction

    @inline
    function forEachAction(LLItrClosure<Action> itr)
        actions.forEach(itr)

    @inline
    function actionIterator() returns LLIterator<Action>
        return actions.iterator()

    @inline
    function passiveActionIterator() returns LLIterator<PassiveAction>
        return passiveActions.iterator()

    @inline
    override function getActions() returns LinkedList<Action>
        return actions
    
    override function getAction(int index) returns Action
        if index == -1
            return defaultAction
        return actions.get(index)

    @inline
    override function getCurrentAction() returns Action
        return getAction(currentSelectedAction)

    function addAction(Action action)
        if action.isDefault()
            if defaultAction != null
                Log.error("Tried to add an Default Action to "+getName()+" while it allready has one -> opverwriting it")
            defaultAction = action castTo DefaultAction
        else
            actions.add(action)

    function addPassive(PassiveAction passive)
        passiveActions.add(passive)

    @inline
    override function getMaxActionPoints() returns int
        return stats.getMaxActionPoints()

    @inline
    override function getRemainingActionPoints() returns int
        return stats.getRemainingActionPoints()

    @inline
    // TODO mach daraus ein ovveride
    function getRemainingMoveActionPoints() returns int
        return stats.getRemainingMoveActionPoints()

    @inline
    override function addActionPoints(integer amount)
        stats.addActionPoints(amount)

    @inline
    override function resetActionPoints()
        stats.resetActionPoints()

    @inline 
    function isEnemy(BoardEntity other) returns boolean
        return p != other.getPlayer()

    @inline
    function canAttack(BoardStack other) returns boolean
        return isEnemy(other)

    function place(Cell cell)
        let playerIndex = cell.getBoard().getPlayerIndex(p)
        if playerIndex == -1
            return

        this.cell = cell
        this.board = cell.getBoard()
        createBLZUnit(playerIndex)

        if board.getInitiative().isFirstTurn() == false
            SetUnitAnimation(u, "birth")

        resetActionPoints()

        tt = createTTEx(getTextTagPos(), stats.getAmount().toString(), 10.0)


    private function createBLZUnit(int playerIndex)
        u = createUnit(DUMMY_PLAYER, stackType.unitId, cell.getCoord(), angle(PI * playerIndex))
        u.setColor(p.blzPlayer.getColor())
        u.disableAbility(AbilityIds.attack, true, false)
        placeEntity()

    function replaceCell(Cell cell)
        this.cell.removeStack()
        this.cell = cell
        this.cell.setStack(this)

    override function isAlive() returns boolean
        return isOnBoard()
    
    function isOnBoard() returns boolean
        return this.cell != null

    @inline
    override function getInitiative() returns int
        return stats.getInitiative()

    function kill()
        board.triggerOnStackKilled(this)
        removeStackRelatedThingsFromBoard()
        u.kill()

    @inline
    function isSelectByOwnPlayer() returns boolean
        return p.currentSelectedEntity == this

    function getCurrentOrder() returns int
        return u.getCurrentOrder()

    function isInRangeOf(vec2 coord, real range) returns boolean
        return u.getPos().inRange(coord, range)

    function setVisualHp(real percent)
        u.setHP(percent * 1000)

    function tick(real _delta)
        tt.setPos(getTextTagPos())
        tt.setText(stats.getAmount().toString(), 10.0)

    override function toString() returns string
        return getName() +" [" + stats.getAmount().toString() +"]"

    private function getTextTagPos() returns vec3
        var pos = u.getPos3Zero()
        pos.y -= 50
        pos.x += 33
        return pos

    private function removeStackRelatedThingsFromBoard()
        removeEntityRelatedThingsFromBoard()
        // TODO this should remove the entiy not the stack
        if cell != null
            cell.removeStack()
            cell = null

        if tt != null
            tt.destr()
            tt = null
    
    ondestroy
        removeStackRelatedThingsFromBoard()
        destroyEntity()

        if actions != null
            for action in actions
                destroy action
            destroy actions
        if passiveActions != null
            for action in passiveActions
                destroy action
            destroy passiveActions
        if defaultAction != null
            destroy defaultAction

        if armyStack.isSummoned()
            destroy armyStack
        destroy stats
        destroyTriggers()
    
        u.remove()