package BoardStackStats

import initlater Cell
import initlater BoardStack

import DamageAndResistance
import Talent
import TalentType
import StackStats
import SubTargetList
import Damage
import Stats
import StackType

public interface HasBoardEntityStats
    function getRemainingAP() returns int
    function getRemainingMoveAP() returns int

public class BoardStackStats implements HasEntityStats, HasBoardEntityStats, HasTags
    private StackStats basis
    private BoardStack stack
    int startAmount
    int amount
    int remainingActionPoints
    int remainingMoveActionPoints
    int hp

    StatInt attack
    StatInt defence
    StatInt initiative
    StatInt maxAP
    StatIntWithBaseInt maxMoveAP
    StatInt maxHp
    StatRealRange baseDamage
    StatIntRange attackRange
    
    protected StatTag array[TAG_AMOUNT + 1] tags

    protected Resistance resistance
    protected LinkedList<Talent> talents = new LinkedList<Talent>


    protected SubTargetList subAttackList = null

    construct(BoardStack stack, StackStats basis, int amount)
        this.basis = basis
        this.amount = amount
        this.stack = stack
        startAmount = amount
        hp = basis.getMaxHP()
        resistance = new Resistance(basis.getResistance())

        for talent in basis.getTalents()
            talents.add(talent.create(stack))

        attack = new StatInt(basis.attack)
        defence = new StatInt(basis.defence)
        initiative = new StatInt(basis.initiative)
        maxHp = new StatInt(basis.maxHp)
        maxAP = new StatInt(basis.maxAP)
        maxMoveAP = new StatIntWithBaseInt(maxAP)
        baseDamage = new StatRealRange(basis.baseDamage)
        attackRange = new StatIntRange(basis.attackRange)

        for i = 0 to TAG_AMOUNT
            if tags[i] == null
                tags[i] = new StatTag(basis.forTag((i castTo Tag)))

/* ---------------------------------- Stats --------------------------------- */

    override function getIcon() returns string
        return basis.getIcon()

    override function getName() returns string
        return basis.getName()

    override function getAttack() returns int
        return attack.value()

    override function getDefence() returns int
        return defence.value()

    override function getInitiative() returns int
        return initiative.value()

    override function getBaseDamage() returns realRange
        return baseDamage.value()
    
    override function getAttackRange() returns intRange
        return attackRange.value()
    
    override function getMaxAP() returns int
        return maxAP.value()

    override function getMaxMoveAP() returns int
        return maxMoveAP.value()
            
    override function getMaxHP() returns int
        return maxHp.value()

    override function forTag(Tag tag) returns StatTag
        return tags[(tag castTo int)]

    override function getDamageMulti(LinkedList<Tag> tags) returns real
        return tagsGetDamageMulti(this, tags)

    function getDamageMulti(vararg Tag tags) returns real
        let temp = new LinkedList<Tag>
        for tag in tags
            temp.add(tag)
        let result = getDamageMulti(temp)
        destroy temp
        return result

    override function getStatusEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetStatusEffectivness(this, tags)

    override function getSummonEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetSummonEffectivness(this, tags)

    override function forEachVisibleTalent(LLItrClosure<TalentStats> itr)
        talents.forEach() (Talent talent) ->
            if not talent.isHidden()
                itr.run(talent)
        destroy itr

    function getAttackDamage() returns realRange
        return baseDamage.value() * getAmount() * getDamageMulti(Tag.ATTACK, damageType2Tag(getDamageType()))

    override function getLeadership() returns int
        return basis.getLeadership()

    override function getDamageType() returns DamageType
        return basis.getDamageType()

    override function getResistance() returns Resistance
        return basis.getResistance()

    function getResistance(DamageType dType) returns int
        return resistance.getRes(dType)

    override function getRemainingAP() returns integer
        return remainingActionPoints

    override function getRemainingMoveAP() returns integer
        return remainingMoveActionPoints

    
    function getTalents() returns LinkedList<Talent>
        return talents

    override function getAmount() returns int
        return amount
    
    function getHp() returns int
        return hp

    function getStartAmount() returns int
        return startAmount

    function getWeight() returns real
        return basis.getWeight()
    
    /** setters  **/

    function setHp(int i)
        hp = i
        stack.setVisualHp(hp / getMaxHP())

    function removeAP(integer amount)
        remainingActionPoints -= amount
        if remainingActionPoints < 0
            remainingActionPoints = 0
        remainingMoveActionPoints -= amount
        if remainingMoveActionPoints < 0
            remainingMoveActionPoints = 0

    function adjustRemainingActionPointsToRemainingMoveActionPoints(integer amount)
        if remainingActionPoints <= remainingMoveActionPoints
            if amount < remainingActionPoints
                remainingActionPoints = amount
        else
            remainingActionPoints = remainingActionPoints - (remainingMoveActionPoints - amount)
        remainingMoveActionPoints = amount

    function addAmount(int i)
        amount += i

    function resetAP()
        remainingActionPoints = getMaxAP()
        remainingMoveActionPoints = getMaxMoveAP()

    function setSubAttackTarget(SubTargetList list)
        subAttackList = list

    function getSubAttackTargets(Cell reference, BoardStack mainTarget) returns LinkedList<SubTarget>
        if subAttackList != null
            return subAttackList.calculate(reference, mainTarget)
        return null

    ondestroy
        destroy attack
        destroy defence
        destroy baseDamage
        destroy initiative
        destroy maxAP
        destroy maxMoveAP
        destroy attackRange
        destroy maxHp
        destroy resistance

        for i = 0 to TAG_AMOUNT
            destroy tags[i]
            tags[i] = null

        if talents != null
            for talent in talents
                destroy talent
            destroy talents
        if subAttackList != null
            destroy subAttackList
            subAttackList = null