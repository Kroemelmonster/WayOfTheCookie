package InitiativeList

import BoardStack
import BoardController

import initlater Board
import BoardHero
import PlayerData
import UIMenuBoardConsole
import BoardEntity
import Tooltip
import BoardTrigger

public function int.compare(int other) returns int
    if this > other
        return 1
    else if this < other
        return -1
    return 0

public function bool.compare(bool other) returns int
    if this and not other
        return 1
    else if other and not this
        return -1
    return 0

public class InitiativeBoardEntity extends InitiativeEntity
    protected BoardEntity boardEntity = null

    protected int initiative = 0
    protected boolean didWait = false

    construct(BoardEntity boardEntity)
        super(50)
        this.boardEntity = boardEntity

    function getBoardEntity() returns BoardEntity
        return boardEntity

    function isWaiting() returns boolean
        return didWait

    function getConntrollingPlayer() returns Player
        return boardEntity.getConntrollingPlayer()

    function getIcon() returns string
        return boardEntity.getIcon()

    function toString() returns string
        return "Entity[ stack: "+boardEntity.toString()+" ]"

    protected function compareEquals(InitiativeBoardEntity other) returns int
        // the dude who waited is always behind the one who did not
        var result = didWait.compare(other.didWait)
        if result != 0
            return result
        // ok either both waited or both did not, now check initivate
        result = initiative.compare(other.initiative)
        if result != 0
            return result
        // ok both also hav the same init, just compare the ids
        return compareBasic(other)

    protected override function compare(InitiativeEntity other) returns int
        if other instanceof InitiativeBoardEntity
            return compareEquals(other castTo InitiativeBoardEntity)
        return order.compare(other.order)

    protected override function update()
        this.initiative = InitiativeList.initiativeToTime(boardEntity.getInitiative())

    protected override function onTime(InitiativeList list)
        BoardController.onTurnStart(boardEntity, isWaiting())

public class InitiativeEvent extends InitiativeEntity
    protected int time = 0
    protected BoardTrigger listener

    construct(int time, BoardTrigger listener)
        super(0)
        this.time = time
        this.listener = listener
        
    protected override function compare(InitiativeEntity other) returns int
        return compareBasic(other)

    protected override function update()

    protected override function onTime(InitiativeList list)
        listener.onEvent() -> 
            list.removeListener(this)
            list.next()

public abstract class InitiativeEntity
    protected int expiredTime = 0
    protected int order = 0

    construct(int order)
        this.order = order

    protected abstract function compare(InitiativeEntity other) returns int

    protected function compareBasic(InitiativeEntity other) returns int
        let result = order.compare(other.order)
        if result != 0
            return result
        return (this castTo int).compare(other castTo int)

    protected abstract function update()

    protected abstract function onTime(InitiativeList list)

public class InitiativeEntry
    protected InitiativeEntity entity
    protected int time

    construct(InitiativeEntity entity, int time)
        this.entity = entity
        this.time = time

    function getEnitity() returns InitiativeEntity
        return entity

    function getBoardEntity() returns InitiativeBoardEntity
        if entity instanceof InitiativeBoardEntity
            return entity castTo InitiativeBoardEntity
        return null

    function getTime() returns int
        return time

    function compare(InitiativeEntry other) returns int
        if this == other
            return 0
        let result = time.compare(other.time)
        if result != 0
            return result
        return entity.compare(other.entity)

    function toString() returns string
        return "Entry[ time: "+time.toString()+"]"


public class InitiativeList
    private static constant int ONE_ROUND = 1000
    // Show at minimum the very first 2 turn
    private static constant int MAX_TIME = ONE_ROUND * 2

    private LinkedList<InitiativeBoardEntity> entities = new LinkedList<InitiativeBoardEntity>
    private LinkedList<InitiativeEntry> entries = new LinkedList<InitiativeEntry>
    private LinkedList<InitiativeEvent> events = new LinkedList<InitiativeEvent>()
    private Board board

    private InitiativeBoardEntity current = null

    construct(Board board)
        this.board = board

    function addSequenzListener(int time, BoardTrigger listener) returns InitiativeEvent
        let entity = new InitiativeEvent(time, listener)
        events.add(entity)
        return entity

    function addHeroInitital(BoardHero hero)
        let entity = new InitiativeBoardEntity(hero)
        entity.update()
        entities.add(entity)

    function addStackInitial(BoardStack stack)
        let entity = new InitiativeBoardEntity(stack)
        entity.update()
        entities.add(entity)

    function addSummon(BoardStack stack)
        let entity = new InitiativeBoardEntity(stack)
        entity.update()
        entity.expiredTime = (entity.initiative * 0.5).round()
        entities.add(entity)
        update()

    function getEntity(BoardEntity searchEntity) returns InitiativeBoardEntity
        InitiativeBoardEntity found = null
        for entity in entities
            if entity.boardEntity == searchEntity
                found = entity

        return found

    function removeStack(BoardStack stack)
        let entity = getEntity(stack)
        if entity != null
            entities.remove(entity)

    function removeListener(InitiativeEvent eventListener)
        if events.has(eventListener)
            events.remove(eventListener)
            destroy eventListener

    function update()
        update(0, true)

    private function update(int elapsedTime, boolean updateUI)
        for entry in entries
            destroy entry
        entries.clear()

        for entity in entities
            entity.expiredTime += elapsedTime
            entity.update()
            insertBoardEntities(entity)
        for entity in events
            entity.expiredTime += elapsedTime
            entity.update()
            insertEventEntities(entity)

        if updateUI
            UIMenuBoardConsole.refresh(this)
        
        
    private function insertBoardEntities(InitiativeBoardEntity entity)
        var entryTime = -entity.expiredTime

        while entryTime < MAX_TIME
            entryTime += entity.initiative
            
            let entry = new InitiativeEntry(entity, entryTime)
            // insert at sorted Place
            var i = 0
            while i < entries.size() and entry.compare(entries.get(i)) > 0
                i++
            entries.addAt(entry, i)

    private function insertEventEntities(InitiativeEvent entity)
        let entryTime = entity.time - entity.expiredTime
        let entry = new InitiativeEntry(entity, entryTime)
        // insert at sorted Place
        var i = 0
        while i < entries.size() and entry.compare(entries.get(i)) > 0
            i++
        entries.addAt(entry, i)

    function isFirstTurn() returns boolean
        return current == null

    function getBoard() returns Board
        return board
    
    function getCurrent() returns InitiativeBoardEntity
        return current
    
    function iterator() returns LLIterator<InitiativeEntry>
        return entries.iterator()

    function get(int index) returns InitiativeEntry
        return entries.get(index)

    function reset()
        current = null
        for entry in entries
            destroy entry
        entries.clear()

        for entity in entities
            destroy entity
        entities.clear()


    /** Goes to the next Entry
        
        If this is the very first turn it will not change the entrys,
        this is because at the very first turn the currentTime is not at the first entrys time

        This Method will also refresh the UI and force the current Player to select the Stack
    **/
    function next()
        endTurn(false)

    /** same as next but with a waittime **/
    function wait()
        endTurn(true)

    function pushEntity(BoardEntity entity, int time)
        let initEntity = getEntity(entity)
        if initEntity != null
            initEntity.expiredTime -= time
            update()
    
    private function endTurn(boolean wait)
        if current != null
            if wait
                current.expiredTime = (current.initiative * 0.5).round()
                current.didWait = true
            else
                current.didWait = false
            if current.boardEntity != null
                BoardController.onTurnEnd(current.boardEntity, wait) ->
                    advanceTurn()
            else
                advanceTurn()
        else
            advanceTurn()

    private function advanceTurn()
        let next = entries.getFirst()
        var elapsedTime = next.time
        if elapsedTime < 0
            elapsedTime = 0
        
        update(elapsedTime, false)

        let currentEntry = entries.getFirst()
        entries.remove(currentEntry)
        let currentEntity = currentEntry.entity
        destroy currentEntry

        currentEntity.expiredTime = 0

        if currentEntity instanceof InitiativeBoardEntity
            current = currentEntity castTo InitiativeBoardEntity
        
        currentEntity.onTime(this)

        UIMenuBoardConsole.refresh(this)
        

    @inline
    static function initiativeToTime(int initivative) returns int
        return (ONE_ROUND / ((initivative / 10.0) + 1.0)).round()

    static function extendTooltip(Tooltip tt, int initiative)
        tt.addLine("Every time this units ends its turn it has to wait "
        + KStringUtils.primary(initiativeToTime(initiative))
        + " " + KStringUtils.secondary("timeunits") + " until it can act again")