package BoardStack

import StackType
import PlayerData
import Action
import Passive

import BoardStackStats
import StackStats
import Stack
import initlater BoardForce

public class BoardStack extends BoardEntity
    private StackType stackType
    private ArmyStack armyStack
    private Cell cell

    private texttag tt

    private LinkedList<Passive> passiveActions

    BoardStackStats stats

    construct(BoardForce boardForce, ArmyStack stack)
        super(EntityType.STACK, boardForce)
        this.passiveActions = new LinkedList<Passive>
        this.armyStack = stack
        stackType = stack.getStackType()
        stats = new BoardStackStats(this, stack.stats, stack.getAmount())
        stack.representive = this

        resetCurrentSelectedAction()

    override function getCell() returns Cell
        return cell

    override function getIcon() returns string
        return stackType.getIcon()

    override function getName() returns string
        return stackType.getName()

    override protected function hasPath() returns boolean
        return true

    function getStackType() returns StackType
        return stackType

    function getArmyStack() returns ArmyStack
        return armyStack

    function addPassive(Passive passive)
        passiveActions.add(passive)

    override function getMaxAP() returns int
        return stats.getMaxAP()

    override function getRemainingAP() returns int
        return stats.getRemainingAP()
        
    override function getRemainingMoveAP() returns int
        return stats.getRemainingMoveAP()

    override function removeAP(integer amount)
        stats.removeAP(amount)

    override function resetAP()
        stats.resetAP()

    function canAttack(BoardStack other) returns boolean
        return isEnemy(other)

    function place(Cell cell)
        this.cell = cell
        createBLZUnit()

        if not getBoard().getInitiative().isFirstTurn()
            SetUnitAnimation(u, "birth")

        resetAP()
        tt = createTTEx(getTextTagPos(), stats.getAmount().toString(), 10.0)


    private function createBLZUnit()
        u = createUnit(DUMMY_PLAYER, stackType.getUnitId(), cell.getCoord(), boardForce.getSide().toAngle())
        ..setColor(getPlayer().getColor())
        placeEntity()

    function replaceCell(Cell cell)
        this.cell.removeStack()
        this.cell = cell
        this.cell.setStack(this)

    override function isAlive() returns boolean
        return isOnBoard()
    
    function isOnBoard() returns boolean
        return this.cell != null

    override function getInitiative() returns int
        return stats.getInitiative()

    function kill()
        boardForce.triggerOnStackKilled(this)
        removeStackRelatedThingsFromBoard()
        u.kill()

    function isSelectByOwnPlayer() returns boolean
        return getPlayer().currentSelectedEntity == this

    function getCurrentOrder() returns int
        return u.getCurrentOrder()

    function setVisualHp(real percent)
        u.setHP(percent * 1000)

    function tick(real _delta)
        tt.setPos(getTextTagPos())
        tt.setText(stats.getAmount().toString(), 10.0)

    override function toString() returns string
        return getName() +" [" + stats.getAmount().toString() +"]"

    private function getTextTagPos() returns vec3
        var pos = u.getPos3Zero()
        pos.y -= 50
        pos.x += 33
        return pos

    private function removeStackRelatedThingsFromBoard()
        removeEntityRelatedThingsFromBoard()
        if cell != null
            cell.removeStack()
            cell = null

        if tt != null
            tt.destr()
            tt = null
    
    ondestroy
        removeStackRelatedThingsFromBoard()
        destroyEntity()

        if passiveActions != null
            for action in passiveActions
                destroy action
            destroy passiveActions
        if armyStack.isSummoned()
            destroy armyStack
        destroy stats
        destroyTriggers()
    
        u.remove()