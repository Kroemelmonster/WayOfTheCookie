package Cell

import HexagonalGridUtil
import BoardStack
import PlayerData
import Action

import initlater Board
import CellObstacle
import Globals

public enum CellPreviewColor
    NONE
    ACTABLE
    WALKABLE
    NEGATIVE
    POSITIVE


public enum CellHighlightColor
    NONE
    PATH

public enum CellHighlightRune
    NONE
    CAST


public class Cell
    private static constant colorA DEFAULT_COLOR = colorA(120, 120, 120, 50)
    private static constant colorA array PREVIEW_COLORS = [
        colorA(170, 170, 170, 140),
        colorA(170, 170, 170, 70),
        colorA(200, 20, 20, 180),
        colorA(20, 200, 20, 180)
    ]

    private static constant colorA array HIGHLIGHT_COLORS = [
        colorA(20, 200, 20, 180)
    ]

    private static constant OUTER_DEFAULT_COLOR = colorA(255, 255, 255, 150)
    

    private vec2 center
    //private effect innerModel
    //private effect outerModel
    private Board board
    private hex hex
    private BoardStack stack

    private image imageNoneOuter
    private image imageRiggedOuter
    private image imageInner
    private image imageRune

    private LinkedList<CellObstacle> obstacles
    private int blockedAmount = 0

    private real textHigh = 5.0
    // private texttag testTextTag

    construct(Board board, hex hex)
        this.board = board
        this.hex = hex
        obstacles = new LinkedList<CellObstacle>
        center = hex.toCoord() + board.getCoord()

        let size = 159.0
        imageInner = createImage("Splats/innerCell.dds", center, size, size)
        ..wrap()
        ..show()

        imageNoneOuter = createImage("Splats/outerCell.dds", center, size, size)
        ..wrap()
        ..show()
        ..setColor(OUTER_DEFAULT_COLOR)

        imageRiggedOuter = createImage("Splats/outerRiggedCell.dds", center, size, size)
        ..wrap()
        ..setColor(OUTER_DEFAULT_COLOR)


        imageRune = createImage("Splats/rune.dds", center, size - 50, size - 50)
        ..wrap()

        // testTextTag = createTTEx(vec3(center.x, center.y, textHigh), toString(), 7)

    function addObstacle(CellObstacle obstacle)
        obstacles.add(obstacle)

        if obstacle.doesBlock()
            addBlock(1)
        else
            updateObstacles()

    function removeObstacle(CellObstacle obstacle)
        let didBlock = obstacle.doesBlock()
        obstacles.remove(obstacle)

        if didBlock
            addBlock(-1)
        else
            updateObstacles()

    private function updateObstacles()
        if obstacles.isEmpty()
            imageNoneOuter.show()
            imageRiggedOuter.hide()
        else
            imageRiggedOuter.show()
            imageNoneOuter.hide()

        
    private function addBlock(int amount)
        blockedAmount += amount
        if isBlocked()
            imageInner.hide()
            imageRiggedOuter.hide()
            imageNoneOuter.hide()
            imageRune.hide()
        else
            imageInner.show()
            imageRune.hide()
            updateObstacles()

    function removeAllObstacle()
        let itr = obstacles.iterator()
        // TODO does this really work ? 
        if itr.hasNext()
            destroy itr.next()
        destroy itr

    function debugText(string text)
        createTTEx(vec3(center.x, center.y, textHigh), text, 7)
        textHigh += 20.0

    /** GETTER / SETTER **/
    function getHex() returns hex
        return hex

    function getCoord() returns vec2
        return center
    
    function getBoard() returns Board
        return board
    
    // TODO this should be entity
    function getStack() returns BoardStack
        return stack

    function isBlocked() returns boolean
        return blockedAmount > 0

    function hasObstacles() returns boolean
        return obstacles.size() > 0

    /** FUNCTIONALS **/
    function removeStack()
        this.stack = null
        //this.outerModel.setColor(OUTER_DEFAULT_COLOR)
        imageNoneOuter.setColor(OUTER_DEFAULT_COLOR)
        imageRiggedOuter.setColor(OUTER_DEFAULT_COLOR)
    
    function setStack(BoardStack stack)
        this.stack = stack
        //this.outerModel.setColor(stack.getPlayer().c)
        imageNoneOuter.setColor(stack.getPlayer().c)
        imageRiggedOuter.setColor(stack.getPlayer().c)

    function getACopyOfAllObstacles() returns LinkedList<CellObstacle>
        return obstacles.copy()

    function getCellMoveIntoCost(Cell fromCell) returns int
        if blockedAmount > 0
            return MOVE_COST_BLOCKED
        var value = 1
        for obstacle in obstacles
            value += obstacle.getAdditionalMoveIntoCost(fromCell, this)
        return value

    function getCellMoveOutCost(Cell toCell) returns int
        var value = 0
        for obstacle in obstacles
            value += obstacle.getAdditionalMoveOutCost(this, toCell)
        return value

    function placeStack(BoardStack stack)
        setStack(stack)
        stack.place(this)

    function isInRange(Cell other, intRange r) returns boolean
        return board.isInRange(this, other, r)

    function eachCellInRangeIterator(intRange r) returns CellRangeIterator
        return board.eachCellInRangeIterator(this, r)

    function forEachCellsInRange(intRange r, LLItrClosure<Cell> itr)
        board.forEachCellsInRange(this, r, itr)

    function getAllCellsInRange(intRange r) returns LinkedList<Cell>
        return board.getAllCellsInRange(this, r)

    function forEachNeighbour(LLItrClosure<Cell> itr)
        board.forEachNeighbour(this, itr)

    function getNeighbour(int index) returns Cell
        return board.getNeighbour(this, index)

    function getNeighbourSecure(int index) returns Cell
        return board.getNeighbourSecure(this, index)

    function getNeighbourIndex(Cell otherCell) returns int
        return board.getNeighbourIndex(this, otherCell)

    function getDistanceTo(Cell otherCell) returns int
        return board.getDistanceTo(this, otherCell)
    
    function toString() returns string
        return hex.toString()

    /**  VISUALS  **/
     // ! this method is already behind localPlayer
    function draw(Player p, Action action, boolean canGiveOrders, Cell currentSelectedCell)
        if blockedAmount > 0
            return
        var innerColor = DEFAULT_COLOR

        /*
        let entity = p.currentSelectedEntity
        if entity != null 
            let path = entity.getPathToCell(this)
            if path != null
                var text = ""
                if path.getCost() > 100
                    text = "# "
                let prev = path.getPrev()
                if prev != null
                    text += prev.getHex().col.toString() + " | " + prev.getHex().row.toString()
                test.setText(text, 13)
            else
                test.setText("--", 13)
        else
            test.setText("NA", 13)
            */
        
        if action != null
            if canGiveOrders
                let highlighColor = action.getHighlightColorForCell(p, this)
                if highlighColor != CellHighlightColor.NONE
                    innerColor = HIGHLIGHT_COLORS[(highlighColor castTo int) - 1]

                let rune = action.getHighlightRuneRuneForCell(p, this)
                // very simple
                if rune == CellHighlightRune.CAST
                    imageRune.show()
                else
                    imageRune.hide()

            if innerColor == DEFAULT_COLOR
                let previewColor = action.getPreviewColorForCell(this)
                if previewColor != CellPreviewColor.NONE
                    innerColor = PREVIEW_COLORS[(previewColor castTo int) - 1]
      
        if this == p.currentMousePosition.cell or this == currentSelectedCell
            let alpha = innerColor.alpha + 50
            imageInner.setColor(innerColor.withoutAlpha().withAlpha(alpha))
        else
            imageInner.setColor(innerColor)

       // innerModel.setColor(innerColor)
        //innerModel.setAlpha(alpha)
        
public class SingleCellIterator implements LinkedListIterator<Cell>
    private Cell cell

    construct(Cell cell)
        this.cell = cell

    override function hasNext() returns boolean
        return cell != null

    override function next() returns Cell
        let savedCell = cell
        cell = null
        return savedCell

    override function getIterations() returns int
        return 1