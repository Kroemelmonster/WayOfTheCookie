package BoardTrigger

import LinkedList

import initlater BoardStack
import initlater Cell
import initlater Damage
import initlater BoardEntity
import initlater PlayerData

public abstract class SequenzListenerStatus
    function continue(int status)
        continueInner(status)
        destroy this

    abstract function continueInner(int status)

public abstract class SequenzPlayerListener
    abstract function onEvent(Player p)

public abstract class BoardTriggerOnAnyCellEnter
    abstract function onEvent(BoardStack stack, Cell fromCell, Cell toCell, int prevCost, SequenzListenerData<int> next)

public abstract class BoardTriggerOnAnyCellLeave
    abstract function onEvent(BoardStack stack, Cell fromCell, Cell toCell, int prevCost, SequenzListenerData<int> next)

public abstract class BoardTriggerOnStackInteraction
    abstract function onEvent(BoardStack initator, BoardStack receiver, SequenzListener next)

public abstract class BoardTriggerOnDamage
    abstract function onEvent(BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)

public abstract class BoardTrigger
    abstract function onEvent(SequenzListener next)

public class EntityTrigger
    private LinkedList<BoardTriggerOnAnyCellEnter> onAnyCellEnter = new LinkedList<BoardTriggerOnAnyCellEnter>()
    private LinkedList<BoardTriggerOnAnyCellLeave> onAnyCellLeave = new LinkedList<BoardTriggerOnAnyCellLeave>()
    private LinkedList<BoardTrigger> onTurnStart = new LinkedList<BoardTrigger>()
    private LinkedList<BoardTrigger> onTurnEnd = new LinkedList<BoardTrigger>()
    private LinkedList<BoardTriggerOnStackInteraction> onAttacked = new LinkedList<BoardTriggerOnStackInteraction>()
    
    private LinkedList<BoardTriggerOnDamage> onBeforeDamageDealt = new LinkedList<BoardTriggerOnDamage>()
    private LinkedList<BoardTriggerOnDamage> onBeforeDamageTaken = new LinkedList<BoardTriggerOnDamage>()
    private LinkedList<BoardTriggerOnDamage> onDamageTaken = new LinkedList<BoardTriggerOnDamage>()
    private LinkedList<BoardTriggerOnDamage> onDamageDealt = new LinkedList<BoardTriggerOnDamage>()

    function addOnAnyCellEnter(BoardTriggerOnAnyCellEnter listener) returns BoardTriggerOnAnyCellEnter
        onAnyCellEnter.add(listener)
        return listener

    function removeOnAnyCellEnter(BoardTriggerOnAnyCellEnter listener)
        onAnyCellEnter.remove(listener)
        destroy listener

    function addOnAnyCellLeave(BoardTriggerOnAnyCellLeave listener) returns BoardTriggerOnAnyCellLeave
        onAnyCellLeave.add(listener)
        return listener

    function removeOnAnyCellLeave(BoardTriggerOnAnyCellLeave listener)
        onAnyCellLeave.remove(listener)
        destroy listener

    function addTurnStart(BoardTrigger listener) returns BoardTrigger
        onTurnStart.add(listener)
        return listener

    function removeOnTurnStart(BoardTrigger listener)
        onTurnStart.remove(listener)
        destroy listener

    function addTurnEnd(BoardTrigger listener) returns BoardTrigger
        onTurnEnd.add(listener)
        return listener

    function removeOnTurnEnd(BoardTrigger listener)
        onTurnEnd.remove(listener)
        destroy listener

    function addOnAttacked(BoardTriggerOnStackInteraction listener) returns BoardTriggerOnStackInteraction
        onAttacked.add(listener)
        return listener

    function removeOnAttacked(BoardTriggerOnStackInteraction listener)
        onAttacked.remove(listener)
        destroy listener

    function addOnBeforeDamageDealt(BoardTriggerOnDamage listener) returns BoardTriggerOnDamage
        onBeforeDamageDealt.add(listener)
        return listener

    function removeOnBeforeDamageDealt(BoardTriggerOnDamage listener)
        onBeforeDamageDealt.remove(listener)
        destroy listener

    function addOnBeforeDamageTaken(BoardTriggerOnDamage listener) returns BoardTriggerOnDamage
        onBeforeDamageTaken.add(listener)
        return listener

    function removeOnBeforeDamageTaken(BoardTriggerOnDamage listener)
        onBeforeDamageTaken.remove(listener)
        destroy listener

    function addOnDamageTaken(BoardTriggerOnDamage listener) returns BoardTriggerOnDamage
        onDamageTaken.add(listener)
        return listener

    function removeOnDamageTaken(BoardTriggerOnDamage listener)
        onDamageTaken.remove(listener)
        destroy listener

    function addOnDamageDealt(BoardTriggerOnDamage listener) returns BoardTriggerOnDamage
        onDamageDealt.add(listener)
        return listener

    function removeOnDamageDealt(BoardTriggerOnDamage listener)
        onDamageDealt.remove(listener)
        destroy listener

    function triggerOnBeforeDamageDealt(BoardEntity source, BoardStack target, SpecificDamageInstance instance, SequenzListener next)
        let copy = onBeforeDamageDealt.copy()
        let itr = copy.iterator()
        triggerOnBeforeDamageDealtInner(itr, source, target, instance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnBeforeDamageDealtInner(LLIterator<BoardTriggerOnDamage> iter, BoardEntity source, BoardStack target, SpecificDamageInstance instance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, instance) ->
                triggerOnBeforeDamageDealtInner(iter, source, target, instance, next)
        else
            next.continue()

    function triggerOnBeforeDamageTaken(BoardEntity source, BoardStack target, SpecificDamageInstance instance, SequenzListener next)
        let copy = onBeforeDamageTaken.copy()
        let itr = copy.iterator()
        triggerOnBeforeDamageTakenInner(itr, source, target, instance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnBeforeDamageTakenInner(LLIterator<BoardTriggerOnDamage> iter, BoardEntity source, BoardStack target, SpecificDamageInstance instance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, instance) ->
                triggerOnBeforeDamageTakenInner(iter, source, target, instance, next)
        else
            next.continue()

    function triggerOnDamageTaken(BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        let copy = onDamageTaken.copy()
        let itr = copy.iterator()
        triggerOnDamageTakenInner(itr, source, target, specificInstance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnDamageTakenInner(LLIterator<BoardTriggerOnDamage> iter, BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, specificInstance) ->
                triggerOnDamageTakenInner(iter, source, target, specificInstance, next)
        else
            next.continue()

    function triggerOnDamageDealt(BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        let copy = onDamageDealt.copy()
        let itr = copy.iterator()
        triggerOnDamageDealtInner(itr, source, target, specificInstance) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnDamageDealtInner(LLIterator<BoardTriggerOnDamage> iter, BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(source, target, specificInstance) ->
                triggerOnDamageDealtInner(iter, source, target, specificInstance, next)
        else
            next.continue()

    function triggerOnAttacked(BoardStack attacker, BoardStack defender, SequenzListener next)
        let copy = onAttacked.copy()
        let itr = copy.iterator()
        triggerOnAttackedInner(itr, attacker, defender) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnAttackedInner(LLIterator<BoardTriggerOnStackInteraction> iter, BoardStack attacker, BoardStack defender, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(attacker, defender) ->
                triggerOnAttackedInner(iter, attacker, defender, next)
        else
            next.continue()

    private function triggerOnTurnEndInner(LLIterator<BoardTrigger> iter, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent() ->
                triggerOnTurnEndInner(iter, next)
        else
            next.continue()

    function triggerOnTurnEnd(SequenzListener next)
        let copy = onTurnEnd.copy()
        let itr = copy.iterator()
        triggerOnTurnEndInner(itr) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnTurnStartInner(LLIterator<BoardTrigger> iter, SequenzListener next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent() ->
                triggerOnTurnStartInner(iter, next)
        else
            next.continue()

    function triggerOnTurnStart(SequenzListener next)
        let copy = onTurnStart.copy()
        let itr = copy.iterator()
        triggerOnTurnStartInner(itr) () ->
            destroy itr
            destroy copy
            next.continue()

    private function triggerOnAnyCellLeaveInner(LLIterator<BoardTriggerOnAnyCellLeave> iter, BoardStack stack, Cell fromCell, Cell toCell, int prevCostToMove, SequenzListenerData<int> next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(stack, fromCell, toCell, prevCostToMove) (newCost) ->
                triggerOnAnyCellLeaveInner(iter, stack, fromCell, toCell, newCost, next)
        else
            next.continue(prevCostToMove)

    function triggerOnAnyCellLeave(BoardStack stack, Cell fromCell, Cell toCell, int prevCost, SequenzListenerData<int> next)
        let copy = onAnyCellLeave.copy()
        let itr = copy.iterator()
        triggerOnAnyCellLeaveInner(itr, stack, fromCell, toCell, prevCost) (costToMove) ->
            destroy itr
            destroy copy
            next.continue(costToMove)

    private function triggerOnAnyCellEnterInner(LLIterator<BoardTriggerOnAnyCellEnter> iter, BoardStack stack, Cell fromCell, Cell toCell, int prevCostToMove, SequenzListenerData<int> next)
        if iter.hasNext()
            let listener = iter.next()
            listener.onEvent(stack, fromCell, toCell, prevCostToMove) (newCost) ->
                triggerOnAnyCellEnterInner(iter, stack, fromCell, toCell, newCost, next)
        else
            next.continue(prevCostToMove)

    function triggerOnAnyCellEnter(BoardStack stack, Cell fromCell, Cell toCell, int prevCost, SequenzListenerData<int> next)
        let copy = onAnyCellEnter.copy()
        let itr = copy.iterator()
        triggerOnAnyCellEnterInner(itr, stack, fromCell, toCell, prevCost) (costToMove) ->
            destroy itr
            destroy copy
            next.continue(costToMove)

    ondestroy
        for listener in onAnyCellEnter
            destroy listener
        destroy onAnyCellEnter
        for listener in onAnyCellLeave
            destroy listener
        destroy onAnyCellLeave
        for listener in onTurnStart
            destroy listener
        destroy onTurnStart
        for listener in onTurnEnd
            destroy listener
        destroy onTurnEnd
        for listener in onAttacked
            destroy listener
        destroy onAttacked
        for listener in onDamageTaken
            destroy listener
        destroy onDamageTaken
        for listener in onDamageDealt
            destroy listener
        destroy onDamageDealt