package StackType

import LinkedList

import StackSoundSet
import KUtil
import DamageAndResistance
import initlater TalentType
import Damage

public class Family
    string name

    construct(string name)
        this.name = name

    static Family TROLL = new Family("Troll")
    static Family GNOLL = new Family("Gnoll")
    static Family SKELTON = new Family("Skelton")
    static Family SASQUATCH = new Family("Sasquatch")

public interface HasEntityBasicStats
    function getIcon() returns string

    function getAttack() returns int
    function getDefence() returns int
    function getDamage() returns realRange
    function getRange() returns intRange
    function getInitiative() returns int
    function getMaxAP() returns int
    function getMaxMoveAP() returns int
    function getMaxHP() returns int
    
    function getLeadership() returns int
    function getDamageType() returns DamageType
    function getResistance() returns Resistance

    function forEachTalentStat(LLItrClosure<TalentStats> itr)

    // function getTalents() returns LinkedList<HasIconAndTooltip>

public class StackType implements HasEntityBasicStats
    integer unitId
    integer armyUnitId
    StackSoundSet soundSet
    string icon
    string name

    integer level
    integer leadership
    integer value
    int weight

    integer initiative
    integer actionPoints

    integer maxHp
    intRange damage
    intRange attackRange
    int attack
    int defence

    DamageType damageType = PHYSICAL
    private Resistance resistance = new Resistance()

    LinkedList<TalentType> talents = new LinkedList<TalentType>()

    LinkedList<Family> families = new LinkedList<Family>()

    construct(integer unitId, integer armyUnitId, string icon, StackSoundSet soundSet, string name, int level, int leadership, int value, int weight)
        this.unitId = unitId
        this.armyUnitId = armyUnitId
        this.soundSet = soundSet
        this.icon = icon
        this.name = name
        this.level = level
        this.leadership = leadership
        this.value = value
        this.weight = weight

    function addTalent(TalentType talent)
        talents.add(talent)

    function addFamily(Family fam)
        families.add(fam)
    
    function isFamily(Family fam) returns boolean
        return families.has(fam)

    override function forEachTalentStat(LLItrClosure<TalentStats> itr)
        talents.forEach() (TalentType talentType) ->
            if not talentType.isHidden()
                itr.run(talentType)
        destroy itr

    function getResistance(DamageType dType) returns int
        return resistance.getRes(dType)

    function setMaxHp(int value)
        maxHp = value
    
    function setDamage(intRange value)
        damage = value

    function getCost() returns int
        return value

    function setAttackRange(intRange value)
        attackRange = value

    function setInitiative(int value)
        initiative = value

    function setActionPoints(int value)
        actionPoints = value

    function setAttack(int value)
        attack = value

    function setDefence(int value)
        defence = value

    function addResistanceAgainst(DamageType dType, int value)
        resistance.addRes(dType, value)
    
    function setDamageType(DamageType value)
        this.damageType = value

    override function getIcon() returns string
        return icon

    override function getAttack() returns int
        return attack

    override function getDefence() returns int
        return defence

    override function getDamage() returns realRange
        return damage.toReal()

    override function getRange() returns intRange
        return attackRange

    override function getInitiative() returns int
        return initiative
    
    override function getMaxAP() returns int
        return actionPoints

    override function getMaxMoveAP() returns int
        return getMaxAP()
    
    override function getMaxHP() returns int
        return maxHp

    override function getLeadership() returns int
        return leadership

    override function getDamageType() returns DamageType
        return damageType

    override function getResistance() returns Resistance
        return resistance
    