package StackStats

import StackType

import initlater Stack
import HeroStats
import DamageAndResistance
import initlater TalentType
import Damage
import Stats

class StatStackHeroBased extends StatInt implements IsIntStat
    protected IsIntStat heroStat

    construct(int basis, IsIntStat heroStat)
        super(basis)
        this.heroStat = heroStat

    override function value() returns int
        return ((getBasis() + addBonus) * (multi / 100.0)).round()

    override function getBasis() returns int
        return super.getBasis() + heroStat.value()

public class StatIntWithBaseInt extends StatAbstract implements IsIntStat
    protected IsIntStat basis

    construct(IsIntStat basis)
        super()
        this.basis = basis

    override function value() returns int
        return ((getBasis() + addBonus) * (multi / 100.0)).round()

    override function getBasis() returns int
        return basis.value()

public class StackStats implements HasEntityStats, HasTags
    private Stack stack
    StackType stackType

    StatInt attack
    StatInt defence
    StatInt initiative
    StatInt maxAP
    StatIntWithBaseInt maxMoveAP
    StatInt maxHp
    StatRealRange baseDamage
    StatIntRange attackRange

    protected StatTag array[TAG_AMOUNT + 1] tags

    protected Resistance resistance
    protected LinkedList<TalentType> talents = new LinkedList<TalentType>()

    construct(Stack stack, StackType stackType, HeroStats heroStats)
        this.stackType = stackType
        this.stack = stack
        stackType.addAllTalentsTo(talents)
        resistance = new Resistance(stackType.getResistance())

        if heroStats != null
            attack = new StatStackHeroBased(stackType.getAttack(), heroStats.attack)
            defence = new StatStackHeroBased(stackType.getDefence(), heroStats.defence)
        else
            attack = new StatInt(stackType.getAttack())
            defence = new StatInt(stackType.getDefence())

        initiative = new StatInt(stackType.getInitiative())
        maxHp = new StatInt(stackType.getMaxHP())
        maxAP = new StatInt(stackType.getMaxAP())
        maxMoveAP = new StatIntWithBaseInt(maxAP)
        baseDamage = new StatRealRange(stackType.getBaseDamage())
        attackRange = new StatIntRange(stackType.getAttackRange())

        for i = 0 to TAG_AMOUNT
            if tags[i] == null
                tags[i] = new StatTag()
            

/* ---------------------------------- Stats --------------------------------- */

    override function getIcon() returns string
        return stackType.getIcon()

    override function getName() returns string
        return stackType.getName()

    override function getAttack() returns int
        return attack.value()

    override function getDefence() returns int
        return defence.value()

    override function getInitiative() returns int
        return initiative.value()

    override function getBaseDamage() returns realRange
        return baseDamage.value()
    
    override function getAttackRange() returns intRange
        return attackRange.value()
    
    override function getMaxAP() returns int
        return maxAP.value()

    override function getMaxMoveAP() returns int
        return maxMoveAP.value()
            
    override function getMaxHP() returns int
        return maxHp.value()

    override function forTag(Tag tag) returns StatTag
        return tags[(tag castTo int)]

    override function getDamageMulti(LinkedList<Tag> tags) returns real
        return tagsGetDamageMulti(this, tags)

    override function getStatusEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetStatusEffectivness(this, tags)

    override function getSummonEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetSummonEffectivness(this, tags)

    override function getLeadership() returns int
        return stackType.getLeadership()

    override function getDamageType() returns DamageType
        return stackType.getDamageType()

    override function getResistance() returns Resistance
        return resistance


    override function forEachVisibleTalent(LLItrClosure<TalentStats> itr)
        talents.forEach() (TalentType talentType) ->
            if not talentType.isHidden()
                itr.run(talentType)
        destroy itr

    function getDamageMulti(vararg Tag tags) returns real
        let temp = new LinkedList<Tag>
        for tag in tags
            temp.add(tag)
        let result = getDamageMulti(temp)
        destroy temp
        return result

    function getAttackDamage() returns realRange
        return baseDamage.value() * getAmount() * getDamageMulti(Tag.ATTACK, damageType2Tag(getDamageType()))

    function getResistance(DamageType dType) returns int
        return stackType.getResistance(dType) + resistance.getRes(dType)

    override function getAmount() returns int
        return stack.getAmount()

    function getWeight() returns real
        return stackType.getWeight().toReal()

    function getTalents() returns LinkedList<TalentType>
        return talents
            
    function addTalent(TalentType talent)
        talents.add(talent)

    function removeTalent(TalentType talent)
        talents.remove(talent)

    ondestroy
        destroy attack
        destroy defence
        destroy baseDamage
        destroy initiative
        destroy maxAP
        destroy maxMoveAP
        destroy attackRange
        destroy maxHp
        destroy resistance

        for i = 0 to TAG_AMOUNT
            destroy tags[i]
            tags[i] = null