package Hero

import HashMap

import Stack
import PlayerData
import UnitDefinition
import ClosureEvents
import World
import Orders
import NPC
import SkillTree
import HeroType
import HeroStats
import HeroData
import Inventory
import SpellBook
import StackType



public class Hero implements OnArmyStackChange
    static constant int array LEVELS = [1000, 2000, 3500, 6000]
    protected static constant HashMap<unit, Hero> unitHash = new HashMap<unit, Hero>
    
    HeroType typ
    Army army
    Inventory inventory
    SpellBook spellBook
    HeroStats stats
    HeroData data
    Int level = new Int(0)

    protected NPC currentInteract

    protected Player p
    protected SkillTree array[3] skillTrees
    protected unit u
    protected EventListener damagedListener
    protected EventListener orderUnitListener
    protected EventListener orderPointListener
    protected OnCastListener interactWithNPCListener

    construct(Player p, HeroType heroType)
        this.p = p
        this.typ = heroType

        stats = new HeroStats(this, heroType)
        army = new Army(stats, this)
        data = new HeroData(10, 10, 10, 9500, 4000, 15)
        inventory = new Inventory(this)
        spellBook = new SpellBook(this)

        u = createUnit(playerData[0].blzPlayer, heroType.getArmyUnitId(), playerData[0].blzPlayer.getStartLocation(), angle(0))
        unitHash.put(u, this)
        for i = 0 to skillTrees.length - 1
            skillTrees[i] = heroType.getSkillTreeType(i).createNew(this)

        damagedListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) ->
            if u.isInvulnerable() == false
                World.onHeroDamaged(this, GetEventDamageSource())

        orderUnitListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this, GetOrderTargetUnit())

        orderPointListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this)

        interactWithNPCListener = EventListener.onCast(u, AbilityTypesIds.TARGET_UNIT_SPELL) cb ->
            World.onHeroInteractWithNPC(this, GetSpellTargetUnit())

        p.hero = this
        select()

    private function select()
        p.blzPlayer.selectSingle(u)
        p.blzPlayer.setCameraTargetControllerNoZ(u, vec2(0.0, 0.0), false)    

    static function getFromUnit(unit u) returns Hero
        return unitHash.get(u)

    function getPlayer() returns Player
        return p

    function getCoord() returns vec2
        return u.getPos()

    function getLevel() returns int
        return level.self

    function getMaxAllowedControllableStackType(StackType typ) returns int
        return (data.getLeadership() / typ.getLeadership()).floor()

        /*
    function addExp(Reward reward)
        exp += reward.exp
        while exp >= LEVELS[level.self]
            exp -= LEVELS[level.self]
            let statsGain = 6 + level.self
            level.self ++
            
            reward.level ++
            // TODO here better rewards for level up
            let dominantPerc = GetRandomReal(0.35, 0.5)
            let otherPerc = GetRandomReal(0.4, 0.6)

            reward.mind += (statsGain * dominantPerc).round()
            reward.might += (statsGain * otherPerc * (1 - dominantPerc)).round()
            reward.magic += (statsGain * (1 - otherPerc) * (1 - dominantPerc)).round()

        // TODO 
        //might += reward.might
        //mind += reward.mind
        //magic += reward.magic

    function getCurrentLeadershipRequirementOfStackType(StackType stackType) returns int
        var req = 0
        for i = 0 to Army.MAX_SIZE - 1
            let stack = army.getStack(i)
            if stack != null and stack.getStackType() == stackType
                req += stackType.getLeadership() * stack.getAmount()

        return req

    function getMaxAmountOfStackTypeRemainingBasedOnLeadership(StackType stackType) returns int
        return ((leadership - getCurrentLeadershipRequirementOfStackType(stackType)) / stackType.getLeadership().toReal()).floor()
        */

    function setVulnearble(boolean flag)
        if not flag
            u.abortOrder()
            u.setInvulnerable(true)
        else
            u.setInvulnerable(false)

    function enable(boolean flag)
        setVulnearble(flag)
        if flag
            u.unpause()
            select()
        else
            u.pause()

    function issueNPC(NPC npc)
        u.issueTargetOrder(AbilityTypesIds.TARGET_UNIT_SPELL_ORDER, npc.getUnit())

    override protected function onArmyStackChange(ArmyStack armyStack)
        inventory.updateArmyStackStats(armyStack)

        for i = 0 to skillTrees.length - 1
            skillTrees[i].onStackUpdate(armyStack, true)
            for skill in skillTrees[i].skills
                skill.onStackUpdate(armyStack, true)

    function startInteract(NPC npc)
        currentInteract = npc
        npc.startInteraction(this)
    
    function stopInteract()
        if currentInteract != null
            currentInteract.endInteraction(this)
            currentInteract = null

    function getSkillTree(int i) returns SkillTree
        return skillTrees[i]

    function getSkillTree(SkillTreeType skillTreeType) returns SkillTree
        SkillTree result = null
        for int i = 0 to skillTrees.length - 1
            if skillTrees[i].isSkillTreeType(skillTreeType)
                result = skillTrees[i]

        return result

    function toString() returns string
        return "Hero [" + u.getName() +"]"

    ondestroy
        destroy damagedListener
        destroy orderUnitListener
        destroy orderPointListener
        destroy interactWithNPCListener
        destroy army
        destroy inventory
        unitHash.remove(u)