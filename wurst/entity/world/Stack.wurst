package Stack

import StackType
import StackStats
import initlater BoardStack
import HeroStats

public class Stack
    StackType typ
    protected int amount

    construct(StackType stackType, int amount)
        this.typ = stackType
        this.amount = amount

    function getAmount() returns int
        return amount

    function addAmount(int value)
        amount += value

    function toString() returns string
        return "Stack [" + typ.getName() + ", " + amount.toString() + "]"

public class ArmyStack extends Stack
    StackStats stats
    BoardStack representive
    protected boolean isSummoned

    construct(StackType stackType, int amount, boolean isSummoned, HeroStats heroStats)
        super(stackType, amount)
        stats = new StackStats(this, stackType, heroStats)
        this.isSummoned = isSummoned

    function isSummoned() returns boolean
        return isSummoned

    override function toString() returns string
        return "ArmyStack [" + typ.getName() + ", " + amount.toString() + "]"

public interface OnArmyStackChange
    function onArmyStackChange(ArmyStack stack)

public class Army
    static constant MAX_SIZE = 5
    protected ArmyStack array[MAX_SIZE] stacks
    protected HeroStats heroStats
    protected OnArmyStackChange onChange

    construct(HeroStats heroStats, OnArmyStackChange onArmyStackChange)
        this.heroStats = heroStats
        this.onChange = onArmyStackChange

    /** Only Use this for swapping **/
    function setStack(int i, ArmyStack stack)
        stacks[i] = stack

    protected function addStackAt(int i, StackType stackType, int amount) returns ArmyStack
        if stacks[i] == null
            var actualAmount = amount
            if actualAmount <= 0
                actualAmount = 1
            stacks[i] = new ArmyStack(stackType, actualAmount, false, heroStats)
            onChange.onArmyStackChange(stacks[i])
        return stacks[i]

    function addStackWithLeadershipAt(int i, StackType stackType, int leadership) returns ArmyStack
        let amount = (leadership / stackType.getLeadership()).round()
        return addStackAt(i, stackType, amount)

    function remove(int i)
        if stacks[i] != null
            destroy stacks[i]
            stacks[i] = null

    function getAt(int i) returns ArmyStack
        if i >= 0 and i < stacks.length - 1
            return stacks[i]
        return null

    function forEach(LLItrClosure<ArmyStack> itr)
        for i = 0 to stacks.length - 1
            if stacks[i] != null
                itr.run(stacks[i])
        destroy itr

    function has(Stack stack) returns boolean
        for i = 0 to stacks.length - 1
            if stack == stacks[i]
                return true
        return false

    function addAtFree(StackType stackType, int amount) returns ArmyStack
        let index = getNextFreeIndex()
        if index == -1
            return null
        return addStackAt(index, stackType, amount)

    function addAtFreeWithLeadership(StackType stackType, int leadership) returns ArmyStack
        let index = getNextFreeIndex()
        if index == -1
            return null
        return addStackWithLeadershipAt(index, stackType, leadership)
    
    function add(StackType stackType, int amount) returns ArmyStack
        let targetStack = getNextStackWithStackType(stackType)
        if targetStack != null
            targetStack.addAmount(amount)
            return null
        return addAtFree(stackType, amount)

    function createSummon(StackType stackType, int amount) returns ArmyStack
        let summon = new ArmyStack(stackType, amount, true, heroStats)
        onChange.onArmyStackChange(summon)
        return summon
    
    function getFirst() returns ArmyStack
        for i = 0 to stacks.length - 1
            if stacks[i] != null
                return stacks[i]
        return null

    function toString() returns string
        var str = "Army [ "
        for i = 0 to MAX_SIZE -1
            if stacks[i] != null
                str += stacks[i].toString() +", "
        str += " ]"
        return str

    private function getNextFreeIndex() returns int
        for i = 0 to MAX_SIZE - 1
            if stacks[i] == null
                return i
        return -1

    private function getNextStackWithStackType(StackType stackType) returns ArmyStack
        for i = 0 to MAX_SIZE - 1
            if stacks[i] != null and stacks[i].typ == stackType
                return stacks[i]
        return null
    
    ondestroy
        for i = 0 to MAX_SIZE -1
            if stacks[i] != null
                destroy stacks[i]