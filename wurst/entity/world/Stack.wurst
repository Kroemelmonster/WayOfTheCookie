package Stack

import StackType
import StackStats
import initlater BoardStack
import HeroStats

public class Stack
    protected StackType stackType
    protected int amount

    construct(StackType stackType, int amount)
        this.stackType = stackType
        this.amount = amount

    function getStackType() returns StackType
        return stackType

    function getAmount() returns int
        return amount

    function setAmount(int value)
        amount = value

    function toString() returns string
        return "Stack [" + stackType.name + ", " + amount.toString() + "]"

public class ArmyStack extends Stack
    StackStats stats
    BoardStack representive
    protected boolean isSummoned

    construct(StackType stackType, int amount, boolean isSummoned, HeroStats heroStats)
        super(stackType, amount)
        stats = new StackStats(this, stackType, heroStats)
        this.isSummoned = isSummoned

    function isSummoned() returns boolean
        return isSummoned

    override function toString() returns string
        return "ArmyStack [" + stackType.name + ", " + amount.toString() + "]"

public class Army
    static constant MAX_SIZE = 5
    protected ArmyStack array[MAX_SIZE] stacks
    protected HeroStats heroStats

    construct(HeroStats heroStats)
        this.heroStats = heroStats

    function setStack(int i, ArmyStack stack)
        stacks[i] = stack

    function addStackAt(int i, StackType stackType, int amount) returns ArmyStack
        if stacks[i] == null
            var actualAmount = amount
            if actualAmount <= 0
                actualAmount = 1
            stacks[i] = new ArmyStack(stackType, actualAmount, false, heroStats)
        return stacks[i]

    function addStackWithLeadershipAt(int i, StackType stackType, int leadership) returns ArmyStack
        let amount = (leadership / stackType.leadership).round()
        return addStackAt(i, stackType, amount)
        
    function remove(int i)
        if stacks[i] != null
            destroy stacks[i]
            stacks[i] = null

    function getStack(int i) returns ArmyStack
        if i >= 0 and i < MAX_SIZE
            return stacks[i]
        return null

    function hasStack(Stack stack) returns boolean
        for int i = 0 to MAX_SIZE - 1
            if stack == stacks[i]
                return true
        return false

    function addStackAtFree(StackType stackType, int amount) returns ArmyStack
        let index = getNextFreeIndex()
        if index == -1
            return null
        return addStackAt(index, stackType, amount)

    function addStackWithLeadershipAtFree(StackType stackType, int leadership) returns ArmyStack
        let index = getNextFreeIndex()
        if index == -1
            return null
        return addStackWithLeadershipAt(index, stackType, leadership)
    
    function addStack(StackType stackType, int amount) returns ArmyStack
        let targetStack = getNextStackWithStackType(stackType)
        if targetStack != null
            targetStack.setAmount(targetStack.getAmount() + amount)
            return null
        return addStackAtFree(stackType, amount)
    
    function getFirstStack() returns ArmyStack
        for int i = 0 to MAX_SIZE - 1
            if stacks[i] != null
                return stacks[i]
        return null

    function toString() returns string
        var str = "Army [ "
        for int i = 0 to MAX_SIZE -1
            if stacks[i] != null
                str += stacks[i].toString() +", "
        str += " ]"
        return str

    private function getNextFreeIndex() returns int
        for int i = 0 to MAX_SIZE - 1
            if stacks[i] == null
                return i
        return -1

    private function getNextStackWithStackType(StackType stackType) returns ArmyStack
        for int i = 0 to MAX_SIZE - 1
            if stacks[i] != null and stacks[i].stackType == stackType
                return stacks[i]
        return null
    
    ondestroy
        for int i = 0 to MAX_SIZE -1
            if stacks[i] != null
                destroy stacks[i]