package HostileArmy


import HashMap

import Stack
import StackType
import PlayerData
import ClosureEvents
import World

constant HashMap<unit, HostileArmy> map = new HashMap<unit, HostileArmy>

public class HostileArmy implements OnArmyStackChange
    Army army

    protected Player p
    protected unit u
    protected EventListener damagedListener

    construct()
        p = Player.NEUTRAL_AGGRESIVE
        army = new Army(null, this)

    function getPlayer() returns Player
        return p

    static function getFromUnit(unit u) returns HostileArmy
        return map.get(u)

    function enable(boolean flag)
        if flag == false
            u.pause()
            u.setInvulnerable(true)
            u.addAbility(LOCUST_ID)
        else
            u.unpause()
            u.setInvulnerable(false)
            u.removeAbility(LOCUST_ID)

    function toString() returns string
        return "Hostile "+army.toString()

    function placeWorld(unit chicken)
        let pos = chicken.getPos()
        chicken.remove()
        u = createUnit(p.blzPlayer, army.getFirst().typ.getArmyUnitId(), pos, angle(GetRandomReal(0, PI2)))
        map.put(u, this)

        damagedListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) ->
            if u.isInvulnerable() == false
                World.onHostileArmyDamaged(this, GetEventDamageSource())
    
    protected override function onArmyStackChange(ArmyStack armyStack)

    function kill()
        map.remove(u)
        u.unpause()
        u.kill()
        destroy this

    ondestroy
        destroy army
        destroy damagedListener

        

 