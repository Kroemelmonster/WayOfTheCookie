package HeroStats

import initlater Hero
import initlater HeroType
import Globals
import Damage
import Stats

public class StatHeroDamage extends StatAbstract implements IsRealRangeStat
    protected intRange basis
    protected Int heroLevel

    construct(intRange basis, Int heroLevel)
        super()
        this.heroLevel = heroLevel
        this.basis = basis

    override function value() returns realRange
        return ((getBasis() + addBonus) * (multi / 100.0))

    override function getBasis() returns realRange
        return (basis * (heroLevel.self + 2)).toReal()

class StatMaxMana extends StatInt implements IsIntStat
    protected IsIntStat wisdom

    construct(int basis, IsIntStat wisdom)
        super(basis)
        this.wisdom = wisdom

    override function value() returns int
        return ((getBasis() + addBonus) * (multi / 100.0)).round()

    override function getBasis() returns int
        return basis + (wisdom.value() * MANA_PER_WISDOWM)

class StatTagAttack extends StatTag
    protected IsIntStat attack

    construct(IsIntStat attack)
        super()
        this.attack = attack

    override function getDamageMultiPerc() returns real
        let attackMulti = (attack.value() * ATTACK_DAMAGE_PER_ATTACK) / 100.0
        return super.getDamageMultiPerc() + attackMulti
    

class StatTagSpell extends StatTag
    protected IsIntStat power
    protected IsIntStat wisdom

    construct(IsIntStat power, IsIntStat wisdom)
        super()
        this.power = power
        this.wisdom = wisdom

    override function getDamageMultiPerc() returns real
        let powerValue = (power.value() * DAMAGE_PER_SPELLPOWER) / 100.0
        return super.getDamageMultiPerc() + powerValue

    override function getStatusEffectivness() returns real
        let wisomValue = (wisdom.value() * SPELL_BUFF_EFFECT_PER_WISDOM) / 100.0
        return super.getStatusEffectivness() + wisomValue

public interface HasHeroStats
    function getDamageMulti(LinkedList<Tag> tags) returns real
    function getStatusEffectivness(LinkedList<Tag> tags) returns real
    function getSummonEffectivness(LinkedList<Tag> tags) returns real
    function getAttackDamage() returns realRange
    function getPower() returns IsIntStat
    function getAttack() returns IsIntStat

public class HeroStats implements HasHeroStats, HasTags
    private Hero hero
    HeroType heroType

    protected DamageType damageType

    StatInt attack
    StatInt defence
    StatInt power
    StatInt wisdom
    StatInt initiative
    StatInt maxAP
    StatMaxMana maxMana
    StatHeroDamage baseAttackDamage

    protected StatTag array[TAG_AMOUNT + 1] tags

    protected int mana

    construct(Hero hero, HeroType heroType)
        this.hero = hero
        this.heroType = heroType

        damageType = heroType.getDamageType()

        attack = new StatInt(heroType.getAttack())
        defence = new StatInt(heroType.getDefence())
        power = new StatInt(heroType.getPower())
        wisdom = new StatInt(heroType.getWisdom())
        initiative = new StatInt(heroType.getInitiative())
        maxAP = new StatInt(heroType.getAP())
        maxMana = new StatMaxMana(0, wisdom)
        baseAttackDamage = new StatHeroDamage(heroType.getDamage(), hero.level)

        tags[(Tag.ATTACK castTo int)] = new StatTagAttack(attack)
        tags[(Tag.SPELL castTo int)] = new StatTagSpell(power, wisdom)

        for i = 0 to TAG_AMOUNT
            if tags[i] == null
                tags[i] = new StatTag()

        mana = maxMana.value()

    override function getPower() returns IsIntStat
        return power

    override function getAttack() returns IsIntStat
        return attack

    override function forTag(Tag tag) returns StatTag
        return tags[(tag castTo int)]

    override function getDamageMulti(LinkedList<Tag> tags) returns real
        return tagsGetDamageMulti(this, tags)

    function getDamageMulti(vararg Tag tags) returns real
        let temp = new LinkedList<Tag>
        for tag in tags
            temp.add(tag)
        let result = getDamageMulti(temp)
        destroy temp
        return result

    override function getStatusEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetStatusEffectivness(this, tags)

    override function getSummonEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetSummonEffectivness(this, tags)

    override function getAttackDamage() returns realRange
        return baseAttackDamage.value() * getDamageMulti(Tag.ATTACK, damageType2Tag(getDamageType()))

    function getMana() returns int
        return mana

    function addMana(int amount)
        mana += amount
        if mana > maxMana.value()
            mana = maxMana.value()
        else if mana < 0
            mana = 0

    function getDamageType() returns DamageType
        return damageType

    ondestroy
        Log.error("tried to destroy herostats ???")