package BoardHero

import Hero
import PlayerData
import initlater HeroActionAttack
import initlater HeroActionSkip
import initlater BoardHeroStats
import HeroType
import initlater SpellAction
import initlater BoardForce

public class BoardHero extends BoardEntity
    private static int MAX_QUICKCAST_SPELLS = 4
    Hero hero

    BoardHeroStats stats

    protected LinkedList<SpellAction> quickCastSpells = new LinkedList<SpellAction>
    
    construct(Hero hero, vec2 coord, BoardForce boardForce)
        super(EntityType.HERO, boardForce)
        this.hero = hero
        stats = new BoardHeroStats(this, hero.stats)

        createBLZUnit(coord)

        addAction(HeroActionSkip.TYPE.create(this))
        addAction(HeroActionAttack.TYPE.create(this))

        hero.spellBook.forEach() spell ->
            addAction(spell.create(this))

        resetAP()
        resetCurrentSelectedAction()

    private function createBLZUnit(vec2 coord)
        u = createUnit(DUMMY_PLAYER, hero.typ.getUnitId(), coord , boardForce.getSide().toAngle())
        ..setColor(hero.getPlayer().blzPlayer.getColor())

        placeEntity()

    override function getCell() returns Cell
        return null

    override function getPlayer() returns Player
        return hero.getPlayer()

    override function getIcon() returns string
        return hero.typ.getIcon()

    override function getName() returns string
        return hero.typ.getName()

    override protected function hasPath() returns boolean
        return false

    override function getInitiative() returns int
        return stats.initiative.value()

    override function getMaxAP() returns int
        return stats.maxAP.value()

    override function getRemainingAP() returns int
        return stats.getRemainingActionPoints()

    override function getRemainingMoveAP() returns int
        return getRemainingAP()

    override function removeAP(integer amount)
        stats.removeAP(amount)

    function getMana() returns int
        return stats.getMana()

    function payMana(int amount)
        stats.addMana(-amount)

    function addQuickCast(SpellAction action)
        if quickCastSpells.has(action)
            return
        if quickCastSpells.size() >= MAX_QUICKCAST_SPELLS
            removeQuickCast(quickCastSpells.getFirst())
        quickCastSpells.add(action)

    function removeQuickCast(SpellAction action)
        if quickCastSpells.has(action)
            quickCastSpells.remove(action)

    function isQuickCast(SpellAction action) returns boolean
        return quickCastSpells.has(action)

    override function resetAP()
        stats.resetAP()

    override function isAlive() returns boolean
        return true

    override function toString() returns string
        return "BoardHero [ level : "+hero.getLevel().toString()+"]"

    ondestroy
        destroyEntity()
        removeEntityRelatedThingsFromBoard()
        
        destroyTriggers()
        u.remove()

        destroy quickCastSpells
