package BoardHero
import Hero
import PlayerData
import BoardEntity
import LinkedList
import Action
import Cell
import DefaultAction
import Abilities
import AttachmentPoints
import initlater Board
import initlater HeroAttackAction
import initlater HeroSkipAction
import initlater HeroOpenSpellBookAction
import AbilityIds
import initlater BoardHeroStats
import HeroType
import initlater Spell

public class BoardHero extends BoardEntity
    Hero hero

    BoardHeroStats stats
    private HeroType heroType

    private LinkedList<Action> actions
    private DefaultAction defaultAction
    private integer currentSelectedAction = -1
    
    construct(Hero hero, vec2 coord, Board board, int side)
        super(EntityType.HERO, board)
        this.hero = hero
        this.stats = new BoardHeroStats(this, hero.stats)
        this.heroType = hero.getType()

        createBLZUnit(coord, side)

        actions = new LinkedList<Action>()
        defaultAction = new HeroAttackAction(this)
        actions.add(new HeroSkipAction(this))
        actions.add(new HeroOpenSpellBookAction(this))

        for SpellType spell in hero.spells
            actions.add(spell.create(this))

        resetActionPoints()

    private function createBLZUnit(vec2 coord, int side)
        u = createUnit(DUMMY_PLAYER, heroType.unitId, coord , angle(PI * side))
        u.setColor(hero.getPlayer().blzPlayer.getColor())

        placeEntity()

    @inline
    override function getCell() returns Cell
        return null

    override function getPlayer() returns Player
        return hero.getPlayer()

    override function getIcon() returns string
        return hero.getType().icon

    @inline
    override function setCurrentAction(Action action)
        currentSelectedAction = actions.indexOf(action)

    @inline
    override function getActions() returns LinkedList<Action>
        return actions

    override function getAction(int index) returns Action
        if index == -1
            return defaultAction
        return actions.get(index)

    @inline
    override function getCurrentAction() returns Action
        return getAction(currentSelectedAction)

    @inline
    override function getDefaultAction() returns DefaultAction
        return defaultAction

    @inline
    override function getInitiative() returns int
        return stats.getInitiative()

    @inline
    override function getMaxActionPoints() returns int
        return stats.getMaxActionPoints()

    @inline
    override function getRemainingActionPoints() returns int
        return stats.getRemainingActionPoints()

    @inline
    override function removeAP(integer amount)
        stats.removeAP(amount)

    @inline
    function getMana() returns int
        return stats.mana

    @inline
    function payMana(int amount)
        stats.payMana(amount)

    @inline
    override function resetActionPoints()
        stats.resetActionPoints()

    override function isAlive() returns boolean
        return true

    @inline
    override function toString() returns string
        return "BoardHero [ level : "+hero.getLevel().toString()+"]"

    override function resetCurrentSelectedAction() returns boolean
        if currentSelectedAction == -1
            return false
        currentSelectedAction = -1
        return true

    ondestroy
        destroyEntity()
        removeEntityRelatedThingsFromBoard()
            
        if actions != null
            for action in actions
                destroy action
            destroy actions
            
        destroyTriggers()
        u.remove()
