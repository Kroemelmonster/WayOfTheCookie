package BoardHero
import Hero
import PlayerData
import BoardEntity
import LinkedList
import Action
import Cell
import DefaultAction
import Abilities
import AttachmentPoints
import initlater Board
import initlater HeroAttackAction
import initlater HeroSkipAction
import AbilityIds
import initlater BoardHeroStats
import HeroType
import initlater SpellAction
import ActionType
import Spell

public class BoardHero extends BoardEntity
    private static int MAX_QUICKCAST_SPELLS = 3
    Hero hero

    BoardHeroStats stats
    private HeroType heroType
    
    construct(Hero hero, vec2 coord, Board board, int side)
        super(EntityType.HERO, board)
        this.hero = hero
        this.stats = new BoardHeroStats(this, hero.stats)
        this.heroType = hero.getType()

        createBLZUnit(coord, side)

        addAction(new HeroSkipAction(this))
        addAction(new HeroAttackAction(this))

        hero.forEachSpell() spell ->
            addAction(spell.create(this))

        resetActionPoints()
        resetCurrentSelectedAction()

    private function createBLZUnit(vec2 coord, int side)
        u = createUnit(DUMMY_PLAYER, heroType.unitId, coord , angle(PI * side))
        ..setColor(hero.getPlayer().blzPlayer.getColor())

        placeEntity()

    override function getCell() returns Cell
        return null

    override function getPlayer() returns Player
        return hero.getPlayer()

    override function getIcon() returns string
        return hero.getType().icon

    override function getName() returns string
        return hero.getType().name

    override function getInitiative() returns int
        return stats.getInitiative()

    override function getMaxActionPoints() returns int
        return stats.getMaxActionPoints()

    override function getRemainingActionPoints() returns int
        return stats.getRemainingActionPoints()

    override function removeAP(integer amount)
        stats.removeAP(amount)

    function getMana() returns int
        return stats.mana

    function payMana(int amount)
        stats.payMana(amount)

    function updateQuickcast()
        var index = 0
        for action in actions
            if action.hasOption(ActionTypeOption.SPELL)
                let spell = action castTo SpellAction
                if spell.isQuickcast()
                    index++
                    if index > MAX_QUICKCAST_SPELLS
                        spell.activateQuickcast(false)


    override function resetActionPoints()
        stats.resetActionPoints()

    override function isAlive() returns boolean
        return true

    override function toString() returns string
        return "BoardHero [ level : "+hero.getLevel().toString()+"]"

    ondestroy
        destroyEntity()
        removeEntityRelatedThingsFromBoard()
        
        destroyTriggers()
        u.remove()
