package Hero

import HashMap

import Stack
import PlayerData
import StackType
import UnitDefinition
import ClosureEvents
import World
import Orders
import NPC
import KItem
import SkillTree
import FightResult
import KUtil
import HeroType
import HeroStats
import LinkedList
import initlater Spell
import HeroData
import ActionType

constant HashMap<unit, Hero> map = new HashMap<unit, Hero>

public class Hero
    static constant int array LEVELS = [1000, 2000, 3500, 6000]

    protected unit u
    protected HeroType heroType
    HeroStats stats


    protected int unitboardid
    protected string icon
    protected Player p
    protected int gold
    protected int mana = 10
    protected int maxMana = 20
    protected int leadership

    protected int exp = 0
    protected int level = 0

    protected int attack = 0
    protected int defence = 0

    LinkedList<ActionType> spells
    protected SkillTree array[3] skillTrees

    protected KItem array[MAX_ACTIVE_ITEMS] items
    protected KItem array[MAX_BACKPACK_ITEMS] backpack

    protected Army army
    protected HeroData data

    protected NPC currentInteract

    protected EventListener damagedListener
    protected EventListener orderUnitListener
    protected EventListener orderPointListener
    protected OnCastListener interactWithNPCListener

    construct(Player p, HeroType heroType)
        this.p = p
        this.heroType = heroType
        this.stats = new HeroStats(this, heroType)
        spells = new LinkedList<ActionType>()

        u = createUnit(playerData[0].blzPlayer, heroType.armyUnitId, playerData[0].blzPlayer.getStartLocation(), angle(0))
        army = new Army(stats)
        data = new HeroData(10, 10, 10)
        map.put(u, this)
        for i = 0 to skillTrees.length - 1
            skillTrees[i] = heroType.skillTrees[i].createNew(this)

        damagedListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) ->
            if u.isInvulnerable() == false
                World.onHeroDamaged(this, GetEventDamageSource())

        orderUnitListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this, GetOrderTargetUnit())

        orderPointListener = EventListener.add(u, EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
            if GetIssuedOrderId() == SpecialOrders.smart
                World.onHeroSmartOrder(this)

        interactWithNPCListener = EventListener.onCast(u, AbilityTypesIds.TARGET_UNIT_SPELL) cb ->
            World.onHeroInteractWithNPC(this, GetSpellTargetUnit())

        gold = 9500
        leadership = 4000

        p.hero = this
        select()

    function getType() returns HeroType
        return heroType

    function getUnitType() returns int
        return unitboardid

    private function select()
        p.blzPlayer.selectSingle(u)
        p.blzPlayer.setCameraTargetControllerNoZ(u, vec2(0.0, 0.0), false)    

    static function getFromUnit(unit u) returns Hero
        return map.get(u)

    function createSummon(StackType stackType, int amount) returns ArmyStack
        let summon = new ArmyStack(stackType, amount, true, stats)
        updateArmyStackStats(summon)
        return summon
    
    function addStack(StackType stackType, int amount)
        let armyStack = army.addStack(stackType, amount)
        updateArmyStackStats(armyStack)

    function addStackAtFree(StackType stackType, int amount)
        let armyStack = army.addStackAtFree(stackType, amount)
        updateArmyStackStats(armyStack)

    function getArmy() returns Army
        return army

    function getData() returns HeroData
        return data

    function getPlayer() returns Player
        return p

    function getCoord() returns vec2
        return u.getPos()
        
    function getGold() returns int
        return gold

    function getLevel() returns int
        return level

    function getExp() returns int
        return exp

    function addExp(Reward reward)
        exp += reward.exp
        while exp >= LEVELS[level]
            exp -= LEVELS[level]
            let statsGain = 6 + level
            level ++
            
            reward.level ++
            // TODO here better rewards for level up
            let dominantPerc = GetRandomReal(0.35, 0.5)
            let otherPerc = GetRandomReal(0.4, 0.6)

            reward.mind += (statsGain * dominantPerc).round()
            reward.might += (statsGain * otherPerc * (1 - dominantPerc)).round()
            reward.magic += (statsGain * (1 - otherPerc) * (1 - dominantPerc)).round()

        // TODO 
        //might += reward.might
        //mind += reward.mind
        //magic += reward.magic

    function addGold(int amount)
        gold += amount

    function getLeadership() returns int
        return leadership

    function getMaxAmountOfStackTypeBasedOnGold(StackType stackType) returns int
        return (gold / stackType.getCost()).floor()

    function getCurrentLeadershipRequirementOfStackType(StackType stackType) returns int
        var req = 0
        for i = 0 to Army.MAX_SIZE - 1
            let stack = army.getStack(i)
            if stack != null and stack.getStackType() == stackType
                req += stackType.leadership * stack.getAmount()

        return req

    function getMaxAmountOfStackTypeRemainingBasedOnLeadership(StackType stackType) returns int
        return ((leadership - getCurrentLeadershipRequirementOfStackType(stackType)) / stackType.leadership.toReal()).floor()

    function setVulnearble(boolean flag)
        if not flag
            u.abortOrder()
            u.setInvulnerable(true)
        else
            u.setInvulnerable(false)

    function enable(boolean flag)
        setVulnearble(flag)
        if flag
            u.unpause()
            select()
        else
            u.pause()

    function issueNPC(NPC npc)
        u.issueTargetOrder(AbilityTypesIds.TARGET_UNIT_SPELL_ORDER, npc.getUnit())

    private function updateArmyStackStats(ArmyStack armyStack)
        if armyStack == null
            return

        for int i = 0 to items.length - 1
            if items[i] != null
                items[i].onStackUpdate(armyStack, true)

        for int i = 0 to skillTrees.length - 1
            skillTrees[i].onStackUpdate(armyStack, true)
            for skill in skillTrees[i].skills
                skill.onStackUpdate(armyStack, true)

    function startInteract(NPC npc)
        currentInteract = npc
        npc.startInteraction(this)
    
    function stopInteract()
        if currentInteract != null
            currentInteract.endInteraction(this)
            currentInteract = null

    function getSkillTree(int i) returns SkillTree
        return skillTrees[i]

    function getSkillTree(SkillTreeType skillTreeType) returns SkillTree
        SkillTree result = null
        for int i = 0 to skillTrees.length - 1
            if skillTrees[i].isSkillTreeType(skillTreeType)
                result = skillTrees[i]

        return result

    function addSpell(ActionType spellType)
        // TODO maybe make safe that this only accepts spells
        spells.add(spellType)

    function getActiveItem(int index) returns KItem
        if index < 0 or index >= items.length
            return null
        return items[index]

    function equiqItemAt(int index, KItem kItem)
        if kItem == null
            unequipItemAt(index)
            return
        items[index] = kItem
        kItem.onEquip(this, true)
        for int i = 0 to Army.MAX_SIZE - 1
            let armyStack = army.getStack(i)
            if armyStack != null
                kItem.onStackUpdate(armyStack, true)
        
    function unequipItemAt(int index)
        let kItem = items[index]
        if kItem == null
            return
        kItem.onEquip(this, false)
        for int i = 0 to Army.MAX_SIZE - 1
            let armyStack = army.getStack(i)
            if armyStack != null
                kItem.onStackUpdate(armyStack, false)
        items[index] = null

    function getBackPackItem(int index) returns KItem
        if index < 0 or index >= backpack.length
            return null
        return backpack[index]
    
    function setBackPackItem(int index, KItem kItem)
        backpack[index] = kItem
        
    function removeBackPackItem(int index)
        backpack[index] = null

    function toString() returns string
        return "Hero [" + u.getName() +"]"

    ondestroy
        destroy damagedListener
        destroy orderUnitListener
        destroy orderPointListener
        destroy interactWithNPCListener
        destroy army
        map.remove(u)