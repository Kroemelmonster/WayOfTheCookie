package BoardHeroStats

import HeroStats
import BoardHero
import Damage
import Stats
import Globals

class StatTagAttack extends StatTag
    protected IsIntStat attack

    construct(StatTag basis, IsIntStat attack)
        super(basis)
        this.attack = attack

    override function getDamageMultiPerc() returns real
        let attackMulti = (attack.value() * ATTACK_DAMAGE_PER_ATTACK) / 100.0
        return super.getDamageMultiPerc() + attackMulti
    

class StatTagSpell extends StatTag
    protected IsIntStat power
    protected IsIntStat wisdom

    construct(StatTag basis, IsIntStat power, IsIntStat wisdom)
        super(basis)
        this.power = power
        this.wisdom = wisdom

    override function getDamageMultiPerc() returns real
        let powerValue = (power.value() * DAMAGE_PER_SPELLPOWER) / 100.0
        return super.getDamageMultiPerc() + powerValue

    override function getStatusEffectivness() returns real
        let wisdomValue = (wisdom.value() * SPELL_BUFF_EFFECT_PER_WISDOM) / 100.0
        return super.getStatusEffectivness() + wisdomValue

public class BoardHeroStats implements HasHeroStats, HasTags
    private HeroStats basis
    private BoardHero hero

    int remainingActionPoints

    StatInt attack
    StatInt defence
    StatInt power
    StatInt wisdom
    StatInt initiative
    StatInt maxAP
    StatHeroDamage baseAttackDamage

    protected StatTag array[TAG_AMOUNT + 1] tags

    construct(BoardHero hero, HeroStats basis)
        this.basis = basis
        this.hero = hero

        attack = new StatInt(basis.attack)
        defence = new StatInt(basis.defence)
        power = new StatInt(basis.power)
        wisdom = new StatInt(basis.wisdom)
        initiative = new StatInt(basis.initiative)
        maxAP = new StatInt(basis.maxAP)
        baseAttackDamage = new StatHeroDamage(basis.heroType.getDamage(), hero.hero.level)

        tags[(Tag.ATTACK castTo int)] = new StatTagAttack(basis.forTag(Tag.ATTACK), attack)
        tags[(Tag.SPELL castTo int)] = new StatTagSpell(basis.forTag(Tag.SPELL), power, wisdom)

        for i = 0 to TAG_AMOUNT
            if tags[i] == null
                tags[i] = new StatTag(basis.forTag((i castTo Tag)))

    override function forTag(Tag tag) returns StatTag
        return tags[(tag castTo int)]

    override function getDamageMulti(LinkedList<Tag> tags) returns real
        return tagsGetDamageMulti(this, tags)

    function getDamageMulti(vararg Tag tags) returns real
        let temp = new LinkedList<Tag>
        for tag in tags
            temp.add(tag)
        let result = getDamageMulti(temp)
        destroy temp
        return result

    override function getStatusEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetStatusEffectivness(this, tags)

    override function getSummonEffectivness(LinkedList<Tag> tags) returns real
        return tagsGetSummonEffectivness(this, tags)
        
    override function getAttackDamage() returns realRange
        return baseAttackDamage.value() * getDamageMulti(Tag.ATTACK, damageType2Tag(getDamageType()))

    override function getPower() returns IsIntStat
        return power

    override function getAttack() returns IsIntStat
        return attack

    function getDamageType() returns DamageType
        return basis.getDamageType()

    function getMana() returns int
        return basis.getMana()

    function getRemainingActionPoints() returns integer
        return remainingActionPoints
    
    function removeAP(integer amount)
        remainingActionPoints -= amount
        if remainingActionPoints < 0
            remainingActionPoints = 0

    function resetAP()
        remainingActionPoints = maxAP.value()

    function addMana(int amount)
        basis.addMana(amount)

    ondestroy
        destroy attack
        destroy defence
        destroy power
        destroy wisdom
        destroy initiative
        destroy maxAP
        destroy baseAttackDamage

        for i = 0 to TAG_AMOUNT
            destroy tags[i]
            tags[i] = null