package BoardEntity
import PlayerData
import LinkedList
import Action
import initlater Board
import initlater BoardStack
import initlater Cell
import initlater BoardHero
import ClosureEvents
import Status
import UnitDefinition
import Abilities
import AttachmentPoints
import BoardTrigger

public enum EntityType
    STACK
    HERO

public abstract class BoardEntity
    protected Board board
    protected unit u
    private effect highlightEffect
    private EntityType entityType
    private LinkedList<Status> stati

    private EventListener castListener

    private OnCastListener unitOnCastListener
    private OnCastListener unitOnCastImmediateListener
    private EventListener damageTakenListener
    private EventListener unitDamageTakenListener

    private EntityTrigger triggers

    construct(EntityType entityType, Board board)
        this.entityType = entityType
        this.board = board
        this.stati = new LinkedList<Status>
        this.triggers = new EntityTrigger()

    @inline
    function getBoard() returns Board
        return board

    @inline
    function getType() returns EntityType
        return entityType

    abstract function getCell() returns Cell

    abstract function getPlayer() returns Player

    abstract function getIcon() returns string

    abstract function getActions() returns LinkedList<Action>
    
    abstract function getAction(int index) returns Action

    abstract function getCurrentAction() returns Action

    abstract function getDefaultAction() returns Action

    abstract function setCurrentAction(Action action)

    abstract function resetCurrentSelectedAction() returns boolean

    abstract function getMaxActionPoints() returns int

    abstract function getRemainingActionPoints() returns int

    abstract function addActionPoints(int amount)

    abstract function resetActionPoints()

    function canStillAct() returns boolean
        return getRemainingActionPoints() > 0

    abstract function isAlive() returns boolean

    abstract function toString() returns string

    abstract function getInitiative() returns int

    @inline
    function getTriggers() returns EntityTrigger
        return triggers

    @inline
    function statusIterator() returns LLIterator<Status>
        return stati.iterator()

    @inline
    function getStatus(int index) returns Status
        return stati.get(index)
        
    @inline
    function addStatus(Status status)
        stati.add(status)

    @inline
    function removeStatus(Status status)
        stati.remove(status)

    @inline
    function getPos3Real() returns vec3
        return u.getPos().withTerrainZ(u.getFlyHeight() + 20.0)

    @inline
    function issuePointOrder(string order, Cell cell)
        u.issuePointOrder(order, cell.getCoord())

    @inline
    function issueImmediateOrder(string order)
        u.issueImmediateOrder(order)

    @inline
    function issuePointOrder(string order, vec2 pos)
        u.issuePointOrder(order, pos)
    
    @inline
    function issueTargetOrder(string order, BoardEntity target)
        u.issueTargetOrder(order, target.u)

    @inline
    function enableAbility(int id, boolean flag)
        u.disableAbility(id, flag == false, false)

    @inline
    function doOnNextCast(EventListener listener)
        castListener = listener

    function doOnNextDamageTaken(EventListener listener)
        damageTakenListener = listener

    function setHighlight(boolean flag)
        if flag == false or highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null
        if flag
            highlightEffect = addEffect(Abilities.aneuTarget, u, AttachmentPoints.overhead)

    function flashEffectOnPos(string sfx)
        flashEffect(sfx, u.getPos())

    function flashAttachEffect(string sfx, string attachment)
        flashEffect(sfx, u, attachment)

    function addAttachEffect(string sfx, string attachment) returns effect
        return addEffect(sfx, u, attachment)

    protected function placeEntity()
        unitOnCastListener = EventListener.onCast(u, AbilityTypesIds.TARGET_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null
        unitOnCastImmediateListener = EventListener.onCast(u, AbilityTypesIds.SELFCAST_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null
        unitDamageTakenListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) () ->
            if damageTakenListener != null
                damageTakenListener.onEvent()
                destroy damageTakenListener
                damageTakenListener = null

    function toStack() returns BoardStack
        if entityType == STACK
            return this castTo BoardStack
        return null

    function toHero() returns BoardHero
        if entityType == HERO
            return this castTo BoardHero
        return null

    protected function removeEntityRelatedThingsFromBoard()
        if highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null

    protected function destroyEntity()
        if stati != null
            for status in stati
                destroy status
            destroy stati
            stati = null
        if castListener != null
            destroy castListener
            castListener = null
        if unitOnCastListener != null
            destroy unitOnCastListener
            unitOnCastListener = null
        if unitOnCastImmediateListener != null
            destroy unitOnCastImmediateListener
            unitOnCastImmediateListener = null
        if damageTakenListener != null
            destroy damageTakenListener
            damageTakenListener = null
        if unitDamageTakenListener != null
            destroy unitDamageTakenListener
            unitDamageTakenListener = null
            

    protected function destroyTriggers()
        destroy triggers

    ondestroy