package BoardEntity
import PlayerData
import LinkedList
import Action
import initlater DefaultAction
import initlater ActionType
import initlater Board
import initlater BoardStack
import initlater Cell
import initlater BoardHero
import ClosureEvents
import Status
import UnitDefinition
import Abilities
import AttachmentPoints
import BoardTrigger
import AbilityIds

public enum EntityType
    STACK
    HERO

public abstract class BoardEntity
    protected Board board
    protected unit u
    private effect highlightEffect
    private EntityType entityType
    private LinkedList<Status> stati

    private EventListener castListener

    private OnCastListener unitOnCastListener
    private OnCastListener unitOnCastImmediateListener
    private EventListener damageTakenListener
    private EventListener unitDamageTakenListener

    private EntityTrigger triggers

    protected DefaultAction defaultAction
    protected Action currentSelectedAction
    protected LinkedList<Action> actions

    construct(EntityType entityType, Board board)
        this.entityType = entityType
        this.board = board
        this.stati = new LinkedList<Status>
        this.triggers = new EntityTrigger()
        this.actions = new LinkedList<Action>
        currentSelectedAction = null
        defaultAction = null

    function getBoard() returns Board
        return board

    function getType() returns EntityType
        return entityType

    abstract function getCell() returns Cell
    abstract function getPlayer() returns Player
    abstract function getIcon() returns string
    abstract function getName() returns string

    function forEachAction(LLItrClosure<Action> itr)
        actions.forEach() action ->
            itr.run(action)
        destroy itr
    
    function actionsIterator() returns LLIterator<Action>
        return actions.iterator()

    function getCurrentAction() returns Action
        return currentSelectedAction

    function getDefaultAction() returns DefaultAction
        return defaultAction

    function selectAction(Action action)
        currentSelectedAction = action

    function resetCurrentSelectedAction() returns boolean
        if currentSelectedAction != defaultAction
            selectAction(defaultAction)
            return true
        return false

    function addAction(Action action)
        if action.hasOption(ActionTypeOption.DEFAULT)
            if defaultAction != null
                Log.error("Tried to add an Default Action to "+getName()+" while it allready has one -> overwriting it")
            defaultAction = action castTo DefaultAction
        actions.add(action)

    abstract function getMaxActionPoints() returns int
    abstract function getRemainingActionPoints() returns int
    abstract function removeAP(int amount)
    abstract function resetActionPoints()

    function canStillAct() returns boolean
        return getRemainingActionPoints() > 0

    abstract function isAlive() returns boolean
    abstract function toString() returns string
    abstract function getInitiative() returns int

    function getTriggers() returns EntityTrigger
        return triggers

    function forEachStatusStats(LLItrClosure<StatusStats> itr)
        stati.forEach() status ->
            itr.run(status)
        destroy itr

    function statusIterator() returns LLIterator<Status>
        return stati.iterator()

    function addStatus(Status status)
        stati.add(status)

    function removeStatus(Status status)
        stati.remove(status)

    function getPos3Real() returns vec3
        return u.getPos().withTerrainZ(u.getFlyHeight() + 20.0)

    function issuePointOrder(string order, Cell cell)
        u.issuePointOrder(order, cell.getCoord())

    function issueImmediateOrder(string order)
        u.issueImmediateOrder(order)

    function issuePointOrder(string order, vec2 pos)
        u.issuePointOrder(order, pos)
    
    function issueTargetOrder(string order, BoardEntity target)
        u.issueTargetOrder(order, target.u)

    function enableAbility(int id, boolean flag)
        u.disableAbility(id, flag == false, false)

    function doOnNextCast(EventListener listener)
        castListener = listener

    function doOnNextDamageTaken(EventListener listener)
        damageTakenListener = listener

    function setHighlight(boolean flag)
        if flag == false or highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null
        if flag
            highlightEffect = addEffect(Abilities.aneuTarget, u, AttachmentPoints.overhead)

    function flashEffectOnPos(string sfx)
        flashEffect(sfx, u.getPos())

    function flashAttachEffect(string sfx, string attachment)
        flashEffect(sfx, u, attachment)

    function addAttachEffect(string sfx, string attachment) returns effect
        return addEffect(sfx, u, attachment)

    protected function placeEntity()
        u.disableAbility(AbilityIds.attack, true, false)
        u.setPathing(false)

        unitOnCastListener = EventListener.onCast(u, AbilityTypesIds.TARGET_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null
        unitOnCastImmediateListener = EventListener.onCast(u, AbilityTypesIds.SELFCAST_SPELL) (unit caster) ->
            if castListener != null
                castListener.onEvent()
                destroy castListener
                castListener = null
        unitDamageTakenListener = EventListener.add(u, EVENT_PLAYER_UNIT_DAMAGED) () ->
            if damageTakenListener != null
                damageTakenListener.onEvent()
                destroy damageTakenListener
                damageTakenListener = null

    function toStack() returns BoardStack
        if entityType == STACK
            return this castTo BoardStack
        return null

    function toHero() returns BoardHero
        if entityType == HERO
            return this castTo BoardHero
        return null

    protected function removeEntityRelatedThingsFromBoard()
        if highlightEffect != null
            highlightEffect.destr()
            highlightEffect = null
        if castListener != null
            destroy castListener
            castListener = null
        if unitOnCastListener != null
            destroy unitOnCastListener
            unitOnCastListener = null
        if unitOnCastImmediateListener != null
            destroy unitOnCastImmediateListener
            unitOnCastImmediateListener = null
        if damageTakenListener != null
            destroy damageTakenListener
            damageTakenListener = null
        if unitDamageTakenListener != null
            destroy unitDamageTakenListener
            unitDamageTakenListener = null

    protected function destroyEntity()
        if stati != null
            for status in stati
                destroy status
            destroy stati
            stati = null

        if actions != null
            for action in actions
                destroy action
            destroy actions
    
            

    protected function destroyTriggers()
        destroy triggers

    ondestroy