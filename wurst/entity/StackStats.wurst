package StackStats

import StackType
import KUtil
import StatsModifier

import initlater Stack
import LinkedList
import HeroStats
import DamageAndResistance
import initlater TalentType
import Damage

public interface HasEntityStats extends HasEntityBasicStats
    function getBasis() returns HasEntityBasicStats
    function getAttackModifier() returns StatsModifier
    function getDefenceModifier() returns StatsModifier
    function getInitiativeModifier() returns StatsModifier
    function getDamageModifier() returns StatsModifier
    function getAPModifier() returns StatsModifier
    function getMaxHPModifier() returns StatsModifier

public class StackStats implements HasEntityStats
    private Stack stack
    private HeroStats heroStats
    StackType stackType

    StatsModifier attackModi = new StatsModifier()
    StatsModifier defenceModi = new StatsModifier()
    StatsModifier damageModi = new StatsModifier()
    StatsModifier initModi = new StatsModifier()
    StatsModifier hpModi = new StatsModifier()
    StatsModifier actionPointModi = new StatsModifier()
    StatsModifier moveActionPointModi = new StatsModifier()
    private StatsModifier resultingMoveActionPointModi = new StatsModifier()

    private Resistance resistance = new Resistance()

    LinkedList<TalentType> talents = new LinkedList<TalentType>()

    override function getBasis() returns StackType
        return stackType

    override function getIcon() returns string
        return getBasis().getIcon()

    function getTalents() returns LinkedList<TalentType>
        return talents
            
    function addTalent(TalentType talent)
        talents.add(talent)

    function removeTalent(TalentType talent)
        talents.remove(talent)

    override function forEachTalentStat(LLItrClosure<TalentStats> itr)
        talents.forEach() (TalentType talentType) ->
            if not talentType.isHidden()
                itr.run(talentType)
        destroy itr

    construct(Stack stack, StackType stackType, HeroStats heroStats)
        this.stackType = stackType
        this.stack = stack
        this.heroStats = heroStats
        this.talents.addAll(stackType.talents)

    override function getMaxHP() returns int
        return hpModi.get(getBasis().getMaxHP()).round()

    function getDamageAll() returns realRange
        return damageModi.getRealRange(getBasis().getDamage(), getAmount())

    override function getAttack() returns int
        var basis = getBasis().getAttack()
        if heroStats != null
            basis += heroStats.getAttack()
        return attackModi.get(basis).round()

    override function getDefence() returns int
        var basis = getBasis().getDefence()
        if heroStats != null
            basis += heroStats.getDefence()
        return defenceModi.get(basis).round()

    override function getDamage() returns realRange
        return damageModi.getRealRange(getBasis().getDamage(), 1)

    override function getRange() returns intRange
        return getBasis().getRange()

    override function getInitiative() returns int
        return initModi.get(getBasis().getInitiative()).round()

    override function getMaxAP() returns int
        return actionPointModi.get(getBasis().getMaxAP()).round()

    override function getMaxMoveAP() returns int
        resultingMoveActionPointModi.addBonus = moveActionPointModi.addBonus + actionPointModi.addBonus
        resultingMoveActionPointModi.multi = moveActionPointModi.multi + actionPointModi.multi - 100
        // there are no stackTypes who inherintly have a different move action point... You should always use a passive for this
        return resultingMoveActionPointModi.get(getBasis().getMaxMoveAP()).round()

    override function getLeadership() returns int
        return getBasis().getLeadership()

    override function getAttackModifier() returns StatsModifier
        return attackModi

    override function getDefenceModifier() returns StatsModifier
        return defenceModi

    override function getDamageModifier() returns StatsModifier
        return damageModi

    override function getAPModifier() returns StatsModifier
        return actionPointModi

    override function getInitiativeModifier() returns StatsModifier
        return initModi

    override function getMaxHPModifier() returns StatsModifier
        return hpModi

    override function getDamageType() returns DamageType
        return getBasis().getDamageType()

    override function getResistance() returns Resistance
        return resistance

    function getResistance(DamageType dType) returns int
        return getBasis().getResistance(dType) + resistance.getRes(dType)

    function getAmount() returns int
        return stack.getAmount()

    function getWeight() returns real
        return stackType.weight.toReal()

    ondestroy
        destroy attackModi
        destroy defenceModi
        destroy damageModi
        destroy initModi
        destroy actionPointModi
        destroy moveActionPointModi
        destroy resultingMoveActionPointModi
        destroy hpModi
        destroy resistance