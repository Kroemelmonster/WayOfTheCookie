package StackStats

import StackType
import KUtil
import StatsModifier

import initlater Stack
import LinkedList
import Talent
import initlater BoardStack
import HeroStats

public class StackStats
    private Stack stack
    private HeroStats heroStats
    StackType stackType

    StatsModifier attackModi = new StatsModifier()
    StatsModifier defenceModi = new StatsModifier()
    StatsModifier damageModi = new StatsModifier()
    StatsModifier initModi = new StatsModifier()
    StatsModifier hpModi = new StatsModifier()
    StatsModifier actionPointModi = new StatsModifier()
    StatsModifier moveActionPointModi = new StatsModifier()
    private StatsModifier resultingMoveActionPointModi = new StatsModifier()

    int phyisicalResistance = 0
    int magicResistance = 0
    int fireResistance = 0
    int poisonResistance = 0

    LinkedList<Talent> talents = new LinkedList<Talent>()

    function getAllVisibleTalents() returns LinkedList<Talent>
        return talents.filter() (Talent t) ->
            return t.isHidden() == false

    function addUniqueTalent(Talent talent)
        if talents.has(talent) == false
            talents.add(talent)
            
    function addTalent(Talent talent)
        talents.add(talent)

    function removeTalent(Talent talent)
        talents.remove(talent)

    function triggerOnCreation(BoardStack boardStack)
        for talent in talents
            talent.onStackCreation(boardStack)

    construct(Stack stack, StackType stackType, HeroStats heroStats)
        this.stackType = stackType
        this.stack = stack
        this.heroStats = heroStats
        this.talents.addAll(stackType.talents)

    @inline
    function getInitiative() returns int
        return initModi.get(stackType.initiative).round()

    @inline
    function getMaxActionPoints() returns int
        return actionPointModi.get(stackType.actionPoints).round()

    function getMaxMoveActionPoints() returns int
        resultingMoveActionPointModi.addBonus = moveActionPointModi.addBonus + actionPointModi.addBonus
        resultingMoveActionPointModi.multi = moveActionPointModi.multi + actionPointModi.multi - 100
        // there are no stackTypes who inherintly have a different move action point... You should always use a passive for this
        return resultingMoveActionPointModi.get(stackType.actionPoints).round()

    @inline
    function getMaxHp() returns int
        return hpModi.get(stackType.maxHp).round()

    @inline
    function getDamage() returns realRange
        return damageModi.getRealRange(stackType.damage, getAmount())

    @inline
    function getDamageOne() returns realRange
        return damageModi.getRealRange(stackType.damage, 1)

    @inline
    function getAttackRange() returns intRange
        return stackType.attackRange

    @inline
    function getAttack() returns int
        var basis = stackType.attack
        if heroStats != null
            basis += heroStats.getAttack()
        return attackModi.get(basis).round()

    @inline
    function getDefence() returns int
        var basis = stackType.defence
        if heroStats != null
            basis += heroStats.getDefence()
        return defenceModi.get(basis).round()

    @inline
    function getResistance(DamageType dType) returns int
        let basic = stackType.getResistance(dType)
        switch dType
            case MAGIC
                return magicResistance + basic
            case FIRE
                return fireResistance + basic
            case POISON
                return poisonResistance + basic
            default
                return phyisicalResistance + basic

    @inline
    function getAmount() returns int
        return stack.getAmount()

    @inline
    function getWeight() returns real
        return stackType.weight.toReal()

    ondestroy
        destroy attackModi
        destroy defenceModi
        destroy damageModi
        destroy initModi
        destroy actionPointModi
        destroy moveActionPointModi
        destroy resultingMoveActionPointModi
        destroy hpModi