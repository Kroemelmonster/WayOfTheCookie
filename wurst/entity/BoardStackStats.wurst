package BoardStackStats

import KUtil
import StackStatsModifier

import initlater BoardStack
import StackStats
import StackType
import initlater SubTargetList
import LinkedList
import initlater Cell

public class BoardStackStats
    private StackStats basis
    private BoardStack stack
    int startAmount
    int amount
    int remainingActionPoints
    int hp

    StackStatsModifier attackModi = new StackStatsModifier()
    StackStatsModifier defenceModi = new StackStatsModifier()
    StackStatsModifier damageModi = new StackStatsModifier()
    StackStatsModifier initModi = new StackStatsModifier()
    StackStatsModifier hpModi = new StackStatsModifier()
    StackStatsModifier actionPointModi = new StackStatsModifier()

    int phyisicalResistance = 0
    int magicResistance = 0
    int fireResistance = 0
    int poisonResistance = 0

    private SubTargetList subAttackList = null

    construct(BoardStack stack, StackStats basis, int amount)
        this.basis = basis
        this.startAmount = amount
        this.amount = amount
        this.hp = basis.getMaxHp()
        this.stack = stack

        /*
        setSubAttackTarget() (Cell reference, BoardStack mainTarget) ->
            let list = new LinkedList<SubTarget>()
            let itr = mainTarget.getCell().eachCellInRangeIterator(intRange(1, 1))
            while itr.hasNext()
                let possibleTarget = itr.next().getStack()
                if possibleTarget != null and mainTarget.isEnemy(possibleTarget) == false
                    list.add(new SubTarget(possibleTarget, 0.5))

            destroy itr
            return list
        */

    function getBasis() returns StackStats
        return basis
    
    @inline
    function getInitiative() returns int
        return initModi.get(basis.getInitiative()).round()

    @inline
    function getMaxActionPoints() returns int
        return actionPointModi.get(basis.getMaxActionPoints()).round()
    
    @inline
    function getMaxHp() returns int
        return hpModi.get(basis.getMaxHp()).round()

    @inline
    function getDamage() returns realRange
        return damageModi.getRealRange(basis.getDamageOne(), amount)

    @inline
    function getDamageOne() returns realRange
        return damageModi.getRealRange(basis.getDamageOne(), 1)

    @inline
    function getAttackRange() returns intRange
        return basis.getAttackRange()

    @inline
    function getAttack() returns int
        return attackModi.get(basis.getAttack()).round()

    @inline
    function getDefence() returns int
        return defenceModi.get(basis.getDefence()).round()

    @inline
    function getDamageType() returns DamageType
        return basis.stackType.damageType

    @inline
    function getResistance(DamageType dType) returns int
        let basic = basis.getResistance(dType)
        switch dType
            case MAGIC
                return magicResistance + basic
            case FIRE
                return fireResistance + basic
            case POISON
                return poisonResistance + basic
            default
                return phyisicalResistance + basic

    @inline
    function getRemainingActionPoints() returns integer
        return remainingActionPoints
    
    @inline
    function getMoveSpeed() returns real
        return remainingActionPoints.toReal()

    @inline
    function getAmount() returns int
        return amount
    
    @inline
    function getHp() returns int
        return hp

    @inline
    function getStartAmount() returns int
        return startAmount

    @inline
    function getWeight() returns real
        return basis.getWeight()
    
    /** setters  **/

    @inline
    function setHp(int i)
        hp = i
        stack.setVisualHp(hp / getMaxHp())

    @inline
    function setActionPoints(integer amount)
        remainingActionPoints = amount

    @inline
    function addActionPoints(integer amount)
        remainingActionPoints += amount

    @inline
    function addAmount(int i)
        amount += i

    @inline
    function resetActionPoints()
        remainingActionPoints = getMaxActionPoints()

    @inline
    function setSubAttackTarget(SubTargetList list)
        subAttackList = list

    @inline
    function getSubAttackTargets(Cell reference, BoardStack mainTarget) returns LinkedList<SubTarget>
        if subAttackList != null
            return subAttackList.calculate(reference, mainTarget)
        return null

    ondestroy
        destroy attackModi
        destroy defenceModi
        destroy damageModi
        destroy initModi
        destroy actionPointModi
        destroy hpModi
        if subAttackList != null
            destroy subAttackList
            subAttackList = null