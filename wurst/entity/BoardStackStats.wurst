package BoardStackStats

import initlater Cell
import initlater BoardStack

import KUtil
import StatsModifier
import LinkedList
import DamageAndResistance
import Talent
import TalentType
import StackStats
import SubTargetList
import Damage

public interface HasBoardEntityStats
    function getRemainingAP() returns int
    function getRemainingMoveAP() returns int

public class BoardStackStats implements HasEntityStats, HasBoardEntityStats
    private StackStats basis
    private BoardStack stack
    int startAmount
    int amount
    int remainingActionPoints
    int remainingMoveActionPoints
    int hp

    StatsModifier attackModi = new StatsModifier()
    StatsModifier defenceModi = new StatsModifier()
    StatsModifier damageModi = new StatsModifier()
    StatsModifier initModi = new StatsModifier()
    StatsModifier hpModi = new StatsModifier()
    StatsModifier actionPointModi = new StatsModifier()
    StatsModifier moveActionPointModi = new StatsModifier()
    private StatsModifier resultingMoveActionPointModi = new StatsModifier()

    int moveCoefficient = 100
    private Resistance resistance

    private LinkedList<Talent> talents = new LinkedList<Talent>


    private SubTargetList subAttackList = null

    construct(BoardStack stack, StackStats basis, int amount)
        this.basis = basis
        this.startAmount = amount
        this.amount = amount
        this.hp = basis.getMaxHP()
        this.stack = stack
        this.resistance = new Resistance(getBasis().getResistance())

        for talent in basis.talents
            talents.add(talent.create(stack))


    override function getBasis() returns StackStats
        return basis

    override function getIcon() returns string
        return getBasis().getIcon()

    function getTalents() returns LinkedList<Talent>
        return talents

    override function forEachTalentStat(LLItrClosure<TalentStats> itr)
        talents.forEach() (Talent talent) ->
            if not talent.isHidden()
                itr.run(talent)
        destroy itr
    
    override function getInitiative() returns int
        return initModi.get(getBasis().getInitiative()).round()

    override function getMaxAP() returns int
        return actionPointModi.get(getBasis().getMaxAP()).round()

    override function getMaxMoveAP() returns int
        resultingMoveActionPointModi.addBonus = moveActionPointModi.addBonus + actionPointModi.addBonus
        resultingMoveActionPointModi.multi = moveActionPointModi.multi + actionPointModi.multi - 100
        return resultingMoveActionPointModi.get(getBasis().getMaxMoveAP()).round()
    
    override function getMaxHP() returns int
        return hpModi.get(getBasis().getMaxHP()).round()

    function getDamageAll() returns realRange
        return damageModi.getRealRange(getBasis().getDamage(), amount)

    override function getDamage() returns realRange
        return damageModi.getRealRange(basis.getDamage(), 1)

    override function getRange() returns intRange
        return getBasis().getRange()

    override function getAttack() returns int
        return attackModi.get(getBasis().getAttack()).round()

    override function getDefence() returns int
        return defenceModi.get(getBasis().getDefence()).round()

    override function getAttackModifier() returns StatsModifier
        return attackModi

    override function getDefenceModifier() returns StatsModifier
        return defenceModi

    override function getDamageModifier() returns StatsModifier
        return damageModi

    override function getAPModifier() returns StatsModifier
        return actionPointModi

    override function getInitiativeModifier() returns StatsModifier
        return initModi

    override function getMaxHPModifier() returns StatsModifier
        return hpModi

    override function getLeadership() returns int
        return getBasis().getLeadership()

    override function getDamageType() returns DamageType
        return getBasis().getDamageType()

    override function getResistance() returns Resistance
        return getBasis().getResistance()

    function getResistance(DamageType dType) returns int
        return resistance.getRes(dType)

    override function getRemainingAP() returns integer
        return remainingActionPoints

    override function getRemainingMoveAP() returns integer
        return remainingMoveActionPoints

    function getAmount() returns int
        return amount
    
    function getHp() returns int
        return hp

    function getStartAmount() returns int
        return startAmount

    function getWeight() returns real
        return basis.getWeight()
    
    /** setters  **/

    function setHp(int i)
        hp = i
        stack.setVisualHp(hp / getMaxHP())

    @inline
    function removeAP(integer amount)
        remainingActionPoints -= amount
        if remainingActionPoints < 0
            remainingActionPoints = 0
        remainingMoveActionPoints -= amount
        if remainingMoveActionPoints < 0
            remainingMoveActionPoints = 0

    function adjustRemainingActionPointsToRemainingMoveActionPoints(integer amount)
        if remainingActionPoints <= remainingMoveActionPoints
            if amount < remainingActionPoints
                remainingActionPoints = amount
        else
            remainingActionPoints = remainingActionPoints - (remainingMoveActionPoints - amount)
        remainingMoveActionPoints = amount

    @inline
    function addAmount(int i)
        amount += i

    @inline
    function resetActionPoints()
        remainingActionPoints = getMaxAP()
        remainingMoveActionPoints = getMaxMoveAP()

    @inline
    function setSubAttackTarget(SubTargetList list)
        subAttackList = list

    @inline
    function getSubAttackTargets(Cell reference, BoardStack mainTarget) returns LinkedList<SubTarget>
        if subAttackList != null
            return subAttackList.calculate(reference, mainTarget)
        return null

    ondestroy
        destroy attackModi
        destroy defenceModi
        destroy damageModi
        destroy initModi
        destroy actionPointModi
        destroy moveActionPointModi
        destroy resultingMoveActionPointModi
        destroy hpModi
        destroy resistance
        if talents != null
            for talent in talents
                destroy talent
            destroy talents
        if subAttackList != null
            destroy subAttackList
            subAttackList = null