package WarcryBuff

import AttachmentPoints
import Icons
import Abilities

import Status
import UITooltip

import initlater BoardStack
import initlater StatusType
import BoardTrigger

public class WarcryBuff extends Status
    private static constant DAMAGE_MULTI = 10
    private static constant string NAME = "Warcry"

    private effect display
    private int duration

    private BoardTrigger turnEndListener

    static function setup() returns StatusType
        let statusType = new StatusType(Icons.bTNBattleRoar, NAME)
        statusType.setCreationListener()(BoardStack stack) ->
            return new WarcryBuff(statusType, stack)
        statusType.setTooltipListener() (StatusData data) ->
            return createTooltip(null, data)

        return statusType

    construct(StatusType bType, BoardStack stack)
        super(bType, stack)
        display = stack.addAttachEffect(Abilities.roarTarget, AttachmentPoints.overhead)
        
        turnEndListener = stack.getTriggers().addTurnEnd() (SequenzListener next) ->
            duration--
            updateInner(-1)
            if duration <= 0
                kill()
            next.continue()

    private static function createTooltip(WarcryBuff b, StatusData data) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        if b == null
            tooltip.addLine("Increases the damage dealt by "+Tooltip.coloredPercent(DAMAGE_MULTI / 100.0) +" per reamining duration")
        else
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("")
            tooltip.addLine("Increases the damage dealt by "+Tooltip.coloredPercent((DAMAGE_MULTI * b.duration) / 100.0))
        
        // TODO do smth with data
        if data != null
            destroy data
        return tooltip

    override protected function updateInner(StatusData data)
        if this.duration < data.duration
            let difference = data.duration - this.duration
            this.duration = data.duration
            updateInner(difference)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this, null)

    private function updateInner(int durationChange)
        stack.stats.damageModi.multi += (durationChange * DAMAGE_MULTI)

    override function hide()
        if display != null
            display.destr()

    ondestroy
        updateInner(duration * -1)
        stack.getTriggers().removeOnTurnEnd(turnEndListener)
        if display != null
            display.destr()