package PurgedDebuff

import AttachmentPoints
import Icons
import Abilities

import Status
import UITooltip

import initlater BoardStack
import initlater BoardEntity
import initlater StatusType
import BoardTrigger

public class PurgedDebuff extends Status
    private static StatusType TYPE

    static function createType() returns StatusType
        TYPE = new StatusType(Icons.bTNPurge, "Purged")
        TYPE.setCreationListener()(BoardEntity entity) ->
            return new PurgedDebuff(TYPE, entity)
        TYPE.setTooltipListener() (StatusData data) ->
            return createTooltip(null, data)

        return TYPE

    @inline
    private static function getSlowValue(StatusData data) returns int
        return data.firstIntValue

    private static function createTooltip(PurgedDebuff b, StatusData data) returns Tooltip
        let tooltip = Tooltip.create(TYPE.getName())
        int slowValue
        if b != null
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("")
            slowValue = b.slow
        else
            slowValue = getSlowValue(data)
            destroy data
            
        tooltip.addLine("Reduces the available ActionPoints for moving by "
        + Tooltip.coloredInt(Tooltip.COLOR_NEGATIVE, slowValue))
        return tooltip

    /* -------------------------------------------------------------------------- */

    private effect display
    private BoardTrigger turnStartListener
    private int duration
    private int slow = 0

    construct(StatusType statusType, BoardEntity entity)
        super(statusType, entity)
        display = entity.addAttachEffect(Abilities.purgeBuffTarget, AttachmentPoints.chest)

        turnStartListener = entity.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
            next.continue()

    override function updateInner(StatusData data)
        this.duration = data.duration
        toggle(false)
        this.slow = getSlowValue(data)
        toggle(true)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this, null)

    private function toggle(boolean flag)
        let multi = flag ? -1 : 1
        let boardStack = entity.toStack()
        boardStack.stats.moveActionPointModi.addBonus += slow * multi

    override function hide()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            toggle(false)

            entity.getTriggers().removeOnTurnStart(turnStartListener)
        hide()