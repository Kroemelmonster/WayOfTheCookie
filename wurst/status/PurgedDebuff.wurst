package PurgedDebuff

import AttachmentPoints
import Icons
import Abilities

import Status
import UITooltip

import initlater BoardStack
import initlater StatusType
import BoardTrigger

public class PurgedDebuff extends Status
    private static constant string NAME = "Purged"

    private effect display
    private BoardTrigger turnStartListener
    private int duration
    private int slow = 0

    static function setup() returns StatusType
        let statusType = new StatusType(Icons.bTNPurge, NAME)
        statusType.setCreationListener()(BoardStack stack) ->
            return new PurgedDebuff(statusType, stack)
        statusType.setTooltipListener() (StatusData data) ->
            return createTooltip(null, data)

        return statusType

    construct(StatusType statusType, BoardStack stack)
        super(statusType, stack)
        display = stack.addAttachEffect(Abilities.purgeBuffTarget, AttachmentPoints.chest)

        turnStartListener = stack.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
            next.continue()

    private static function createTooltip(PurgedDebuff b, StatusData data) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        int slowValue
        if b != null
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("")
            slowValue = b.slow
        else
            slowValue = getSlowValue(data)
            destroy data
            
        tooltip.addLine("Reduces the available ActionPoints for moving by "
        + Tooltip.coloredInt(Tooltip.COLOR_NEGATIVE, slowValue))
        return tooltip

    @inline
    private static function getSlowValue(StatusData data) returns int
        return data.firstIntValue

    override function updateInner(StatusData data)
        this.duration += data.duration
        toggle(false)
        this.slow = getSlowValue(data)
        toggle(true)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this, null)

    private function toggle(boolean flag)
        let multi = flag ? -1 : 1
        stack.stats.moveActionPointModi.addBonus += slow * multi

    override function hide()
        if display != null
            display.destr()

    ondestroy
        toggle(false)

        stack.getTriggers().removeOnTurnStart(turnStartListener)
        if display != null
            display.destr()