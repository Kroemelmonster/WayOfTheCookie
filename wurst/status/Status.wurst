package Status

import initlater BoardEntity
import initlater StatusType
import initlater SharedStatus
import Tooltip
import Icon
import Data

public interface StatusStats extends GeneratesTooltip, HasIcon

public class StatusData extends Data
    int duration
    SharedStatus linkToPrimary
    protected LinkedList<BoardEntity> entityData

    protected boolean auraAdd
    protected int auraId = -1

    construct(int duration)
        this.duration = duration
        linkToPrimary = null

    static function create() returns StatusData
        return create(0)

    static function create(int duration) returns StatusData
        return new StatusData(duration)

    /** id should be an identifier that seperates this status Data from others **/
    function setAura(boolean add, int id)
        auraAdd = add
        auraId = id

    function getAuraId() returns int
        return auraId

    function getAuraAdd() returns boolean
        return auraAdd

    function setSecondary(SharedStatus main)
        this.linkToPrimary = main

    function setEntityData(BoardEntity value)
        clearEntityData()
        addEntityData(value)

    function clearEntityData()
        if entityData == null
            entityData = new LinkedList<BoardEntity>
        entityData.clear()

    function addEntityData(BoardEntity value)
        entityData.add(value)

    function getEntityData() returns BoardEntity
        return entityData.getFirst()

    function getAllEntityData() returns LinkedList<BoardEntity>
        return entityData
    
    ondestroy
        if entityData != null
            destroy entityData
            entityData = null

public abstract class Status implements StatusStats
    StatusType typ

    protected BoardEntity entity

    construct(StatusType typ, BoardEntity entity)
        this.typ = typ
        this.entity = entity

    override function getIcon() returns string
        return typ.getIcon()

    override function getName() returns string
        return typ.getName()
    
    function refresh(StatusData data)
        onRefresh(data)
        destroy data

    /** call this only ONCE when you want to purge a buff from a unit that is no longer alive 
        This will ONLY remove ANY visuals this buff might have, it does not unregister any events

        But since you should only call this on a dead stack, it wont trigger anything anyway **/
    function removeBeforeDeath()
        removeVisuals()
        remove()

    abstract function removeVisuals()
    abstract function onRefresh(StatusData data)
    abstract function canPurge() returns boolean
    override abstract function createTooltip() returns Tooltip

    function purge(SequenzListener next)
        if canPurge()
            remove(next)

    protected function remove()
        remove(null)
    
    protected function remove(SequenzListener next)
        removeInner(next)

    protected function removeInner(SequenzListener next)
        if next != null
            next.continue()
        removeWithoutTrigger()

    protected function removeWithoutTrigger()
        destroy this

    ondestroy
        removeVisuals()
        if entity != null
            entity.removeStatus(this)
