package Status

import initlater BoardEntity
import initlater StatusType
import initlater BoardTrigger
import initlater SharedStatus
import Tooltip
import Icon
import LinkedList
import Data

public interface StatusStats extends GeneratesTooltip, HasIcon

public class StatusData extends Data
    int duration
    SharedStatus linkToPrimary
    protected LinkedList<BoardEntity> entityData

    construct(int duration)
        this.duration = duration
        linkToPrimary = null

    static function create() returns StatusData
        return create(0)

    static function create(int duration) returns StatusData
        return new StatusData(duration)

    function setSecondary(SharedStatus main)
        this.linkToPrimary = main

    function setEntityData(BoardEntity value)
        clearEntityData()
        addEntityData(value)

    function clearEntityData()
        if entityData == null
            entityData = new LinkedList<BoardEntity>
        entityData.clear()

    function addEntityData(BoardEntity value)
        entityData.add(value)

    function getEntityData() returns BoardEntity
        return entityData.getFirst()

    function getAllEntityData() returns LinkedList<BoardEntity>
        return entityData

public abstract class Status implements StatusStats
    protected StatusType statusType
    protected BoardEntity entity

    construct(StatusType statusType, BoardEntity entity)
        this.statusType = statusType
        this.entity = entity

    function getType() returns StatusType
        return statusType

    override function getIcon() returns string
        return statusType.getIcon()

    override function getName() returns string
        return statusType.getName()
    
    function refresh(StatusData data)
        onRefresh(data)
        destroy data

    /** call this only ONCE when you want to purge a buff from a unit that is no longer alive 
        This will ONLY remove ANY visuals this buff might have, it does not unregister any events

        But since you should only call this on a dead stack, it wont trigger anything anyway **/
    abstract function hide()
    abstract function onRefresh(StatusData data)
    abstract function canPurge() returns boolean
    override abstract function createTooltip() returns Tooltip

    function purge(SequenzListener next)
        if canPurge()
            remove(next)

    protected function remove(SequenzListener next)
        next.continue()
        removeWithoutTrigger()

    protected function removeWithoutTrigger()
        destroy this

    ondestroy
        if entity != null
            entity.removeStatus(this)
        hide()
