package AilmentPoison

import AttachmentPoints
import Status
import Icons
import initlater BoardStack
import initlater StatusType
import initlater BoardController
import Damage
import KUtil
import StackType
import Cell
import BoardTrigger
import initlater DelayAnimation
import Ailment
import initlater BoardEntity
import DamageType
import LinkedList
import Tooltip
import StringUtils

public class AilmentPoison extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Poison", Icons.bTNOrbOfVenom)
        TYPE.setCreationListener()(BoardEntity entity) ->
            return new AilmentPoison(TYPE, entity)
        TYPE.setTooltipListener() (StatusData data) ->
            return createTooltipBaseLines(data)
        
    private static constant DamagePreview damagePreview = DamagePreview.createDot(SourceType.UNSPECIFIC, DamageType.POISON, true)
    
    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        let lines = new LinkedList<string>
        ..add("Poisoned makes you suffer damage each turn")
        ..add("Each time you take non-dot damage you also suffer this damage as well")
        if data != null
            destroy data
        return lines

    private static function createSpecificTooltip(AilmentPoison b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLine(StringUtils.stat("Duration", b.stacks.getMaxDuration()))
        ..addLine(StringUtils.stat("Stacks", b.stacks.size()))
        ..addLine("")
        ..addLine("You are currently poisoned and take "
         + b.calculateDamage().toColoredText()
         + " each turn aswell as each time you take non-dot Damage")

    static function flashEffect(BoardStack target)
        target.flashEffectOnPos("Abilities\\Weapons\\PoisonArrow\\PoisonArrowMissile.mdl")

    private BoardTrigger turnStartListener
    private BoardTrigger turnEndListener
    private BoardTriggerOnDamageTaken damageTakenListener

    private AilmentStacks stacks = new AilmentStacks()
    private BoardStack stack

    private function calculateDamage() returns DamagePreview
        let avg = stacks.getCombinedDamage()
        damagePreview.dmg = realRange(avg * 0.8, avg * 1.2)
        return damagePreview

    construct(StatusType statusType, BoardEntity entity)
        super(statusType, entity)
        stack = entity.toStack()

        damageTakenListener = stack.getTriggers().addOnDamageTaken() (BoardEntity source, BoardStack target, SpecificDamageInstance specificInstance, SequenzListener next) ->
            if specificInstance.damageInstance.isDot == false
                dealDamage() ->
                    next.continue()

        turnStartListener = stack.getTriggers().addTurnStart() (SequenzListener next) ->
            dealDamage() ->
                next.continue()

        turnEndListener = stack.getTriggers().addTurnEnd() (SequenzListener next) ->
            if stacks.removeOneDuration()
                kill()
            next.continue()

    @inline
    private static function getDamage(StatusData data) returns real
        return data.firstRealValue

    override protected function updateInner(StatusData data)
        stacks.add(data.duration, getDamage(data))

    override protected function hide()

    override function createCurrentTooltip() returns Tooltip
        return createSpecificTooltip(this)

    private function dealDamage(SequenzListener next)
        DelayAnimation.create(stack.getBoard(), 0.5) ->
            flashEffect(stack)
            let instance = calculateDamage().getRandomInstance()
            BoardController.dealDamage(stack, instance, stack) ->
                destroy instance
                DelayAnimation.create(stack.getBoard(), 0.3) ->
                    next.continue()
        //stack.stats.setActionPoints(stack.stats.getRemainingActionPoints() - 1)

    ondestroy
        stack.getTriggers().removeOnDamageTaken(damageTakenListener)
        stack.getTriggers().removeOnTurnEnd(turnEndListener)
        stack.getTriggers().removeOnTurnStart(turnStartListener)
        destroy stacks