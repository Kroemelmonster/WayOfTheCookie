package StatusPurged

import AttachmentPoints
import Icons
import Abilities

import Status

import initlater BoardStack
import initlater BoardEntity
import initlater StatusType
import BoardTrigger
import LinkedList
import StringUtils
import Tooltip

public class StatusPurged extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Purged", Icons.bTNPurge)
        TYPE.setCreationListener()(BoardEntity entity) ->
            return new StatusPurged(TYPE, entity)
        TYPE.setTooltipListener() (StatusData data) ->
            return createTooltipBaseLines(data)

    private static function createTooltipBaseLines(int slowValue) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Reduces the available ActionPoints for moving by "
         + StringUtils.coloredInt(StringUtils.COLOR_NEGATIVE, slowValue))
        
    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        let lines = createTooltipBaseLines(getSlowValue(data))
        if data != null
            destroy data
        return lines

    private static function createTooltip(StatusPurged b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLine(StringUtils.stat("Duration", b.duration))
        ..addLine("")
        ..addLines(createTooltipBaseLines(b.slow))

    private static function getSlowValue(StatusData data) returns int
        return data.firstIntValue

    /* -------------------------------------------------------------------------- */

    private effect display
    private BoardTrigger turnStartListener
    private int duration
    private int slow = 0

    construct(StatusType statusType, BoardEntity entity)
        super(statusType, entity)
        display = entity.addAttachEffect(Abilities.purgeBuffTarget, AttachmentPoints.chest)

        turnStartListener = entity.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
            next.continue()

    override function updateInner(StatusData data)
        this.duration = data.duration
        toggle(false)
        this.slow = getSlowValue(data)
        toggle(true)

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this)

    private function toggle(boolean flag)
        let multi = flag ? -1 : 1
        let boardStack = entity.toStack()
        boardStack.stats.moveActionPointModi.addBonus += slow * multi

    override function hide()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            toggle(false)
            entity.getTriggers().removeOnTurnStart(turnStartListener)
        hide()