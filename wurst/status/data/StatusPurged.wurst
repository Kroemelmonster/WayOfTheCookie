package StatusPurged

import AttachmentPoints
import Icons
import Abilities

import Status

import initlater BoardStack
import initlater BoardEntity
import initlater StatusType
import BoardTrigger
import LinkedList
import KStringUtils
import Tooltip

public class StatusPurged extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Purged", Icons.bTNPurge)
        TYPE.setCreationListener() (boardEntity, data) ->
            return new StatusPurged(TYPE, boardEntity, data)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

    static constant int SLOW = 1

    private static function createTooltipBaseLines(int slowValue) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Reduces the available ActionPoints for moving by "
         + KStringUtils.coloredInt(KStringUtils.COLOR_NEGATIVE, slowValue))
        
    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLines(data.getIntData(SLOW))

    private static function createTooltip(StatusPurged b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLine(KStringUtils.stat("Duration", b.duration))
        ..addLine("")
        ..addLines(createTooltipBaseLines(b.slow))

    /* -------------------------------------------------------------------------- */

    private effect display
    private BoardTrigger turnStartListener
    private int duration
    private int slow = 0

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity)
        display = entity.addAttachEffect(Abilities.purgeBuffTarget, AttachmentPoints.chest)

        turnStartListener = entity.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                remove(next)
            else
                next.continue()

        refreshStatusData(data)

    override function onRefresh(StatusData data)
        applyStats(false)
        refreshStatusData(data)

    override function canPurge() returns boolean
        return true

    protected function refreshStatusData(StatusData data)
        duration = data.duration
        slow = data.getIntData(SLOW)
        applyStats(true)

    protected function applyStats(boolean add)
        let multi = add ? -1 : 1
        entity.toStack().stats.moveActionPointModi.addBonus += slow * multi

    override function createTooltip() returns Tooltip
        return createTooltip(this)

    override function hide()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            applyStats(false)
            entity.getTriggers().removeOnTurnStart(turnStartListener)