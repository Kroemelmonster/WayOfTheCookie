package StatusPurged

import AttachmentPoints
import Abilities

import Status

import BoardStack
import BoardEntity
import StatusType
import Tooltip
import BoardListenerOnInitiative

init
    Initializer.register(InitializerNames.STATI) -> 
        StatusPurged.setup()

public class StatusPurged extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Purged", Icons.bTNPurge)
        TYPE.setCreationListener() (boardEntity, data) ->
            return new StatusPurged(TYPE, boardEntity, data)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

    static constant SLOW = 1

    private static function createTooltipBaseLines(int slowValue) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Reduces the available ActionPoints for moving by "
         + KStringUtils.colored(KStringUtils.COLOR_NEGATIVE_TEXT, slowValue))
        
    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLines(data.getIntData(SLOW))

    private static function createTooltip(StatusPurged b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLine(KStringUtils.data("Duration", b.duration))
        ..addLine("")
        ..addLines(createTooltipBaseLines(b.slow))

    /* -------------------------------------------------------------------------- */

    private effect display
    private BoardListenerOnInitiative turnStartListener
    private int duration
    private int slow = 0

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity)
        display = entity.addAttachEffect(Abilities.purgeBuffTarget, AttachmentPoints.chest)

        turnStartListener = entity.listeners().addOnTurnStart() (BoardListenerOnInitiativeData onInitData) ->
            duration--
            if duration <= 0
                remove()
            onInitData.continue(false)

        refreshStatusData(data)

    override function onRefresh(StatusData data)
        applyStats(false)
        refreshStatusData(data)

    override function canPurge() returns boolean
        return true

    protected function refreshStatusData(StatusData data)
        duration = data.duration
        slow = data.getIntData(SLOW)
        applyStats(true)

    protected function applyStats(boolean add)
        entity.toStack().stats.maxMoveAP.modify(-slow, add)

    override function createTooltip() returns Tooltip
        return createTooltip(this)

    override function removeVisuals()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            applyStats(false)
            entity.listeners().removeOnTurnStart(turnStartListener)