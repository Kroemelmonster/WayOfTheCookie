package StatusSpiritLink

import AttachmentPoints
import Abilities

import Status

import BoardEntity
import StatusType
import BoardController
import Tooltip
import Damage
import AnimationWait
import SharedStatus
import StatusController
import BoardListenerOnDamage
import BoardListenerOnInitiative

init
    Initializer.register(InitializerNames.STATI) -> 
        StatusSpiritLink.setup()

public class StatusSpiritLink extends SharedStatus
    static StatusType TYPE
    protected static function setup()
        TYPE = new StatusType("Spirit Link", Icons.bTNSpiritLink)
        TYPE.setCreationListener() (boardEntity, data) ->
            return new StatusSpiritLink(TYPE, boardEntity, data)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)
        TYPE.setCanApplyListener() (BoardEntity entity, StatusData data) ->
            return canApplyTo(entity, data)

    static constant DAMAGE_TRANSFER = 0
    static constant DAMAGE_REDUCE = 1

    private static function canApplyTo(BoardEntity entity, StatusData data) returns boolean
        let status = StatusController.get(TYPE, entity) castTo StatusSpiritLink
        if status != null and not status.isPrimary()
            return false
        let target = data.getEntityData()
        return target != null and not StatusController.has(TYPE, target)

    private static function createTooltipBaseLinesPrimary(real transferPerc, real reducePerc) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.primaryPercent(transferPerc) + " of any Damage your linked Allies take gets transfered to you.")
        ..add("You only take " + KStringUtils.primaryPercent(reducePerc) + " of the transfered Damage.")

    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLinesPrimary(data.getRealData(DAMAGE_TRANSFER), data.getRealData(DAMAGE_REDUCE))

    private static function createTooltip(StatusSpiritLink b) returns Tooltip
        let tt = Tooltip.create(TYPE.getName())
        if b.isPrimary()
            tt.addLine(KStringUtils.data("Duration", b.duration))
            var targetStr = ""
            let size = b.secondaryStati.size()
            if size == 1
                targetStr = b.secondaryStati.getFirst().entity.getName()
            else if size > 1
                targetStr = size.toString() + " Allies"
            tt.addLine(KStringUtils.data("LinkedTo", targetStr))
            tt.addLine("")
            tt.addLines(createTooltipBaseLinesPrimary(b.transferPerc, b.reducePerc))
        else
            tt.addLine(KStringUtils.data("LinkedTo", b.primary.entity.getName()))
            tt.addLine("")
            tt.addLine(KStringUtils.primaryPercent(b.transferPerc) + " of any Damage you take gets transfered to the caster.")
        return tt

    /* -------------------------------------------------------------------------- */

    private BoardListenerOnInitiative turnStartListener
    private BoardListenerOnDamage beforeDamageTakenTrigger
    private BoardListenerOnDamage damageTakenTrigger
    
    private effect display
    private int duration
    private real reducePerc
    private real transferPerc

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity, data)

    protected override function setupPrimary(StatusData data)
        reducePerc = data.getRealData(DAMAGE_REDUCE)
        transferPerc = data.getRealData(DAMAGE_TRANSFER)
        display = entity.addAttachEffect(Abilities.spiritLinkTarget, AttachmentPoints.chest)

        applySecondaryInner(data)

        duration = data.duration
        turnStartListener = entity.listeners().addOnTurnStart() (BoardListenerOnInitiativeData onInitData) ->
            duration--
            if duration <= 0
                remove()
            onInitData.continue(false)

    protected function applySecondaryInner(StatusData data)
        let secondaryData = StatusData.create()
        ..setRealData(DAMAGE_REDUCE, reducePerc)
        ..setRealData(DAMAGE_TRANSFER, transferPerc)
        applySecondary(data.getEntityData(), secondaryData)
        destroy secondaryData
        
                
    protected override function setupSecondary(StatusData data)
        reducePerc = data.getRealData(DAMAGE_REDUCE)
        transferPerc = data.getRealData(DAMAGE_TRANSFER)
        display = entity.addAttachEffect(Abilities.spiritLinkTarget, AttachmentPoints.chest)

        beforeDamageTakenTrigger = entity.listeners().addOnBeforeDamageTaken() (BoardListenerOnDamageData onDamageData) ->
            if onDamageData.hasFlag(DamageFlags.UNMITIGATABLE)
                onDamageData.continue(false)
            else
                absorbDamageBefore(onDamageData)

        damageTakenTrigger = entity.listeners().addOnDamageTaken() (BoardListenerOnDamageData onDamageData) ->
            if onDamageData.hasFlag(DamageFlags.UNMITIGATABLE)
                onDamageData.continue(false)
            else
                absorbDamageAfter(onDamageData)
    
    private function absorbDamageBefore(BoardListenerOnDamageData onDamageData)
        let damage = onDamageData.getDamage(false)
        if damage <= 0
            onDamageData.setRealData(BoardListenerOnDamageData.SPIRIT_LINK_TRANSFER, 0.0)
            onDamageData.continue(false)
            return
            
        onDamageData.setRealData(BoardListenerOnDamageData.SPIRIT_LINK_TRANSFER, damage * (transferPerc * reducePerc))
        onDamageData.multiplyDamage(transferPerc)
        onDamageData.continue(false)

    private function absorbDamageAfter(BoardListenerOnDamageData onDamageData)
        let transferDamageTemp = onDamageData.getRealData(BoardListenerOnDamageData.SPIRIT_LINK_TRANSFER)
        if transferDamageTemp <= 0.0
            onDamageData.continue(false)
            return
        let bolt = addLightning(LIGHTNING_SPIRIT_LINK, true, primary.entity.getPos3Real(), entity.getPos3Real())
        AnimationWait.time(entity.getBoard(), 0.4) ->
            bolt.destr()
            let preview = DamagePreview.create(onDamageData.getSourceType(), onDamageData.getDamageType())
            ..addFlag(DamageFlags.TRIGGERED)
            ..addFlag(DamageFlags.UNMITIGATABLE)
            preview.dmg = realRange(transferDamageTemp, transferDamageTemp)
            let linkDamageSpecfic = preview.getRandomInstance()
                
            BoardController.dealDamage(entity, linkDamageSpecfic, primary.entity) ->
                destroy linkDamageSpecfic
                destroy preview
                AnimationWait.time(entity.getBoard(), 0.2) ->
                    onDamageData.continue(true)

    override function onRefresh(StatusData data)
        if not canApplyTo(entity, data)
            return
        // refresh duration
        duration = data.duration
        applySecondaryInner(data)

    override function canPurge() returns boolean
        return false

    override function createTooltip() returns Tooltip
        return createTooltip(this)

    override function removeVisuals()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            let listeners = entity.listeners()
            if turnStartListener != null
                listeners.removeOnTurnStart(turnStartListener)
                turnStartListener = null
            if beforeDamageTakenTrigger != null
                listeners.removeOnBeforeDamageTaken(beforeDamageTakenTrigger)
                beforeDamageTakenTrigger = null
            if damageTakenTrigger != null
                listeners.removeOnDamageTaken(damageTakenTrigger)
                damageTakenTrigger = null