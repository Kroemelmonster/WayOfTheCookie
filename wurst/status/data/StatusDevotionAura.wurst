package StatusDevotionAura

import AttachmentPoints
import Abilities

import Status

import BoardStack
import BoardEntity
import StatusType
import Tooltip

init
    Initializer.register(InitializerNames.STATI) -> 
        StatusDevotionAura.setup()

public class AuraData<T>
    protected T value
    protected int instance

    construct(T data, int instance)
        this.value = data
        this.instance = instance

public class StatusDevotionAura extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Devotion", Icons.bTNDevotion)
        TYPE.setCreationListener() (boardEntity, data) ->
            return new StatusDevotionAura(TYPE, boardEntity, data)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

    static constant DEFENCE = 0
    static constant MAIN = 0

    private static function createTooltipBaseLines(int defence) returns LinkedList<string>
        return new LinkedList<string>
        ..add("You are affected by Devotion Aura and gain "
         + KStringUtils.colored(KStringUtils.COLOR_POSITIVE_TEXT, defence)
         + " Defence")
        
    private static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLines(data.getIntData(DEFENCE))

    private static function createTooltip(StatusDevotionAura b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLine("")
        ..addLines(createTooltipBaseLines(b.summary))

    /* -------------------------------------------------------------------------- */

    private effect display
    private LinkedList<AuraData<int>> auraDatas
    private int summary

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity)
        summary = 0
        auraDatas = new LinkedList<AuraData<int>>
            
        refreshStatusData(data)

    override function onRefresh(StatusData data)
        applyStats(false)
        refreshStatusData(data)

    override function canPurge() returns boolean
        return false

    protected function refreshSummary()
        summary = 0    
        for auraData in auraDatas
            summary += auraData.value

    protected function refreshStatusData(StatusData data)
        let checkInstance = data.getAuraId()
        if data.getAuraAdd()
            if data.getBoolData(MAIN)
                if display == null
                    display = entity.addAttachEffect(Abilities.devotionAura, AttachmentPoints.origin)

            let found = auraDatas.find() (AuraData<integer> t) ->
                return t.instance == checkInstance
            if found !=  null
                found.value = data.getIntData(DEFENCE)
            else
                auraDatas.add(new AuraData<int>(data.getIntData(DEFENCE), data.getAuraId()))
            refreshSummary()
            applyStats(true)
        else
            auraDatas.removeIf() (AuraData<integer> t) ->
                return t.instance == checkInstance
            refreshSummary()
            if auraDatas.size() > 0
                applyStats(true)
            else
                remove()

    protected function applyStats(boolean add)
        entity.toStack().stats.defence.modify(summary, add)

    override function createTooltip() returns Tooltip
        return createTooltip(this)

    override function removeVisuals()
        if display != null
            display.destr()
            display = null

    ondestroy
        if entity.isAlive()
            applyStats(false)
        if auraDatas != null
            for data in auraDatas
                destroy data
            destroy auraDatas
            auraDatas = null