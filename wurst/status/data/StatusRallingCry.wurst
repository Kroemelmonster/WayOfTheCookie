package StatusRallingCry

import AttachmentPoints
import Abilities

import Status

import BoardEntity
import StatusType
import Tooltip
import BoardStack
import SharedStatus
import BoardListenerOnInitiative

init
    Initializer.register(InitializerNames.STATI) -> 
        StatusRallingCry.setup()

public class StatusRallingCry extends SharedStatus
    static StatusType TYPE
    protected static function setup()
        TYPE = new StatusType("Rallying Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        TYPE.setCreationListener() (boardEntity, statusData) ->
            return new StatusRallingCry(TYPE, boardEntity, statusData)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

    static constant ATTACK_BONUS = 0
    static constant ATTACK_BONUS_UNITS = 1

    protected static function createTooltipBaseLinesHero(int attackHero, int attackUnits) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Increases the Attack by "
            + KStringUtils.colored(KStringUtils.COLOR_POSITIVE_TEXT, attackHero))
        ..add("Also increases the Attack of your trops by "
            + KStringUtils.colored(KStringUtils.COLOR_POSITIVE_TEXT, attackUnits))

    protected static function createTooltipBaseLinesUnits(int attack) returns LinkedList<string>
        return new LinkedList<string>
        ..add("You have increased Attack of "
            + KStringUtils.colored(KStringUtils.COLOR_POSITIVE_TEXT, attack))

    protected static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLinesHero(data.getIntData(ATTACK_BONUS), data.getIntData(ATTACK_BONUS_UNITS))

    protected static function createTooltipHero(StatusRallingCry b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLines(createTooltipBaseLinesHero(b.attack, b.attackUnits))

    protected static function createTooltipUnits(StatusRallingCry b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLines(createTooltipBaseLinesUnits(b.attackUnits))

    /* -------------------------------------------------------------------------- */

    protected BoardListenerOnInitiative turnStartListener
    protected effect display
    protected int duration
    protected int attack
    protected int attackUnits

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity, data)

    protected override function setupPrimary(StatusData data)
        duration = data.duration
        attack = data.getIntData(ATTACK_BONUS)
        attackUnits = data.getIntData(ATTACK_BONUS_UNITS)

        let affectedAllies = data.getAllEntityData()
        let secondaryData = StatusData.create()
        ..setIntData(ATTACK_BONUS, attack)
        ..setIntData(ATTACK_BONUS_UNITS, attackUnits)
        for ally in affectedAllies
            applySecondary(ally, secondaryData)
        destroy secondaryData

        turnStartListener = entity.listeners().addOnTurnStart() (BoardListenerOnInitiativeData onInitData) ->
            duration--
            if duration <= 0
                remove()
            onInitData.continue(false)
        
        display = entity.addAttachEffect(Abilities.drumsCasterHeal, AttachmentPoints.origin)
        applyStats(true)

    protected override function setupSecondary(StatusData data)
        attack = data.getIntData(ATTACK_BONUS)
        attackUnits = data.getIntData(ATTACK_BONUS_UNITS)

        display = entity.addAttachEffect(Abilities.drumsCasterHeal, AttachmentPoints.origin)
        applyStats(true)
        
    override function onRefresh(StatusData data)
        // we reject refreshs TODO maybe think about smth better

    override function canPurge() returns boolean
        return false

    protected function applyStats(boolean add)
        if isPrimary()
            applyStatsHero(add)
        else
            applyStatsStack(add)

    protected function applyStatsHero(boolean add)
        entity.toHero().stats.attack.modify(attack, add)

    protected function applyStatsStack(boolean add)
        entity.toStack().stats.attack.modify(attackUnits, add)

    override function createTooltip() returns Tooltip
        if isPrimary()
            return createTooltipHero(this)
        else
            return createTooltipUnits(this)

    override function removeVisuals()
        if display != null
            display.destr()
            display = null

    ondestroy
        if entity.isAlive()
            applyStats(false)
            if turnStartListener != null
                entity.listeners().removeOnTurnStart(turnStartListener)
                turnStartListener = null