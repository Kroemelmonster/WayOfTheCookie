package StatusRallingCry

import AttachmentPoints
import Abilities

import Status

import initlater BoardEntity
import initlater StatusType
import BoardTrigger
import LinkedList
import KStringUtils
import Tooltip

public class StatusRallingCry extends Status
    static StatusType TYPE
    static StatusType HERO_TYPE
    static function setup()
        TYPE = new StatusType("Rallying Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        TYPE.setCreationListener() (boardEntity, statusData) ->
            return new StatusRallingCry(TYPE, boardEntity, statusData)
        TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

        HERO_TYPE = new StatusType("Rallying Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        HERO_TYPE.setCreationListener() (boardEntity, statusData) ->
            return new StatusRallingCryHero(HERO_TYPE, boardEntity, statusData)
        HERO_TYPE.setTooltipListener() data ->
            return createTooltipBaseLines(data)

    protected static constant int ATTACK_BONUS = 0

    protected static function createTooltipBaseLines(int attackValue) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Increases the Attack by "
            + KStringUtils.coloredInt(KStringUtils.COLOR_POSITIVE, attackValue))

    protected static function createTooltipBaseLines(StatusData data) returns LinkedList<string>
        return createTooltipBaseLines(data.getIntData(ATTACK_BONUS))

    protected static function createTooltip(StatusRallingCry b) returns Tooltip
        return Tooltip.create(TYPE.getName())
        ..addLines(createTooltipBaseLines(b.attack))

    /* -------------------------------------------------------------------------- */

    protected int attack = 0

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity)

        refreshStatusData(data)

    override function refreshInner(StatusData data)
        applyStats(false)
        refreshStatusData(data)

    protected function refreshStatusData(StatusData data)
        this.attack = data.getIntData(ATTACK_BONUS)
        applyStats(true)

    protected function applyStats(boolean add)
        let multi = add ? 1 : -1
        entity.toStack().stats.attackModi.addBonus += attack * multi

    override function hide()

    override function createTooltip() returns Tooltip
        return createTooltip(this)

    ondestroy
        if entity.isAlive()
            applyStats(false)
        hide()

class StatusRallingCryHero extends StatusRallingCry
    protected BoardTrigger turnStartListener
    protected effect display
    protected int duration

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity, data)
        display = entity.addAttachEffect(Abilities.drumsCasterHeal, AttachmentPoints.origin)

        turnStartListener = entity.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
            next.continue()

    protected override function refreshStatusData(StatusData data)
        this.attack = data.getIntData(ATTACK_BONUS)
        this.duration = data.duration
        applyStats(true)

    protected override function applyStats(boolean add)
        let multi = add ? 1 : -1
        entity.toHero().stats.attackModi.addBonus += attack * multi

    override function hide()
        if display != null
            display.destr()

    ondestroy
        if turnStartListener != null
            entity.getTriggers().removeOnTurnStart(turnStartListener)