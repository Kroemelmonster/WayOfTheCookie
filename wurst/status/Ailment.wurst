package Ailment
import LinkedList


class AilmentStack
    protected int duration
    protected real damage

    construct(int duration, real damage)
        this.duration = duration
        this.damage = damage

public class AilmentStacks
    private LinkedList<AilmentStack> list = new LinkedList<AilmentStack>()

    function add(int duration, real damage)
        let newStack = new AilmentStack(duration, damage)
        let itr = list.iterator()
        var index = 0
        var added = false
        while itr.hasNext() and added == false
            let stack = itr.next()
            if newStack.damage > stack.damage
                added = true
                list.addAt(newStack, index)
                
            index ++
        if added == false
            list.add(newStack)
        destroy itr

    function getHighestDamage() returns real
        return list.getFirst().damage
    
    function getCombinedDamage() returns real
        let itr = list.iterator()
        var damage = 0.0
        while itr.hasNext()
            let stack = itr.next()
            damage += stack.damage
        destroy itr
        return damage

    function getMaxDuration() returns int
        let itr = list.iterator()
        var maxDuration = 0
        while itr.hasNext()
            let stack = itr.next()
            if stack.duration > maxDuration
                maxDuration = stack.duration
        destroy itr
        return maxDuration

    function removeOneDuration() returns boolean
        let itr = list.iterator()
        while itr.hasNext()
            let stack = itr.next()
            stack.duration --
            if stack.duration == 0
                itr.remove()
        destroy itr
        return list.isEmpty()

    function size() returns int
        return list.size()

    ondestroy
        for stack in list
            destroy stack
        destroy list