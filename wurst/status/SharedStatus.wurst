package SharedStatus

import initlater StatusType
import Status
import BoardEntity

public abstract class SharedStatus extends Status
    protected LinkedList<SharedStatus> secondaryStati
    protected SharedStatus primary

    construct(StatusType statusType, BoardEntity entity, StatusData data)
        super(statusType, entity)

        primary = data.linkToPrimary

        if isPrimary()
            secondaryStati = new LinkedList<SharedStatus>
            setupPrimary(data)
        else
            primary.secondaryStati.add(this)
            setupSecondary(data)

    protected function isPrimary() returns boolean
        return primary == null

    protected abstract function setupPrimary(StatusData data)
    protected abstract function setupSecondary(StatusData data)

    protected function removePrimary()
        let copied = secondaryStati.copy()
        secondaryStati.clear()
        for secondary in copied
            secondary.remove()
        destroy this

    protected function removeSecondary()
        if primary.secondaryStati.has(this)
            primary.secondaryStati.remove(this)
        destroy this

    /** this will !not destroy the statusData **/
    protected function applySecondary(BoardEntity target, StatusData data)
        data.setSecondary(this)
        typ.applyNewStatusAndKeepData(target, data)

    override protected function removeInner(SequenzListener next)
        if isPrimary()
            removePrimary()
        else
            removeSecondary()
        if next != null
            next.continue()

    ondestroy
        if secondaryStati != null
            destroy secondaryStati
            secondaryStati = null