package SlowDebuff

import AttachmentPoints
import Icons
import Abilities

import Status
import UITooltip

import initlater BoardStack
import initlater BoardEntity
import initlater StatusType
import BoardTrigger

public class SlowDebuff extends Status
    private effect display
    
    private static constant string NAME = "Slowed"

    private BoardTrigger turnStartListener
    private int duration = 0
    private BoardStack stack

    static function setup() returns StatusType
        let statusType = new StatusType(Icons.bTNSlow, NAME)
        statusType.setCreationListener()(BoardEntity entity) ->
            return new SlowDebuff(statusType, entity)
        statusType.setTooltipListener() (StatusData data) ->
            return createTooltip(null, data)

        return statusType

    construct(StatusType statusType, BoardEntity entity)
        super(statusType, entity)
        stack = entity.toStack()

        display = stack.addAttachEffect(Abilities.slowTarget, AttachmentPoints.foot)

        toggle(true)


        turnStartListener = stack.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
            next.continue()

    private static function createTooltip(SlowDebuff b, StatusData data) returns Tooltip
        let tooltip = Tooltip.create(NAME)
        if b == null
            tooltip.addLine("Reduces the initative by 1 and increases move cost per cell by 50%")
        else
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("")
            tooltip.addLine("Reduces the initative by 1 and increases move cost per cell by 50%")
        
        // TODO do smth with data
        if data != null
            destroy data
        return tooltip

    override function updateInner(StatusData data)
        this.duration += data.duration

    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this, null)

    private function toggle(boolean flag)
        let multi = flag ? 1 : -1
        stack.stats.moveCoefficient += 50 * multi
        stack.stats.initModi.addBonus -= 1 * multi
        stack.getBoard().getInitiative().update()

    override function hide()
        if display != null
            display.destr()

    ondestroy
        toggle(false)

        stack.getTriggers().removeOnTurnStart(turnStartListener)
        if display != null
            display.destr()