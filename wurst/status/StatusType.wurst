package StatusType

import Status
import BoardEntity
import Tooltip
import Icon

interface StatusCreateListener
    function create(BoardEntity entity, StatusData data) returns Status

interface StatusCreateTooltipLinesListener
    function create(StatusData data) returns LinkedList<string>

interface StatusCanApplyListener
    function canApply(BoardEntity entity, StatusData data) returns boolean

public class StatusType extends Icon
    protected StatusCreateListener listener
    protected StatusCreateTooltipLinesListener tooltipLinesListener
    protected StatusCanApplyListener canApplyListener

    construct(string name, string icon)
        super(name, icon)
        
    function setCreationListener(StatusCreateListener listener)
        this.listener = listener

    function setCanApplyListener(StatusCanApplyListener listener)
        canApplyListener = listener

    function setTooltipListener(StatusCreateTooltipLinesListener listener)
        this.tooltipLinesListener = listener

    function canApplyTo(BoardEntity entity, StatusData data) returns boolean
        if canApplyListener == null
            return true
        return canApplyListener.canApply(entity, data)

    /** Pls use the StatusController to apply and remove stati **/
    function applyNewStatusTo(BoardEntity entity, StatusData data) returns Status
        let status = applyNewStatusAndKeepData(entity, data)
        if data != null
            destroy data
        return status

    /** only use this if you reaaaly know what you are doing **/
    function applyNewStatusAndKeepData(BoardEntity entity, StatusData data) returns Status
        let status = listener.create(entity, data)
        entity.addStatus(status)
        return status

    function createTooltipLines() returns LinkedList<string>
        return createTooltipLines(null)

    function createTooltipLines(StatusData data) returns LinkedList<string>
        let lines = new LinkedList<string>()
        ..add(KStringUtils.data("Status", KStringUtils.secondary(name)))
        ..addAllAndDestroy(tooltipLinesListener.create(data))
        if data != null
            destroy data
        return lines

    function createTooltip() returns Tooltip
        return createTooltip(null)

    function createTooltip(StatusData data) returns Tooltip
        return Tooltip.create(name)
        ..addLines(createTooltipLines(data))

    function toString() returns string
        return "StatusType '"+name+"'"
