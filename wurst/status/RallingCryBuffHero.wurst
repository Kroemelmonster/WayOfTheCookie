package RallingCryBuffHero

import AttachmentPoints
import Abilities

import Status
import UITooltip

import initlater BoardEntity
import initlater StatusType
import BoardTrigger

public class RallingCryBuffHero extends Status
    static StatusType TYPE

    static function setup()
        TYPE = new StatusType("Ralling Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        TYPE.setCreationListener()(BoardEntity entity) ->
            return new RallingCryBuffHero(TYPE, entity)
        TYPE.setTooltipListener() (StatusData data) ->
            return createTooltip(null, data)

    @inline
    private static function getAttackValue(StatusData data) returns int
        return data.firstIntValue

    private static function createTooltip(RallingCryBuffHero b, StatusData data) returns Tooltip
        let tooltip = Tooltip.create(TYPE.getName())
        int attackValue
        if b != null
            tooltip.addLine(Tooltip.stat("Duration", b.duration))
            tooltip.addLine("")
            attackValue = b.attack
        else
            attackValue = getAttackValue(data)
            destroy data
            
        tooltip.addLine("Increases the Attack by "+Tooltip.coloredInt(Tooltip.COLOR_POSITIVE, attackValue))
        return tooltip

    /* -------------------------------------------------------------------------- */

    private effect display
    private BoardTrigger turnStartListener
    private int duration
    private int attack = 0

    construct(StatusType statusType, BoardEntity entity)
        super(statusType, entity)
        display = entity.addAttachEffect(Abilities.drumsCasterHeal, AttachmentPoints.origin)

        turnStartListener = entity.getTriggers().addTurnStart() (SequenzListener next) ->
            duration--
            if duration <= 0
                kill()
                    
            else
                next.continue()

    override function updateInner(StatusData data)
        this.duration = data.duration
        toggle(false)
        this.attack = getAttackValue(data)
        toggle(true)


    override function createCurrentTooltip() returns Tooltip
        return createTooltip(this, null)

    private function toggle(boolean flag)
        let multi = flag ? 1 : -1
        let heroStack = entity.toHero()
        heroStack.stats.attackModi.addBonus += attack * multi

    override function hide()
        if display != null
            display.destr()

    ondestroy
        if entity.isAlive()
            toggle(false)
            entity.getTriggers().removeOnTurnStart(turnStartListener)
        hide()

        if onEndListener != null
            destroy onEndListener