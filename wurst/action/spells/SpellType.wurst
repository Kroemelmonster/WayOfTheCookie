package SpellType

import public SpellAction

import Hero
import HeroData
import HeroStats
import Stats

interface SpellCreateListener
    function create(BoardHero hero, Spell spell) returns SpellAction

interface SpellTooltipLinesCreateListener
    function create(SpellLevel level, HasHeroStats stats) returns LinkedList<string>

public class SpellType extends ActionType
    protected static LinkedList<SpellType> all = new LinkedList<SpellType>

    static function forEach(LLItrClosure<SpellType> itr)
        all.forEach(itr)

    static function allIterator() returns LLIterator<SpellType>
        return all.iterator()
        
    protected SpellCreateListener listener
    protected SpellTooltipLinesCreateListener tooltipListener

    protected LinkedList<Tag> tags
    protected LinkedList<SpellLevel> levels

    construct(string name, string icon)
        super(name, icon)
        levels = new LinkedList<SpellLevel>
        tags = new LinkedList<Tag>
        all.add(this)
    
    function onActionCreate(SpellCreateListener listener)
        this.listener = listener

    function onCreateTooltipLines(SpellTooltipLinesCreateListener tooltipListener)
        this.tooltipListener = tooltipListener

    function setTags(vararg Tag newTags)
        for tag in newTags
            tags.add(tag)

    function getTags() returns LinkedList<Tag>
        return tags

    function addLevel(ActionCostPreset usageCost, HeroDataChange payCost) returns SpellLevel
        let level = new SpellLevel(usageCost, payCost)
        levels.add(level)
        return level

    function getMaxLevel() returns int
        return levels.size() - 1

    function getLevel(int level) returns SpellLevel
        return levels.get(level)

    function createAction(BoardHero hero, Spell spell) returns SpellAction
        return listener.create(hero, spell)
            
    function create(Hero hero) returns Spell
        return new Spell(this, hero)

    function createTooltipLines(SpellLevel level, HasHeroStats stats) returns LinkedList<string>
        return tooltipListener.create(level, stats)

    function createTooltip(Hero hero, HasHeroStats stats, int forLevel, boolean showLevelCost) returns Tooltip
        let tt = Tooltip.create(getName())
        if not forLevel.isBetween(0, getMaxLevel())
            return null
        let level = getLevel(forLevel)
        if showLevelCost
            level.getPayCost().setupTooltipCost(tt, hero)
            tt.addLines(level.getUsageCost().createTooltipLines())
        else
            level.getUsageCost().setupTooltipCost(tt)
        tt.addLine(KStringUtils_data("Tags", tags))
        tt.addLines(createTooltipLines(level, stats))
        return tt

    function createTooltip(Hero hero, boolean showLevelCost) returns Tooltip
        return createTooltip(hero, hero.stats, 0, showLevelCost)