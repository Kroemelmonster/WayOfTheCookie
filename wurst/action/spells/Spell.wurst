package Spell

import initlater Hero

import SpellAction
import HeroData
import Globals
import Data
import HeroStats

public class SpellLevel extends Data
    protected ActionCostPreset usageCost
    protected HeroDataChange levelCost

    construct(ActionCostPreset usageCost, HeroDataChange levelCost)
        this.usageCost = usageCost
        this.levelCost = levelCost

    function getUsageCost() returns ActionCostPreset
        return usageCost

    function getPayCost() returns HeroDataChange
        return levelCost

public class Spell
    static function getBaseMultiFromPower(int power) returns real
        return (power * DAMAGE_PER_SPELLPOWER / 100.0)

    protected SpellType typ
    protected Hero hero

    protected int level = 0
    
    protected boolean quickCast = false

    construct(SpellType typ, Hero hero)
        this.typ = typ
        this.hero = hero

    function create(BoardHero hero) returns SpellAction
        return typ.createAction(hero, this)

    function getLevel() returns int
        return level

    function getMaxLevel() returns int
        return typ.getMaxLevel()

    function getLevelData(int level) returns SpellLevel
        return typ.getLevel(level)

    function canLevelUp() returns boolean
        if level >= typ.getMaxLevel()
            return false
        return getLevelData(level + 1).levelCost.canPay(hero)

    function levelUp() returns boolean
        if not canLevelUp()
            return false
        level ++
        getLevelData(level).levelCost.pay(hero)
        return true

    function getName() returns string
        return typ.getName()

    function getIcon() returns string
        return typ.getIcon()

    function getExtendedName() returns string
        return getName() + " [" + (level + 1).toString() + "]"

    function getType() returns SpellType
        return typ

/* -------------------------------------------------------------------------- */

    function createTooltip(int level, HasHeroStats stats, boolean showLevelCost) returns Tooltip
        return typ.createTooltip(hero, stats, level, showLevelCost)

    function createTooltip(int level, boolean showLevelCost) returns Tooltip
        return createTooltip(level, hero.stats, showLevelCost)

    function createTooltip(boolean showLevelCost) returns Tooltip
        return createTooltip(level, hero.stats, showLevelCost)

    function createTooltipLines(SpellLevel level) returns LinkedList<string>
        return typ.createTooltipLines(level, hero.stats)



        