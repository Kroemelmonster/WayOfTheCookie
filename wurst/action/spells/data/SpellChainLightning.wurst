package SpellChainLightning

import Abilities

import SpellActionTarget

import BoardStack
import PlayerData
import BoardController
import UIMenuActionConsole
import AnimationWait
import Damage
import AnimationCast
import HeroData
import HeroStats
import Stats

init
    Initializer.register(InitializerNames.SPELLS) -> 
        SpellChainLightning.setup()

public class SpellChainLightning extends SpellActionTarget
    static SpellType TYPE
    protected static function setup()
        damagePreview = DamagePreview.create(SourceType.SPELL, DamageType.MAGIC)
        TYPE = SpellActionTarget.createType("Chain Lightning", Icons.bTNChainLightning)
        TYPE.setTags(Tag.SPELL, Tag.MAGIC, Tag.LIGHTNING)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 7), HeroDataChange.create(0, 1, 3))
        ..setIntData(DAMAGE, 65)
        ..setIntData(CHAINS, 2)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 12), HeroDataChange.create(0, 2, 5))
        ..setIntData(DAMAGE, 125)
        ..setIntData(CHAINS, 3)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 20), HeroDataChange.create(0, 3, 7))
        ..setIntData(DAMAGE, 185)
        ..setIntData(CHAINS, 4)
        TYPE.onActionCreate() (hero, spell) -> 
            return new SpellChainLightning(hero, spell)
        TYPE.onCreateTooltipLines() (level, stats) -> 
            return createTooltipLines(level, stats)

    private static constant DAMAGE = 0
    private static constant CHAINS = 1
    
    private static constant CHAIN_RANGE = 3
    private static constant CHAIN_REDUCTION = 0.90

    private static DamagePreview damagePreview

    private static function calculateDamage(SpellLevel level, HasHeroStats stats, int amountOfChained) returns DamagePreview
        var multi = 1.0
        for i = 1 to amountOfChained
            multi *= CHAIN_REDUCTION
        if stats != null
            multi *= stats.getDamageMulti(TYPE.getTags())
        let baseDamage = level.getIntData(DAMAGE)
        damagePreview.dmg = realRange(baseDamage * 0.65 * multi, baseDamage* 1.85 * multi)
        return damagePreview

    private static function createTooltipLines(SpellLevel level, HasHeroStats stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Enemy"))
        ..add(KStringUtils.stat("Damage", calculateDamage(level, stats, 0).toColoredText()))
        ..add("")
        ..add("You strike a Foe with Lightning which chains up to "
         + KStringUtils.primaryString(level.getIntData(CHAINS).toString()) + " times")
        ..add("Each time the damage is descreased by "
         + KStringUtils.primaryPercent(1 - CHAIN_REDUCTION))

    /* -------------------------------------------------------------------------- */
    
    private LinkedList<Cell> highlightedArea = new LinkedList<Cell>()

    override function canTarget(BoardStack potentialTarget) returns boolean
        return hero.isEnemy(potentialTarget)

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        if highlightedArea.has(cell)
            return CellHighlightRune.CAST
        return CellHighlightRune.NONE

    override function recalculateHighlight(Player p)
        let highlightedCell = p.currentMousePosition.cell

        highlightedArea.clear()
        if highlightedCell == null or not targets.has(highlightedCell.getStack())
            hideTooltip()
            return

        showTooltipAndFillHighlight(highlightedCell.getStack())

    override function castAt(Cell cell) returns boolean
        if not targets.has(cell.getStack())
            return false
        AnimationCast.atCell(hero, cell) () ->
            let rolledBaseDamage = calculateDamage(level, hero.stats, 0).getRandomInstance()
            let prevTargets = new LinkedList<BoardStack>()
            chainToNext(prevTargets, entity, rolledBaseDamage, cell.getStack(), 0) ->
                destroy prevTargets
                destroy rolledBaseDamage
                finishCast(true)
        return true

    private function chainToNext(LinkedList<BoardStack> prevTargets, BoardEntity prev, 
        DamageInstance baseDamage, BoardStack target, int chains, SequenzListener next)

        let targetPos = target.getPos3Real()
        var lightningModel = LIGHTNING_CHAIN_LIGHTNING_SEECONDARY
        if chains == 0
            lightningModel = LIGHTNING_CHAIN_LIGHTNING_PRIMARY
        let bolt = addLightning(lightningModel, true, prev.getPos3Real(), targetPos)
        let e = addEffect(Abilities.boltImpact, targetPos)
        AnimationWait.time(entity.getBoard(), 0.3) ->
            bolt.destr()
            e.moveAndDestroy()
            var targetCell = target.getCell()
            BoardController.dealDamage(hero, baseDamage, target) -> 
                if chains < level.getIntData(CHAINS)
                    prevTargets.add(target)
                    baseDamage.dmg *= CHAIN_REDUCTION

                    if target.isOnBoard()
                        // why not just use prevTargetCell ?? because the unit might be moved so the chain now goes off the new position
                        targetCell = target.getCell()
                    let nextTarget = getNextTarget(prevTargets, targetCell)
                    if nextTarget == null
                        next.continue()
                    else
                        chainToNext(prevTargets, target, baseDamage, nextTarget, chains + 1, next)
                else
                    next.continue()

    private function getNextTarget(LinkedList<BoardStack> prevTargets, Cell fromCell) returns BoardStack
        BoardStack nextTarget = null
        let itr = fromCell.eachCellInRangeIterator(intRange(1, CHAIN_RANGE))
        while itr.hasNext() and nextTarget == null
            let cell = itr.next()
            let possibleTarget = cell.getStack()
            if possibleTarget != null and possibleTarget.isEnemy(entity) and not prevTargets.has(possibleTarget)
                nextTarget = possibleTarget

        destroy itr
        return nextTarget

    private function showTooltipAndFillHighlight(BoardStack target)
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines(level, hero.stats))
        if target != null

            let prevTargets = new LinkedList<BoardStack>()
            prevTargets.add(target)

            highlightedArea.add(target.getCell())
            var chain = 0
            while chain <= level.getIntData(CHAINS)
                let currentTarget = prevTargets.peek()
                if currentTarget == null
                    break
                tt.addLine("")
                calculateDamage(level, hero.stats, chain)
                .extendTooltipWithSpecific(tt, entity, currentTarget)
                highlightedArea.add(currentTarget.getCell())
                chain++
                prevTargets.add(getNextTarget(prevTargets, currentTarget.getCell()))
            destroy prevTargets
        
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)
    
    private function hideTooltip()
        UITooltip.hide(entity.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function onUIMouseEnter()
        showTooltipAndFillHighlight(null)

    override function onUIMouseLeave()
        hideTooltip()
       
    private construct(BoardHero hero, Spell spell)
        super(hero, spell)

    ondestroy
        if highlightedArea != null
            destroy highlightedArea