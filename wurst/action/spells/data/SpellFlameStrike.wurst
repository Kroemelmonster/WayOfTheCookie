package SpellFlameStrike

import Abilities

import SpellActionTarget

import BoardStack
import PlayerData
import BoardController
import UIMenuActionConsole
import AnimationWait
import Damage
import AnimationCast
import HeroData
import Scheduler
import CellObstacleType
import ObstacleBurningGround
import CellObstacle

init
    Initializer.register(InitializerNames.SPELLS) -> 
        SpellFlameStrike.setup()

public class SpellFlameStrike extends SpellActionTarget
    static SpellType TYPE
    protected static function setup()
        OBSTACLE = ObstacleBurningGround.TYPE
        TYPE = SpellActionTarget.createType("Flame Strike", Icons.bTNWallOfFire)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 6), HeroDataChange.create(1, 0, 3))
        ..setIntData(DAMAGE, 90)
        ..setIntData(BURNING_GROUND_DURATION, 300)
        ..setRealData(BURNING_GROUND_DAMAGE_PERC, 0.5)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 9), HeroDataChange.create(1, 0, 5))
        ..setIntData(DAMAGE, 150)
        ..setIntData(BURNING_GROUND_DURATION, 500)
        ..setRealData(BURNING_GROUND_DAMAGE_PERC, 0.6)
        TYPE.addLevel(ActionCostPreset.createWithMana(1, true, 12), HeroDataChange.create(2, 0, 8))
        ..setIntData(DAMAGE, 300)
        ..setIntData(BURNING_GROUND_DURATION, 700)
        ..setRealData(BURNING_GROUND_DAMAGE_PERC, 0.7)
        TYPE.onActionCreate() (hero, spell) -> 
            return new SpellFlameStrike(hero, spell)
        TYPE.onCreateTooltipLines() (level, spellStats) -> 
            return createTooltipLines(level, spellStats)

    private static constant int DAMAGE = 0
    private static constant int BURNING_GROUND_DURATION = 1
    private static constant int BURNING_GROUND_DAMAGE_PERC = 0
    private static CellObstacleType OBSTACLE

    private static constant DamagePreview damagePreview = DamagePreview.create(SourceType.SPELL, DamageType.FIRE)
    
    private static function calculateDamage(SpellLevel level, HasSpellStats spellStats) returns DamagePreview
        var multi = 1.0
        if spellStats != null
            multi = spellStats.getDamageMulti()
        let baseDamage = level.getIntData(DAMAGE)
        damagePreview.dmg = realRange(baseDamage * 0.8 * multi, baseDamage * 1.2 * multi)
        return damagePreview

    private static function createTooltipLines(SpellLevel level, HasSpellStats spellStats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Area"))
        ..add(KStringUtils.stat("Damage", calculateDamage(level, spellStats).toColoredText()))
        ..add("")
        ..add("Conjures a pillar of fire which damages all targets in an area.")
        ..add("Leaves a trail of burning ground which deals "
         + KStringUtils.primaryPercent(level.getRealData(BURNING_GROUND_DAMAGE_PERC))
         + " each time a unit enters it.")
        ..add("The Burning Ground fizzles in "
         + KStringUtils.primaryString(level.getIntData(BURNING_GROUND_DURATION).toString())
         + " " + KStringUtils.secondaryString("timeunits") + ".")

    private static function createObstacleData(SpellLevel level, BoardEntity source, DamageInstance rolledDamage) returns CellObstacleData
        let previewCopy = damagePreview.copy()
        let factor = level.getRealData(BURNING_GROUND_DAMAGE_PERC)
        previewCopy.setDamage(realRange(rolledDamage.dmg * factor * 0.8, rolledDamage.dmg * factor * 1.2))
        return CellObstacleData.create()
        ..setDamagePreview(previewCopy)
        ..setEntityData(source)
    
    /* -------------------------------------------------------------------------- */

    private LinkedList<Cell> highlightedArea = new LinkedList<Cell>()

    override function canTarget(BoardStack potentialTarget) returns boolean
        return potentialTarget != null

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        if highlightedArea.has(cell)
            return CellHighlightRune.CAST
        return CellHighlightRune.NONE

    override function recalculateHighlight(Player p)
        let highlightedCell = p.currentMousePosition.cell
        if highlightedCell == null
            hideTooltip()
            return
        
        highlightedArea.clear()
        highlightedCell.forEachCellsInRange(intRange(0, 1)) cell ->
            highlightedArea.add(cell)
            
        showTooltip(true)

    override function castAt(Cell cell) returns boolean
        AnimationCast.atCell(hero, cell) () ->
            let e = addEffect(Abilities.flameStrike, cell.getCoord())
            AnimationWait.time(entity.getBoard(), 0.2) ->
                e.destr()
                let delayUntil = Scheduler.getTimeIn(0.667)
                let groundEffect = new LinkedList<CellObstacle>()
                hitNextCell(highlightedArea.iterator(), groundEffect, calculateDamage(level, this).getRandomInstance()) ->
                    AnimationWait.untill(entity.getBoard(), delayUntil) ->
                        finishCast(true)
                    entity.getBoard().getInitiative().addSequenzListener(200) (SequenzListener next) ->
                        for obstacle in groundEffect
                            destroy obstacle
                        destroy groundEffect
                        next.continue()
            
        return true

    private function hitNextCell(LLIterator<Cell> cellItr, LinkedList<CellObstacle> groundEffect, DamageInstance rolledDamage, SequenzListener next)
        if not cellItr.hasNext()
            destroy rolledDamage
            destroy cellItr
            next.continue()
            return
        let cell = cellItr.next()
        addBurningGround(cell, groundEffect, rolledDamage)
        let potentialTarget = cell.getStack()
        

        if canTarget(potentialTarget)
            BoardController.dealDamage(hero, rolledDamage, potentialTarget) -> 
                hitNextCell(cellItr, groundEffect, rolledDamage, next)
        else
            hitNextCell(cellItr, groundEffect, rolledDamage, next)

    private function addBurningGround(Cell cell, LinkedList<CellObstacle> groundEffect, DamageInstance rolledDamage)
        if not cell.isBlocked()
            groundEffect.add(OBSTACLE.create(cell, createObstacleData(level, hero, rolledDamage)))

    private function showTooltip(boolean showTargets)
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines(level, this))
        if showTargets
            for cell in highlightedArea
                if targets.has(cell.getStack())
                    tt.addLine("")
                    calculateDamage(level, this)
                    .extendTooltipWithSpecific(tt, entity, cell.getStack())
        
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)
    
    private function hideTooltip()
        UITooltip.hide(entity.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function onUIMouseEnter()
        showTooltip(false)

    override function onUIMouseLeave()
        hideTooltip()

    private construct(BoardHero hero, Spell spell)
        super(hero, spell)

    ondestroy
        if highlightedArea != null
            destroy highlightedArea