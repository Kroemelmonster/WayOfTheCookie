package SpellRallingCry

import WarcrySpellAction

import PlayerData
import UIMenuActionConsole
import AnimationCast
import StatusType
import StatusController
import Status
import StatusRallingCry
import BoardStack
import HeroData
import Scheduler
import AnimationWait
import HeroStats
import Stats

init
    Initializer.register(InitializerNames.SPELLS) -> 
        SpellRallingCry.setup()

public class SpellRallingCry extends WarcrySpellAction
    static SpellType TYPE
    protected static function setup()
        STATUS = StatusRallingCry.TYPE
        TYPE = WarcrySpellAction.createType("Rallying Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        ..setTags(Tag.WARCRY)
        TYPE.addLevel(ActionCostPreset.create(0, false, 3), HeroDataChange.createForRune(1, 0, 1))
        ..setIntData(ATTACK_BONUS, 3)
        ..setRealData(ATTACK_PERC, 0.5)
        TYPE.addLevel(ActionCostPreset.create(0, false, 2), HeroDataChange.createForRune(2, 0, 1))
        ..setIntData(ATTACK_BONUS, 5)
        ..setRealData(ATTACK_PERC, 0.6)
        TYPE.addLevel(ActionCostPreset.create(0, false, 1), HeroDataChange.createForRune(3, 0, 2))
        ..setIntData(ATTACK_BONUS, 7)
        ..setRealData(ATTACK_PERC, 0.7)
        TYPE.onActionCreate() (hero, spell) -> 
            return new SpellRallingCry(hero, spell)
        TYPE.onCreateTooltipLines() (level, spell) -> 
            return createTooltipLines(level, spell)

    private static constant ATTACK_BONUS = 0
    private static constant ATTACK_PERC = 0

    private static StatusType STATUS

    private static function createTooltipLines(SpellLevel level, HasHeroStats stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.data("Target", "Allies/Self"))
        ..add("")
        ..add("Gives your self temporary Attack Bonus. Then Gives all your troops "
         + KStringUtils.primaryPercent(getAtackPerc(level, stats))
         + " of your total Attack as additional Bonus")
        ..add(KStringUtils.line())
        ..addAllAndDestroy(STATUS.createTooltipLines(createStatusData(level, stats)))

    private static function getAtackPerc(SpellLevel level, HasHeroStats stats) returns real
        return level.getRealData(ATTACK_PERC) * stats.getStatusEffectivness(TYPE.getTags())
    
    private static function createStatusData(SpellLevel level, HasHeroStats stats) returns StatusData
        let attackBonus = (level.getIntData(ATTACK_BONUS) * stats.getStatusEffectivness(TYPE.getTags())).round()
        let attackBonusUnits = ((stats.getAttack().value() + attackBonus) * getAtackPerc(level, stats)).round()
        return StatusData.create(1)
        ..setIntData(StatusRallingCry.ATTACK_BONUS, attackBonus)
        ..setIntData(StatusRallingCry.ATTACK_BONUS_UNITS, attackBonusUnits)

    /* -------------------------------------------------------------------------- */

    override function cast()
        AnimationCast.withoutTarget(entity) ->
            flashEffect("WhiteChakraExplosion.mdx", entity.getPos3Real())
            let backSwingUntill = Scheduler.getTimeIn(0.5)
            applyStati() ->
                AnimationWait.untill(entity.getBoard(), backSwingUntill) -> 
                    finishCast(true)

    private function applyStati(SequenzListener next)
        let data = createStatusData(level, hero.stats)
        ..clearEntityData()
        entity.getForce().forEachStack() (BoardStack ally) ->
            data.addEntityData(ally)
        StatusController.apply(STATUS, entity, data) (status) ->
            next.continue()

    private function showPreview()
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines(level, hero.stats))
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    private function hidePreview()
        UITooltip.hide(entity.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function onUIMouseEnter()
        showPreview()

    override function onUIMouseLeave()
        hidePreview()

    private construct(BoardHero hero, Spell spell)
        super(hero, spell)
