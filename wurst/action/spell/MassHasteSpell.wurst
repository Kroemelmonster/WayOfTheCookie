package MassHasteSpell
import InstantSpell
import Icons
import BoardHero
import LinkedList
import Cell
import PlayerData
import Action
import UITooltip
import UIActionWindow
import BoardTrigger
import BoardStack
import CastAnimation
import StatusController
import StatusType
import Status
import BoardController
import DelayAnimation
import UIController

public class MassHasteSpell extends InstantSpell
    static constant string NAME = "Mass Haste"
    static constant string ICON = Icons.bTNScrollOfHaste

    private static constant int MANA_COST = 5

    private static function getStatus() returns StatusType
        return StatusTypeSet.HASTED

    construct(BoardHero hero)
        super(hero, ICON, NAME, MANA_COST, 0)

    static function createTooltip(boolean isDefault, int power) returns Tooltip
        let tt = Tooltip.create(NAME)
        ..setCost(MANA_COST)
        ..addLine(Tooltip.stat("Target", "Instant"))
        ..addLine("")
        ..addLine("Makes all allies faster")
        ..addLine("---")
        ..addStatusType(getStatus())
        return tt

    override function activate()
        CastAnimation.create(entity) -> 
            let board = entity.getBoard()
            board.forEachStack() (BoardStack target) ->
                if target.getPlayer() == entity.getPlayer()
                    StatusController.add(getStatus(), target, new StatusData(2))

            UIController.triggerOnAnyStackCellChange(board)
            DelayAnimation.create(board, 0.5) ->
                cast()
                BoardController.finishOrder(entity, false)


    private function showPreview()
        let tt = createTooltip(false, hero.stats.getPower())
        tt.display(entity.getPlayer(), true)
        UIActionWindow.updateActionPoints(entity, 99)
                
    @inline
    private function hidePreview()
        UITooltip.hide(entity.getPlayer())
        UIActionWindow.updateActionPoints(entity, 0)

    override function onUIMouseEnter()
        showPreview()

    override function onUIMouseLeave()
        hidePreview()

    override function executeForKI(SequenzListenerStatus listener)
        Log.trace("YOU NEED TO WRITE KI FOR HASTE SPELL")
        listener.continue(-1)