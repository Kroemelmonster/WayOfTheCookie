package HeroActionSkip

import BoardEntity
import Action
import BoardController
import UIMenuActionConsole
import BoardTrigger
import ActionCost
import UITooltip
import Tooltip
import initlater HeroActionType
import initlater HeroAction
import BoardHero
import Cell
import PlayerData

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        HeroActionSkip.setup()

public class HeroActionSkip extends HeroAction
    static HeroActionType TYPE
    protected static function setup()
        TYPE = HeroAction.createType("Skip", Icons.bTNCancel, ActionCostPreset.create(0, true))
        TYPE.onCreate() hero -> 
            return new HeroActionSkip(hero)
        TYPE.onCreateTooltipLines() -> 
            return createTooltipLines()

    private static function createTooltipLines() returns LinkedList<string>
        return new LinkedList<string>
        ..add("This just skips ya turn")
        
    override function canActivate() returns boolean
        return true

    override function activate()
        BoardController.finishOrder(entity, cost)
        
    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines())
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    override function onUIMouseLeave()
        UITooltip.hide(entity.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)

    override function getPreviewColorForCell(Cell cell) returns CellPreviewColor
        return CellPreviewColor.NONE

    override function getHighlightColorForCell(Player p, Cell cell) returns CellHighlightColor
        return CellHighlightColor.NONE

    override function recalculatePreview()
        return

    override function recalculateHighlight(Player p)
        return

    override function sendTargetOrder(Cell cell) returns boolean
        return false

    private construct(BoardHero hero)
        super(hero, TYPE)