package HeroSkipAction


import Icons

import Action
import InstantAction
import Abilities

import OrderSystem
import BoardController
import UIMenuActionConsole

import initlater BoardEntity
import BoardTrigger
import ActionCost
import UITooltip
import Tooltip
import ActionType
import LinkedList

public class HeroSkipAction extends InstantAction
    static ActionType TYPE
    static function setup()
        TYPE = InstantAction.createType("Skip", Icons.bTNCancel)
        TYPE.onCreate() entity -> 
            return new HeroSkipAction(entity)
        TYPE.onCreateTooltipLines() amount -> 
            return createTooltipLines(true)

    private static constant ActionCostPreset BASE_COST = ActionCostPreset.create(0, true)

    private static function createBaseTooltipLines(boolean addCost) returns LinkedList<string>
        if addCost
            return BASE_COST.createTooltipLines()
        return new LinkedList<string>

    private static function createTooltipLines(boolean addCost) returns LinkedList<string>
        return createBaseTooltipLines(addCost)
        ..add("This just skips ya turn")

    construct(BoardEntity entity)
        super(entity, TYPE, BASE_COST)
        
    override function canActivate() returns boolean
        return true

    override function activate()
        BoardController.finishOrder(entity, cost)
        
    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines(false))
        UITooltip.display(entity.getPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    override function onUIMouseLeave()
        UITooltip.hide(entity.getPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)

    ondestroy