package RallingCrySpell

import PlayerData
import UITooltip
import BoardController


import UIBoardActionMenu
import CastAnimation
import BoardTrigger
import Spell
import BoardHero
import BoardEntity
import SkillTree
import StatusType
import StatusController
import Status
import WarcrySpell
import SkillTreeChieftain
import RallingCryBuffHero
import LinkedList
import BoardStack
import RallingCryBuffStack
import ActionCost

public class RallingCrySpell extends WarcrySpell
    static SpellType TYPE
    static function setup()
        STATUS = RallingCryBuffHero.TYPE
        STATUS_STACKS = RallingCryBuffStack.TYPE
        TYPE = new SpellType("Ralling Cry", "Icons\\BTNAbilityWarriorWarCry.blp")
        TYPE.onCreate() boardHero -> 
            return new RallingCrySpell(boardHero)

    private static constant ActionCostPreset BASE_COST = ActionCostPreset.create(0, false, 3)
    private static constant int array[5] ATTACK_BONUS = [3, 5, 7, 9, 11]
    static StatusType STATUS
    static StatusType STATUS_STACKS

    @inline
    private static function createStatusData(int level) returns StatusData
        return StatusData.createDurationI(1, ATTACK_BONUS[level])

    static function createTooltip(int level) returns Tooltip
        let tt = Tooltip.create(TYPE.getName())
        ..setCost(BASE_COST)
        ..addLine(Tooltip.stat("Target", "Allies/Self"))
        ..addLine("")
        ..addLine("Gives your self and all your troops a temporary Attack Bonus")
        ..addStatusType(STATUS, createStatusData(level))
        return tt
    
    /* -------------------------------------------------------------------------- */

    private LinkedList<BoardStack> affectedAllies = new LinkedList<BoardStack>()

    private construct(BoardHero hero)
        super(hero, TYPE, BASE_COST)
        let skillTree = hero.hero.getSkillTree(SkillTreeChieftain.TYPE) castTo SkillTreeChieftain
        setLevel(skillTree.rallingCryLevel)

    override function activate()
        CastAnimation.create(entity) -> 
            StatusController.add(STATUS, entity, createStatusData(level))
            ..addOnEndListener() (SequenzListener next) ->
                affectedAllies.forEach() (BoardStack ally) ->
                    if ally.isAlive()
                        StatusController.remove(STATUS_STACKS, ally)
                next.continue()

            entity.getBoard().forEachStack() (BoardStack ally) ->
                if ally.getPlayer() == entity.getPlayer()
                    affectedAllies.add(ally)
                    StatusController.add(STATUS_STACKS, ally, createStatusData(level))
            BoardController.finishOrder(entity, cost)

    private function showPreview()
        let tt = createTooltip(level)
        tt.setKey(key)
        tt.display(entity.getPlayer(), true)
        UIBoardActionMenu.updateActionPoints(entity, cost)

    private function hidePreview()
        UITooltip.hide(entity.getPlayer())
        UIBoardActionMenu.updateActionPoints(entity)

    override function onUIMouseEnter()
        showPreview()

    override function onUIMouseLeave()
        hidePreview()

    ondestroy

    /* ----------------------------------- KI ----------------------------------- */
    
    override function executeForKI(SequenzListenerStatus listener)
        Log.error("YOU NEED TO WRITE KI FOR RALLING CRY SPELL")
        listener.continue(-1)