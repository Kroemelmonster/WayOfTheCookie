package FunWarcryAction


import Icons
import Abilities

import Action
import InstantAction

import OrderSystem
import BoardController
import UITooltip
import BuffController
import BuffType
import UIActionWindow
import KUtil
import LinkedList
import Stack

import initlater BoardStack
import StackType
import Scheduler
import DelayAnimation
import Buff
import CastAnimation
import BoardTrigger

public class WarcryAction extends InstantAction
    private Tooltip tooltip
    
    private static constant int COST = 0
    private static constant int COOLDOWN = 0
    private static constant int MAXRANGE = 8
    private static constant int BUFF_DURATION = 1
    private static constant string NAME = "Warcry"
    private static constant oskeytype KEY = OSKEY_Y
    private static constant string EFFECT = Abilities.roarCaster
    private static BuffType BUFF
    private static Tooltip BASE_TOOLTIP
    static constant string ICON = Icons.bTNBattleRoar

    static function setup()
        BUFF = BuffTypeSet.BLEEDING
        BASE_TOOLTIP = Tooltip.create(NAME)
        ..setCost(COST)
        
        ..addLine(Tooltip.stat("Target", "Self"))
        ..addLine(Tooltip.stat("Range", MAXRANGE))
        ..addLine("")
        ..addLine("Gives every enemy unit in range the "+Tooltip.secondaryString(BUFF.getName())+ " Buff effect for "+Tooltip.primaryString(BUFF_DURATION.toString())+ " rounds")
        ..addLine("-----")
        ..addBuffType(BUFF)

    construct(BoardStack stack)
        super(stack, ICON, NAME)
        charge = 1
        tooltip = Tooltip.copy(BASE_TOOLTIP)
        ..addKey("Y")

    static function createTooltip(StackType _sType) returns Tooltip
        return Tooltip.copy(BASE_TOOLTIP)
        
    override function canActivate() returns boolean
        return charge > 0 and cooldown <= 0

    private function getTargets() returns LinkedList<BoardStack>
        let area = stack.getCell().getAllCellsInRange(intRange(0, MAXRANGE))
        let targets = new LinkedList<BoardStack>()
        for cell in area
            let possibleTarget = cell.getStack()
            if possibleTarget != null
                targets.add(possibleTarget)
        destroy area
        return targets

    override function activate()
        let targets = getTargets()
        let board = stack.getBoard()

        CastAnimation.create(stack) () ->
            flashEffect(EFFECT, stack.getCell().getCoord())
            for target in targets
                BuffController.addBuff(BUFF, target, new BuffData(2)
                ..setRealValue(30))
                BuffController.addBuff(BuffTypeSet.POISON, target, new BuffData(3)
                ..setRealValue(10))
                BuffController.addBuff(BuffTypeSet.POISON, target, new BuffData(1)
                ..setRealValue(10))
                BuffController.addBuff(BuffTypeSet.POISON, target, new BuffData(1)
                ..setRealValue(10))
            destroy targets

            DelayAnimation.create(board, 0.5) -> // this is the backswing for casting
                charge --
                cooldown = COOLDOWN + 1

                stack.stats.addActionPoints(-COST)
                BoardController.finishOrder(stack, true)
            

    override function onUIMouseEnter()
        tooltip.display(stack.getPlayer(), false)
        UIActionWindow.updateActionPoints(stack, COST)
            
    override function onUIMouseLeave()
        UITooltip.hide(stack.getPlayer())
        UIActionWindow.updateActionPoints(stack, 0)

    override function canBeActivatedByKey(oskeytype key) returns boolean
        return key == KEY
            
    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)

    ondestroy
        if tooltip != null
            destroy tooltip
        