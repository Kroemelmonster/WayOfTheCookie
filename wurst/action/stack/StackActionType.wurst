package StackActionType

import Icon
import ActionCost
import initlater ActionType
import initlater BoardStack
import initlater StackAction
import Data

import initlater ActionTalentType

interface StackActionCreateListener
    function create(BoardStack stack, StackActionData data) returns StackAction

public interface StackActionCreateTooltipLinesListener
    function create(StackActionData data) returns LinkedList<string>

interface StackActionCreateDataListener
    function create() returns StackActionData

public class StackActionData extends Data
    private ActionCostPreset cost

    static function create(ActionCostPreset cost) returns StackActionData
        return new StackActionData(cost)
        
    private construct(ActionCostPreset cost)
        setCost(cost)

    function setCost(ActionCostPreset cost)
        if this.cost != null
            destroy this.cost
        this.cost = ActionCostPreset.create(cost)

    function getCost() returns ActionCostPreset
        return cost

    ondestroy
        Log.error("you should never destroy Stack Action Data")

public class StackActionType extends ActionType
    protected StackActionCreateListener listener
    protected StackActionCreateTooltipLinesListener tooltipLinesListener
    protected StackActionCreateDataListener dataListener

    protected ActionTalentType creatingTalent

    protected ActionCostPreset baseCost

    construct(string name, string icon, ActionCostPreset baseCost)
        super(name, icon)
        this.baseCost = baseCost
    
    function onCreate(StackActionCreateListener listener)
        this.listener = listener

    function onCreateTooltipLines(StackActionCreateTooltipLinesListener tooltipLinesListener)
        this.tooltipLinesListener = tooltipLinesListener

    function onCreateData(StackActionCreateDataListener dataListener)
        this.dataListener = dataListener

    function create(BoardStack boardStack, StackActionData data) returns StackAction
        return listener.create(boardStack, data)

    function toString() returns string
        return "StackActionType '"+name+"'"

    function createTooltipLines() returns LinkedList<string>
        return createTooltipLines(null)

    function createTooltipLines(StackActionData data) returns LinkedList<string>
        LinkedList<string> lines
        if data != null
            lines = data.getCost().createTooltipLines()
        else
            lines = baseCost.createTooltipLines()
        lines.addAllAndDestroy(tooltipLinesListener.create(data))
        return lines

    function createBaseData() returns StackActionData
        if dataListener != null
            let specific = dataListener.create()
            specific.setCost(baseCost)
            return specific
        return StackActionData.create(baseCost)

    function getCost() returns ActionCostPreset
        return baseCost

    function createTalent() returns ActionTalentType
        if hasOption(ActionTypeOption.PRIMARY)
            return new ActionTalentType(this, createBaseData())
        else if creatingTalent == null
            creatingTalent = new ActionTalentType(this, null)
        return creatingTalent