package WaitAction

import Action
import InstantStackAction
import Icons

import OrderSystem

import initlater BoardStack
import BoardTrigger
import InitiativeList
import ActionCost
import UITooltipNew
import TooltipNew
import TooltipGenerator

public class WaitAction extends InstantStackAction
    construct(BoardStack stack)
        super(stack, Icons.bTNPatrol, "Wait", ActionCostPreset.create(0, false))

        
    override function canActivate() returns boolean
        let initiative = stack.getPlayer().playingBoard.getInitiative()
        let isWaiting = initiative.getCurrent().isWaiting()
        return isWaiting == false

    override function activate()
        let board = stack.getPlayer().playingBoard
        board.getInitiative().wait()
        OrderSystem.endOrder(board)

    override function onUIMouseEnter()
        let tt = TooltipNew.create(name)
        ..setKey(key)
        if canActivate()
            let str = TooltipGenerator.primaryString((InitiativeList.intiativeToDisplayTime(stack.stats.getInitiative()) / 2.0).round().toString())
            + " " + TooltipGenerator.secondaryString("timeunits")
            tt.addLine("Postpone the turn by "+str)
        else
            tt.addLine("You cant postpone again")

        UITooltipNew.display(stack.getPlayer(), tt)


    override function onUIMouseLeave()
        UITooltipNew.hide(stack.getPlayer())
        
    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)