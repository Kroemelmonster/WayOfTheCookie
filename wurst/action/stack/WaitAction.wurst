package WaitAction

import Action
import InstantStackAction
import Icons

import OrderSystem
import UITooltip

import initlater BoardStack
import BoardTrigger
import InitiativeList
import ActionCost

public class WaitAction extends InstantStackAction
    private constant static string KEY = "W"

    private Tooltip tt

    construct(BoardStack stack)
        super(stack, Icons.bTNPatrol, "Wait", ActionCostPreset.create(0, false))
        tt = Tooltip.create(name, KEY)
        ..addLine("Postpone this turn")

        
    override function canActivate() returns boolean
        let initiative = stack.getPlayer().playingBoard.getInitiative()
        let isWaiting = initiative.getCurrent().isWaiting()
        return isWaiting == false

    override function activate()
        let board = stack.getPlayer().playingBoard
        board.getInitiative().wait()
        OrderSystem.endOrder(board)

    override function onUIMouseEnter()
        showPreview()

    override function onUIMouseLeave()
        UITooltip.hide(stack.getPlayer())

    private function showPreview()
        if canActivate()
            let str = Tooltip.primaryString((InitiativeList.intiativeToDisplayTime(stack.stats.getInitiative()) / 2.0).round().toString())
            + " " + Tooltip.secondaryString("timeunits")
            tt.setLine(0, "Postpone the turn by "+str)
        else
            tt.setLine(0, "You cant postpone again")
        tt.display(stack.getPlayer(), false)

    override function canBeActivatedByKey(string key) returns boolean
        return key == KEY

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)