package ActionMultiStrike

import StackActionTarget

import PlayerData
import Damage
import UIMenuActionConsole

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionMultiStrike.setup()

public class ActionMultiStrike extends StackActionTarget
    static StackActionType TYPE
    static constant TIMES = 0
    static constant PERC = 0
    
    protected static function setup()
        let cost = ActionCostPreset.create(1, true, 2)
        TYPE = StackActionTarget.createType("Multi Strike", "Icons/BTNAbility_Hunter_SwiftStrike.blp", cost)
        ..enableOption(ActionTypeOption.PRIMARY)
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionMultiStrike(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)
        TYPE.onCreateData() -> 
            return StackActionData.create(cost)
            ..setIntData(TIMES, 2)
            ..setRealData(PERC, 0.7)

    private static function createTooltipLines(StackActionData data) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Enemy"))
        ..add("")
        ..add("Striking one foe " + KStringUtils.primaryString(data.getIntData(TIMES).toString()) 
            + " times each dealing " + KStringUtils.primaryPercent(data.getRealData(PERC)) + " dmg.")
        
    private static function createTooltipLines(ActionMultiStrike action) returns LinkedList<string>
        return createTooltipLines(action.data)

    private static function createDamagePreview(BoardStack stack, StackActionData data) returns DamagePreview
        return DamagePreview.create(SourceType.ATTACK, stack.stats.getDamageType())
        ..setDamage(stack.stats.getDamageAll() * data.getRealData(PERC))

/* -------------------------------------------------------------------------- */

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        return CellHighlightRune.NONE

    protected override function canTarget(BoardStack potentialTarget) returns boolean
        return stack.canAttack(potentialTarget)

    protected override function getTargetRange() returns intRange
        return stack.stats.getRange()

    protected override function previewTarget(int prevUsedApForMove, BoardStack target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())

        if target != null
            let preview = createDamagePreview(stack, data)
            tt.addLine("")
            preview.extendTooltipWithSpecific(tt, stack, target)
            tt.addLine("")
            preview.extendTooltipWithSpecific(tt, stack, target)
            destroy preview

        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)

    protected override function executeOrder(boolean didMove, int prevUsedApForMove, BoardStack target) returns boolean
        let preview = createDamagePreview(stack, data)

        strike(0, target, preview) ->
            destroy preview
            finish(didMove, prevUsedApForMove)
        return true

    protected function strike(int times, BoardStack target, DamagePreview damagePreview, SequenzListener next)
        if times >= data.getIntData(TIMES)
            next.continue()
            return
        let instance = damagePreview.getRandomInstance()
        SubStackActions.attack(stack, target, instance, true) (attackStatus) ->
            destroy instance
            strike(times + 1, target, damagePreview, next)
            

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)

        
    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)