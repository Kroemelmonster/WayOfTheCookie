package ActionWait

import initlater StackActionType
import initlater Action
import initlater InstantStackAction

import OrderSystem
import BoardStack
import BoardTrigger
import InitiativeList
import ActionCost
import UITooltip
import Tooltip
import BoardEntity

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionWait.setup()

public class ActionWait extends InstantStackAction
    static StackActionType TYPE

    protected static function setup()
        TYPE = InstantStackAction.createType("Wait", Icons.bTNPatrol, ActionCostPreset.create(0, false))
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionWait(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)
            
    private static function createTooltipLines(int _amount) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Postpones your turn by half your initiative, if you didnt do it this turn already")

    private static function createTooltipLines(StackActionData _data) returns LinkedList<string>
        return createTooltipLines(1)
       
    private static function createTooltipLines(ActionWait action) returns LinkedList<string>
        return createTooltipLines(action.stack.stats.amount)

    construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)
        
    override function canActivate() returns boolean
        let initiative = stack.getPlayer().playingBoard.getInitiative()
        let isWaiting = initiative.getCurrent().isWaiting()
        return isWaiting == false

    override function activate()
        let board = stack.getConntrollingPlayer().playingBoard
        board.getInitiative().wait()
        OrderSystem.endOrder(board)

    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        if canActivate()
            // TODO maybe do this better ? idont know
            let str = KStringUtils.primaryString((InitiativeList.intiativeToDisplayTime(stack.stats.getInitiative()) / 2.0).round().toString())
            + " " + KStringUtils.secondaryString("timeunits")
            tt.addLine("Postpone the turn by "+str)
        else
            tt.addLine("You cant postpone again")

        UITooltip.display(stack.getConntrollingPlayer(), tt)

    override function onUIMouseLeave()
        UITooltip.hide(stack.getConntrollingPlayer())

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)
        
    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)