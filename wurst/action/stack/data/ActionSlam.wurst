package ActionSlam

import Icons
import Abilities

import BoardStack
import Action
import InstantStackAction
import BoardController
import UIMenuActionConsole
import KUtil
import LinkedList
import AnimationWait
import AnimationCast
import BoardTrigger
import HashMap
import Cell
import ClosureTimers
import Damage
import ActionCost
import KStringUtils
import Tooltip
import UITooltip
import ActionType
import BoardEntity
import KISystem
import StackActionType

public class ActionSlam extends InstantStackAction
    static StackActionType TYPE
    static function setup()
        TYPE = InstantStackAction.createType("Slam", Icons.bTNGolemThunderClap, ActionCostPreset.create(1, false, 2))
        ..enableOption(ActionTypeOption.PRIMARY)
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionSlam(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)
        damagePreview = DamagePreview.create(SourceType.SPELL, DamageType.PHYSICAL)

    private static constant int MAXRANGE = 1
    private static constant string EFFECT = Abilities.thunderclapCaster

    private static constant int DAZZED_TIME = 200
    private static DamagePreview damagePreview

    private static function calculateDamage(int amount) returns DamagePreview
        damagePreview.dmg = realRange(100.0 * amount, 150.0 * amount)
        return damagePreview

    private static function createTooltipLines(int amount) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "None"))
        ..add(KStringUtils.stat("Range", MAXRANGE))
        ..add(KStringUtils.stat("Damage", calculateDamage(amount).toColoredText()))
        ..add("")
        ..add("Slams the Ground around you, curshing your foes.")
        ..add("Stunning them for "
         + KStringUtils.primaryString(DAZZED_TIME.toString())
         + " " + KStringUtils.secondaryString("timeunits"))

    private static function createTooltipLines(StackActionData _data) returns LinkedList<string>
        return createTooltipLines(1)
       
    private static function createTooltipLines(ActionSlam action) returns LinkedList<string>
        return createTooltipLines(action.stack.stats.amount)

    construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)

    private function getTargets() returns LinkedList<BoardStack>
        let area = stack.getCell().getAllCellsInRange(intRange(0, MAXRANGE))
        let targets = new LinkedList<BoardStack>()
        for cell in area
            let possibleTarget = cell.getStack()
            if possibleTarget != null and stack.isEnemy(possibleTarget)
                targets.add(possibleTarget)
        destroy area
        return targets

    private function finish(LLIterator<BoardStack> itr, DamageInstance instance)
        destroy itr
        destroy instance
        AnimationWait.time(stack.getBoard(), 0.5) -> // this is the backswing for casting
            BoardController.finishOrder(entity, cost)

    private function hit(LLIterator<BoardStack> itr, DamageInstance instance)
        if itr.hasNext()
            let target = itr.next()
            BoardController.dealDamage(stack, instance, target) -> 
                BoardController.stunEntity(stack, target, DAZZED_TIME) -> 
                    hit(itr, instance)
        else
            finish(itr, instance)

    override function activate()
        let targets = getTargets()

        AnimationCast.withoutTarget(stack) () ->
            flashEffect(EFFECT, stack.getCell().getCoord())
            calculateDamage(stack.stats.amount)
            hit(targets.iterator(), damagePreview.getRandomInstance())

    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())
        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)
            
    override function onUIMouseLeave()
        UITooltip.hide(stack.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)
            
    override function executeForKI(SequenzListenerStatus listener)
        let weightCells = new HashMap<Cell, real>()
        var apCost = cost.getAP()
        if apCost == 0
            apCost = 1 // after you moved all points you cant even use a spell that cost nothing
        Cell bestCellToCastFrom = null
        var highestWeightSoFar = 0.0
        var highestRemainingActionPoints = 0
        let stackItr = stack.getBoard().getAllStacks().iterator()
        while stackItr.hasNext()
            let target = stackItr.next()
            if target.isEnemy(stack)
                let weight =  target.stats.getWeight()
                let itr = target.getCell().eachCellInRangeIterator(intRange(1, MAXRANGE))
                while itr.hasNext()
                    let cell = itr.next()
                    var remaining = stack.getRemainingAP()
                    if cell != stack.getCell()
                        remaining = -1
                        let pCell = entity.getPathToCell(cell)
                        if pCell != null
                            remaining = pCell.getRemainingMoveAP(stack.stats)
                    if remaining >= apCost
                        var newWeight = weight
                        if weightCells.has(cell)
                            newWeight += weightCells.get(cell)
                        weightCells.put(cell, newWeight)
                        if newWeight > highestWeightSoFar
                            highestWeightSoFar = newWeight
                            bestCellToCastFrom = cell
                            highestRemainingActionPoints = remaining
                        else if newWeight == highestWeightSoFar and remaining > highestRemainingActionPoints
                            bestCellToCastFrom = cell
                            highestRemainingActionPoints = remaining

                destroy itr

        destroy stackItr
        destroy weightCells
        nullTimer() ->
            if bestCellToCastFrom != null
                if bestCellToCastFrom == stack.getCell()
                    activate()
                    listener.continue(0)
                else
                    if KISystem.orderMoveTo(stack, bestCellToCastFrom)
                        listener.continue(0)
                    else
                        listener.continue(1)
            else
                listener.continue(1)

    ondestroy
        