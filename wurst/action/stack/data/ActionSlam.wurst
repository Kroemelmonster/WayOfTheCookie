package ActionSlam

import Abilities

import StackActionTargetCell

import BoardController
import UIMenuActionConsole
import AnimationWait
import AnimationCast
import Damage
import PlayerData
import Board
import Scheduler
import Stats
import StackType

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionSlam.setup()

public class ActionSlam extends StackActionTargetCell
    static StackActionType TYPE
    protected static function setup()
        damagePreview = DamagePreview.create(SourceType.SPELL, DamageType.PHYSICAL)
        TYPE = StackActionTargetCell.createType("Slam", Icons.bTNGolemThunderClap, ActionCostPreset.create(1, true, 2))
        ..setTags(Tag.SPELL, Tag.PHYSICAL)
        ..enableOption(ActionTypeOption.PRIMARY)
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionSlam(stack, data)
        TYPE.onCreateTooltipLines() (data, stats) -> 
            return createTooltipLines(data, stats)

    private static constant TARGET_RANGE = intRange(0, 0)
    private static constant AFFECTED_RANGE = intRange(1, 1)

    private static DamagePreview damagePreview

    private static function calculateDamage(HasEntityStats stats) returns DamagePreview
        damagePreview.dmg = realRange(350.0, 450.0) * (stats.getAmount() * stats.getDamageMulti(TYPE.getTags()))
        return damagePreview

    private static function createTooltipLines(StackActionData _data, HasEntityStats stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Enemy"))
        ..add(KStringUtils.stat("Range", AFFECTED_RANGE))
        ..add(KStringUtils.stat("Damage", calculateDamage(stats).toColoredText()))
        ..add("")
        ..add("Slams the Ground around you, curshing your foes.")

/* -------------------------------------------------------------------------- */

    private LinkedList<Cell> highlightArea = new LinkedList<Cell>

    override function recalculateHighlightInner(Cell target)
        highlightArea.clear()
        if target != null
            target.forEachCellsInRange(AFFECTED_RANGE) areaCell ->
                highlightArea.add(areaCell)

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        if highlightArea.has(cell)
            return CellHighlightRune.CAST
        return CellHighlightRune.NONE

    protected override function canTarget(Cell potentialTarget) returns boolean
        return true

    protected override function canHit(BoardStack target) returns boolean
        return stack.isEnemy(target)

    protected override function getTargetRange() returns intRange
        return TARGET_RANGE

    protected override function getAreaCellIterator(Cell target) returns LinkedListIterator<Cell>
        return target.eachCellInRangeIterator(AFFECTED_RANGE)

    protected override function previewTarget(int prevUsedApForMove, Cell target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())

        if target != null
            let cellItr = getAreaCellIterator(target)
            while cellItr.hasNext()
                let cell = cellItr.next()
                let potentialTarget = cell.getStack()
                if canHit(potentialTarget)
                    tt.addLine("")
                    calculateDamage(stack.stats)
                    .extendTooltipWithSpecific(tt, entity, potentialTarget)
            destroy cellItr

        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)

    protected override function executeOrder(boolean didMove, int prevUsedApForMove, Cell target) returns boolean
        AnimationCast.withoutTarget(stack) () ->
            let e = addEffect(Abilities.thunderclapCaster, target.getCoord())
            let cellItr = getAreaCellIterator(target)
            let rolledBaseDamage = calculateDamage(stack.stats).getRandomInstance()
            let waitUntil = Scheduler.getTimeIn(0.667)
            hitNextCell(cellItr, rolledBaseDamage) ->
                destroy cellItr
                destroy rolledBaseDamage
                AnimationWait.untill(entity.getBoard(), waitUntil) ->
                    e.moveAndDestroy()
                    finish(didMove, prevUsedApForMove)
        return true

    private function hitNextCell(LinkedListIterator<Cell> cellItr, DamageInstance rolledDamage, SequenzListener next)
        if not cellItr.hasNext()
            next.continue()
            return
        let potentialTarget = cellItr.next().getStack()
        if canHit(potentialTarget)
            BoardController.dealDamage(stack, rolledDamage, potentialTarget) -> 
                hitNextCell(cellItr, rolledDamage, next)
        else
            hitNextCell(cellItr, rolledDamage, next)

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(data, stack.stats)

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)

    ondestroy
        destroy highlightArea