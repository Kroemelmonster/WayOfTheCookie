package ActionSpiritLink

import StackActionTarget

import PlayerData
import UIMenuActionConsole
import AnimationCast
import AnimationWait
import StatusType
import StatusSpiritLink
import Status
import StatusController

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionSpiritLink.setup()

public class ActionSpiritLink extends StackActionTarget
    static StackActionType TYPE

    protected static function setup()
        let cost = ActionCostPreset.create(1, false, 0)
        ..addCharges(3)
        TYPE = StackAction.createType("Spirit Link", Icons.bTNSpiritLink, cost)
        ..enableOption(ActionTypeOption.PRIMARY)
        BUFF = StatusSpiritLink.TYPE
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionSpiritLink(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)
    
    private static StatusType BUFF
    private static constant RANGE = intRange(1, 3)

    private static function createStatusData(BoardEntity linked) returns StatusData
        return StatusData.create(3)
        ..setEntityData(linked)
        ..setRealData(StatusSpiritLink.DAMAGE_TRANSFER, 0.5)
        ..setRealData(StatusSpiritLink.DAMAGE_REDUCE, 0.88)

    private static function createTooltipLines(int _amount) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Ally"))
        ..add("")
        ..add("just lul")
        ..add(KStringUtils.line())
        ..addAllAndDestroy(BUFF.createTooltipLines(createStatusData(null)))

    private static function createTooltipLines(StackActionData _data) returns LinkedList<string>
        return createTooltipLines(1)
       
    private static function createTooltipLines(ActionSpiritLink action) returns LinkedList<string>
        return createTooltipLines(action.stack.stats.amount)

/* -------------------------------------------------------------------------- */

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)
        cellResultForHit = CellPreviewColor.POSITIVE

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        return CellHighlightRune.NONE

    protected override function canTarget(BoardStack potentialTarget) returns boolean
        if potentialTarget != stack and stack.isAlly(potentialTarget)
            return StatusController.canApply(BUFF, entity, createStatusData(potentialTarget))
        return false

    protected override function getTargetRange() returns intRange
        return RANGE

    protected override function previewTarget(int prevUsedApForMove, BoardStack target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())
        
        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)
      
    protected override function executeOrder(boolean didMove, int prevUsedApForMove, BoardStack target) returns boolean
        AnimationCast.atCell(stack, target.getCell()) ->
            StatusController.apply(BUFF, entity, createStatusData(target)) (status) ->
                AnimationWait.time(stack.getBoard(), 0.3) ->
                    finish(didMove, prevUsedApForMove)
        return true