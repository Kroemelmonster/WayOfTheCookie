package ActionSpiritLink

import StackActionTarget

import PlayerData
import UIMenuActionConsole
import AnimationCast
import AnimationWait
import StatusType
import StatusSpiritLink
import Status
import StatusController
import StackType
import Stats

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionSpiritLink.setup()

public class ActionSpiritLink extends StackActionTarget
    static StackActionType TYPE

    protected static function setup()
        let cost = ActionCostPreset.create(1, false, 0)
        ..addCharges(3)
        TYPE = StackAction.createType("Spirit Link", Icons.bTNSpiritLink, cost)
        ..setTags(Tag.SPELL, Tag.LIGHT)
        ..enableOption(ActionTypeOption.PRIMARY)
        BUFF = StatusSpiritLink.TYPE
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionSpiritLink(stack, data)
        TYPE.onCreateTooltipLines() (data, stats) -> 
            return createTooltipLines(data, stats)
    
    private static StatusType BUFF
    private static constant RANGE = intRange(1, 3)

    private static function createStatusData(StackActionData _data, HasEntityStats stats) returns StatusData
        let multi = stats.getStatusEffectivness(TYPE.getTags()) * 0.5
        return StatusData.create(3)
        ..setRealData(StatusSpiritLink.DAMAGE_TRANSFER, 0.5 * multi)
        ..setRealData(StatusSpiritLink.DAMAGE_REDUCE, 1 - (0.12 * multi))

    private static function createTooltipLines(StackActionData data, HasEntityStats stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Ally"))
        ..add("")
        ..add("just lul")
        ..add(KStringUtils.line())
        ..addAllAndDestroy(BUFF.createTooltipLines(createStatusData(data, stats)))

/* -------------------------------------------------------------------------- */

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        return CellHighlightRune.NONE

    protected override function canTarget(BoardStack potentialTarget) returns boolean
        if potentialTarget != stack and stack.isAlly(potentialTarget)
            return StatusController.canApply(BUFF, entity, createStatusData(potentialTarget))
        return false

    private function createStatusData(BoardStack potentialTarget) returns StatusData
        return createStatusData(potentialTarget)
        ..setEntityData(potentialTarget)

    protected override function getTargetRange() returns intRange
        return RANGE

    protected override function previewTarget(int prevUsedApForMove, BoardStack target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())
        
        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)

    protected override function executeOrder(boolean didMove, int prevUsedApForMove, BoardStack target) returns boolean
        AnimationCast.atCell(stack, target.getCell()) ->
            StatusController.apply(BUFF, entity, createStatusData(target)) (status) ->
                AnimationWait.time(stack.getBoard(), 0.3) ->
                    finish(didMove, prevUsedApForMove)
        return true

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(data, stack.stats)

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)
        cellResultForHit = CellPreviewColor.POSITIVE