package DefendAction


import Icons

import Action
import InstantStackAction
import Abilities
import ActionCost

import OrderSystem
import BoardController
import UIMenuActionConsole

import initlater BoardStack
import BoardTrigger
import Tooltip
import UITooltip
import ActionType
import BoardEntity
import LinkedList

public class DefendAction extends InstantStackAction
    static ActionType TYPE
    static function setup()
        TYPE = InstantStackAction.createType("Defend", Icons.bTNStop)
        TYPE.onCreate() entity -> 
            return new DefendAction(entity)
        TYPE.onCreateTooltipLines() amount -> 
            return createTooltipLines(amount, true)

    private static constant ActionCostPreset BASE_COST = ActionCostPreset.create(1, true)

    private static function createBaseTooltipLines(boolean addCost) returns LinkedList<string>
        if addCost
            return BASE_COST.createTooltipLines()
        return new LinkedList<string>

    private static function createTooltipLines(int _amount, boolean addCost) returns LinkedList<string>
        return createBaseTooltipLines(addCost)
        ..add("Skips your turn ( thats it for now )")

    construct(BoardEntity entity)
        super(entity, TYPE, BASE_COST)
        
    override function activate()
        stack.flashEffectOnPos(Abilities.defendCaster)
        BoardController.finishOrder(entity, cost)
        
    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createTooltipLines(stack.stats.amount, false))
        UITooltip.display(entity.getPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    override function onUIMouseLeave()
        UITooltip.hide(stack.getPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)