package ActionCrit

import ActionType
import ActionCost
import SubStackActions
import StackActionTarget
import StackActionType
import Action

import PlayerData
import Damage
import BoardStack
import UIMenuActionConsole
import UITooltip
import Tooltip
import BoardEntity

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionCrit.setup()

public class ActionCrit extends StackActionTarget
    static StackActionType TYPE
    static constant CRIT = 0
    
    protected static function setup()
        let cost = ActionCostPreset.create(1, true, 2)
        TYPE = StackActionTarget.createType("Critical Strike", Icons.bTNCriticalStrike, cost)
        ..enableOption(ActionTypeOption.PRIMARY)
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionCrit(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)
        TYPE.onCreateData() -> 
            return StackActionData.create(cost)
            ..setRealData(CRIT, 1.5)

    private static function createTooltipLines(real perc) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Enemy"))
        ..add("")
        ..add("Striking your foe with a ciritical hit dealing "+KStringUtils.primaryPercent(perc)+" more dmg.")

    private static function createTooltipLines(StackActionData _data) returns LinkedList<string>
        return createTooltipLines(1)
        
    private static function createTooltipLines(ActionCrit action) returns LinkedList<string>
        return createTooltipLines(action.data.getRealData(CRIT))

    private static function createDamagePreview(BoardStack stack, StackActionData data) returns DamagePreview
        return DamagePreview.create(SourceType.ATTACK, stack.stats.getDamageType())
        ..setDamage(stack.stats.getDamageAll() * data.getRealData(CRIT))
        ..addFlag(DamageFlags.CRIT)

/* -------------------------------------------------------------------------- */

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)

    protected override function canTarget(BoardStack potentialTarget) returns boolean
        return stack.canAttack(potentialTarget)

    protected override function getTargetRange() returns intRange
        return stack.stats.getRange()

    protected override function previewTarget(int prevUsedApForMove, BoardStack target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())

        if target != null
            tt.addLine("")
            let preview = createDamagePreview(stack, data)
            preview.extendTooltipWithSpecific(tt, stack, target)
            destroy preview

        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)

    protected override function executeOrder(boolean didMove, int prevUsedApForMove, BoardStack target) returns boolean
        let preview = createDamagePreview(stack, data)
        let instance = preview.getRandomInstance()
        destroy preview

        SubStackActions.attack(stack, target, instance, true) (attackStatus) ->
            destroy instance
            finish(didMove, prevUsedApForMove)
        return true

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)