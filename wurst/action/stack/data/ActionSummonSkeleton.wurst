package ActionSummonSkeleton

import StackActionTargetCell

import Abilities
import PlayerData
import BoardController
import StackType
import UIMenuActionConsole
import AnimationWait
import AnimationCast
import StackTypesData
import Scheduler
import Stats

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionSummonSkeleton.setup()

init 
    Initializer.register(InitializerNames.DATA) ->
        ActionSummonSkeleton.setupAfter()

public class ActionSummonSkeleton extends StackActionTargetCell
    static StackActionType TYPE

    protected static function setup()
        TYPE = StackActionTargetCell.createType("Summon Skeleton", Icons.bTNRaiseDead, ActionCostPreset.create(1, true, 2))
        ..setTags(Tag.SPELL, Tag.DARK)
        ..enableOption(ActionTypeOption.PRIMARY)
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionSummonSkeleton(stack, data)
        TYPE.onCreateTooltipLines() (data, stats) -> 
            return createTooltipLines(data, stats)

    protected static function setupAfter()
        SUMMONED_TYPE = StackTypes.find("Lesser Skeleton")

    private static constant TARGET_RANGE = intRange(1, 1)
    private static StackType SUMMONED_TYPE

    private static function getSummonAmount(StackActionData _data, HasEntityStats stats) returns intRange
        let multi = (stats.getAmount() * stats.getSummonEffectivness(TYPE.getTags())) / SUMMONED_TYPE.getLeadership()
        return (realRange(10, 15) * multi).ceil() 

    private static function createTooltipLines(StackActionData data, HasEntityStats stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add(KStringUtils.stat("Target", "Empty Cell"))
        ..add(KStringUtils.stat("Range", TARGET_RANGE))
        ..add("")
        ..add("Summon "
         + KStringUtils.coloredRange(KStringUtils.COLOR_PRIMARY, getSummonAmount(data, stats))
         + " Stacks of "
         + KStringUtils.coloredString(KStringUtils.COLOR_SECONDARY, SUMMONED_TYPE.getName()))
      
/* -------------------------------------------------------------------------- */

    private Cell highlightedCell

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)

    override function recalculateHighlightInner(Cell target)
        highlightedCell = target

    override function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
        if cell == highlightedCell
            return CellHighlightRune.CAST
        return CellHighlightRune.NONE

    protected override function canTarget(Cell cell) returns boolean
        return not cell.isBlocked() and cell.getStack() == null

    protected override function canHit(BoardStack target) returns boolean
        return false

    protected override function getTargetRange() returns intRange
        return TARGET_RANGE

    protected override function getAreaCellIterator(Cell target) returns LinkedListIterator<Cell>
        return new SingleCellIterator(target)

    protected override function previewTarget(int prevUsedApForMove, Cell target)
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())

        UITooltip.display(stack.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost, prevUsedApForMove)
    
    protected override function executeOrder(boolean didMove, int prevUsedApForMove, Cell target) returns boolean
        AnimationCast.atCell(stack, target) () ->
            flashEffect(Abilities.raiseSkeleton, target.getCoord())
            let waitUntil = Scheduler.getTimeIn(0.5)
            BoardController.createSummon(stack.getForce(), SUMMONED_TYPE, target, getSummonAmount(data, stack.stats).random()) ->
                AnimationWait.untill(target.getBoard(), waitUntil) ->
                    BoardController.finishOrder(entity, cost)
        return true

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(data, stack.stats)