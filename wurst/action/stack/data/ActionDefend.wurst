package ActionDefend

import InstantStackAction

import Abilities
import BoardController
import UIMenuActionConsole
import BoardTrigger
import StackType

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionDefend.setup()

public class ActionDefend extends InstantStackAction
    static StackActionType TYPE

    protected static function setup()
        TYPE = InstantStackAction.createType("Defend", Icons.bTNStop, ActionCostPreset.create(1, true))
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionDefend(stack, data)
        TYPE.onCreateTooltipLines() (data, stats) -> 
            return createTooltipLines(data, stats)

    private static function createTooltipLines(StackActionData _data, HasEntityStats _stats) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Skips your turn ( thats it for now )")

/* -------------------------------------------------------------------------- */

    override function activate()
        stack.flashEffectOnPos(Abilities.defendCaster)
        BoardController.finishOrder(entity, cost)
        
    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    override function onUIMouseLeave()
        UITooltip.hide(stack.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(data, stack.stats)

/* -------------------------------------------------------------------------- */

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)
