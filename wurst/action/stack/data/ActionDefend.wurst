package ActionDefend



import initlater Action
import initlater InstantStackAction
import initlater StackActionType
import initlater ActionCost

import Abilities
import BoardController
import UIMenuActionConsole
import BoardStack
import BoardTrigger
import Tooltip
import UITooltip
import BoardEntity

init
    Initializer.register(InitializerNames.ACTIONS) -> 
        ActionDefend.setup()

public class ActionDefend extends InstantStackAction
    static StackActionType TYPE

    protected static function setup()
        TYPE = InstantStackAction.createType("Defend", Icons.bTNStop, ActionCostPreset.create(1, true))
        TYPE.onCreate() (BoardStack stack, StackActionData data) ->
            return new ActionDefend(stack, data)
        TYPE.onCreateTooltipLines() data -> 
            return createTooltipLines(data)

    private static function createTooltipLines(int _amount) returns LinkedList<string>
        return new LinkedList<string>
        ..add("Skips your turn ( thats it for now )")

    private static function createTooltipLines(StackActionData _data) returns LinkedList<string>
        return createTooltipLines(1)
       
    private static function createTooltipLines(ActionDefend action) returns LinkedList<string>
        return createTooltipLines(action.stack.stats.amount)

/* -------------------------------------------------------------------------- */

    override function activate()
        stack.flashEffectOnPos(Abilities.defendCaster)
        BoardController.finishOrder(entity, cost)
        
    override function onUIMouseEnter()
        let tt = createBasicTooltip()
        ..addLines(createBasicTooltipLines())
        UITooltip.display(entity.getConntrollingPlayer(), tt)
        UIMenuActionConsole.updateActionPoints(entity, cost)

    override function onUIMouseLeave()
        UITooltip.hide(stack.getConntrollingPlayer())
        UIMenuActionConsole.updateActionPoints(entity)

    override function createBasicTooltipLines() returns LinkedList<string>
        return createTooltipLines(this)

/* -------------------------------------------------------------------------- */

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)

    private construct(BoardStack stack, StackActionData data)
        super(stack, TYPE, data)
