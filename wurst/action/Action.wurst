package Action

import PlayerData

import initlater Cell
import initlater BoardEntity
import initlater OrderSystem

import initlater BoardStack
import BoardTrigger
import UIController
import ActionCost
import BitSet
import initlater BoardHero
import Icon
import initlater ActionType
import Tooltip

public enum CellResult
    DEFAULT
    POSITIVE
    NEGATIVE
    NEUTRAL
    NONE

public enum ActionOption
    INSTANT
    DEFAULT
    PRIMARY
    SPELL
    WARCRY

public abstract class Action
    protected BoardEntity entity

    protected ActionType actionType
    protected string key = ""
    protected ActionCost cost

    private bitset optionSet = bitset(0)

    construct(BoardEntity entity, ActionType actionType, ActionCostPreset cost)
        this.entity = entity
        this.actionType = actionType
        this.cost = ActionCost.create(entity, cost)

    function getPreviewResultForCell(Cell _cell) returns CellResult
        return CellResult.NONE

    abstract function getHighlightResultForCell(Player p, Cell cell) returns CellResult

    function onAnyStackCellChange()
        recalculatePreview()
        if OrderSystem.canOrder(entity.getPlayer())
            recalculateHighlight(entity.getPlayer())

    protected abstract function recalculatePreview()

    abstract function onUIMouseEnter()

    abstract function onUIMouseLeave()

    abstract function recalculateHighlight(Player p)

    abstract function sendTargetOrder(Cell cell) returns boolean
    abstract function executeForKI(SequenzListenerStatus listener)

    function canBeActivatedByKey(string key) returns boolean
        return key == this.key

    function getCost() returns ActionCost
        return cost

    function tickCooldown()
        cost.tickCooldown()

    function canActivate() returns boolean
        if cost.canUse()
            return canActivateExtraCondition()
        return false

    protected function canActivateExtraCondition() returns boolean
        return true

    function activate()
        if hasOption(ActionOption.INSTANT)
            return

        entity.setCurrentAction(this)
        UIController.triggerOnActionChange(entity.getPlayer().playingBoard)

    protected function presetOption(ActionOption opt)
        optionSet = optionSet.set(opt castTo int)

    protected function removeOption(ActionOption opt)
        optionSet = optionSet.reset(opt castTo int)

    function hasOption(ActionOption option) returns boolean
        return optionSet.get(option castTo int)

    function showAsPrimary() returns boolean
        return hasOption(ActionOption.PRIMARY)

    function showAsSecondary() returns boolean
        if hasOption(ActionOption.SPELL)
            return false
        return not hasOption(ActionOption.PRIMARY)
    
    function setKey(string key)
        this.key = key

    function createBasicTooltip() returns Tooltip
        let tt = Tooltip.create(getName())
        cost.setupTooltipCost(tt)
        tt.setKey(key)
        return tt

    function getIcon() returns string
        return actionType.getIcon()

    function getName() returns string
        return actionType.getName()

    function toString() returns string
        return "Action '"+getName()+"'"