package Action

import PlayerData

import initlater Cell
import initlater BoardEntity
import initlater OrderSystem

import initlater SummonLesserSkeletonAction
import initlater SlamAction
import initlater BoardStack
import BoardTrigger
import UIController
import ActionCost
import BitSet
import initlater BoardHero

public enum CellResult
    DEFAULT
    POSITIVE
    NEGATIVE
    NEUTRAL
    NONE

public enum ActionOption
    INSTANT
    DEFAULT
    PRIMARY
    SPELL
    WARCRY

public abstract class Action
    protected BoardEntity entity

    protected BoardStack stack
    protected BoardHero hero

    protected string btn
    protected string name
    protected ActionCost cost

    private bitset optionSet = bitset(0)

    construct(BoardEntity entity, string btn, string name, ActionCostPreset cost)
        this.entity = entity
        this.btn = btn
        this.name = name
        this.cost = ActionCost.create(entity, cost)
    
    static function setup()
        SummonLesserSkeletonAction.setup()

    function getPreviewResultForCell(Cell _cell) returns CellResult
        return CellResult.NONE

    abstract function getHighlightResultForCell(Player p, Cell cell) returns CellResult

    function onAnyStackCellChange()
        recalculatePreview()
        if OrderSystem.canOrder(entity.getPlayer())
            recalculateHighlight(entity.getPlayer())

    protected abstract function recalculatePreview()

    abstract function onUIMouseEnter()

    abstract function onUIMouseLeave()

    abstract function recalculateHighlight(Player p)

    abstract function sendTargetOrder(Cell cell) returns boolean
    abstract function executeForKI(SequenzListenerStatus listener)

    abstract function canBeActivatedByKey(string key) returns boolean

    @inline
    function getCost() returns ActionCost
        return cost

    @inline
    function tickCooldown()
        cost.tickCooldown()

    function canActivate() returns boolean
        if cost.canUse()
            return canActivateExtraCondition()
        return false

    @inline
    protected function canActivateExtraCondition() returns boolean
        return true

    function activate()
        if hasOption(ActionOption.INSTANT)
            return

        entity.setCurrentAction(this)
        UIController.triggerOnActionChange(entity.getPlayer().playingBoard)

    @inline
    protected function presetOption(ActionOption opt)
        optionSet = optionSet.set(opt castTo int)


    @inline
    function hasOption(ActionOption option) returns boolean
        return optionSet.get(option castTo int)

    function showAsPrimary() returns boolean
        if hasOption(ActionOption.SPELL)
            return false
        return hasOption(ActionOption.PRIMARY)

    function showAsSecondary() returns boolean
        if hasOption(ActionOption.SPELL)
            return false
        return not hasOption(ActionOption.PRIMARY)

    @inline
    function getButton() returns string
        return btn

    @inline
    function getName() returns string
        return name

    @inline
    function toString() returns string
        return "Action '"+getName()+"'"