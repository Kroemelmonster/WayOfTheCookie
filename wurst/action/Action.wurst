package Action

import PlayerData
import BoardTrigger
import UIController
import initlater OrderSystem

import public initlater BoardEntity
import public initlater Cell
import public ActionCost
import public initlater ActionType
import public Tooltip
import public UITooltip

public abstract class Action
    protected BoardEntity entity

    protected ActionType actionType
    protected string key = ""
    protected ActionCost cost

    construct(BoardEntity entity, ActionType actionType)
        this.entity = entity
        this.actionType = actionType
        cost = ActionCost.create(entity)

    function onAnyStackCellChange()
        recalculatePreview()
        if OrderSystem.canOrderAndInteract(entity.getConntrollingPlayer())
            recalculateHighlight(entity.getConntrollingPlayer())

    protected abstract function recalculatePreview()
    abstract function getPreviewColorForCell(Cell _cell) returns CellPreviewColor
    abstract function getHighlightColorForCell(Player p, Cell cell) returns CellHighlightColor
    abstract function getHighlightRuneRuneForCell(Player p, Cell cell) returns CellHighlightRune
    abstract function onUIMouseEnter()
    abstract function onUIMouseLeave()
    abstract function recalculateHighlight(Player p)
    abstract function sendTargetOrder(Cell cell) returns boolean
    abstract function executeForKI(SequenzListenerStatus listener)

    function canBeActivatedByKey(string key) returns boolean
        return key == this.key

    function getCost() returns ActionCost
        return cost

    function tickCooldown()
        cost.tickCooldown()

    function canActivate() returns boolean
        if cost.canUse()
            return canActivateExtraCondition()
        return false

    protected function canActivateExtraCondition() returns boolean
        return true

    function activate()
        if hasOption(ActionTypeOption.INSTANT)
            Log.error("This function should not be called, as it is instant")
            return

        entity.selectAction(this)
        UIController.triggerOnActionChange(entity.getConntrollingPlayer().playingBoard)

    function hasOption(ActionTypeOption option) returns boolean
        return actionType.hasOption(option)

    function showAsPrimary() returns boolean
        return hasOption(ActionTypeOption.PRIMARY)

    function showAsSecondary() returns boolean
        if hasOption(ActionTypeOption.SPELL)
            return false
        return not hasOption(ActionTypeOption.PRIMARY)
    
    function setKey(string key)
        this.key = key

    protected function createBasicTooltip() returns Tooltip
        let tt = Tooltip.create(getExtendedName())
        cost.setupTooltipCost(tt)
        tt.setKey(key)
        return tt

    function getIcon() returns string
        return actionType.getIcon()

    function getName() returns string
        return actionType.getName()

    function getExtendedName() returns string
        return getName()

    function toString() returns string
        return "Action '"+getName()+"'"