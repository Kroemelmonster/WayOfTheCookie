package ActionCost

import initlater BoardEntity
import Tooltip

public interface ActionCostData
    function getAP() returns int
    function isApFill() returns boolean

public class ActionCostPreset implements ActionCostData
    static function create(ActionCostPreset copy) returns ActionCostPreset
        return new ActionCostPreset(copy.ap, copy.apFill, copy.maxCooldown, copy.maxCharges, copy.mana)

    static function create(int ap, boolean apFill) returns ActionCostPreset
        return new ActionCostPreset(ap, apFill, -1, -1, -1)

    static function create(int ap, boolean apFill, int maxCooldown) returns ActionCostPreset
        return new ActionCostPreset(ap, apFill, maxCooldown, -1, -1)

    static function createWithMana(int ap, boolean apFill, int mana) returns ActionCostPreset
        return new ActionCostPreset(ap, apFill, -1, -1, mana)

    protected int ap
    protected boolean apFill
    protected int maxCooldown
    protected int maxCharges
    protected int mana

    private construct(int ap, boolean apFill, int maxCooldown, int maxCharges, int mana)
        this.ap = ap
        this.apFill = apFill
        this.maxCooldown = maxCooldown
        this.maxCharges = maxCharges
        this.mana = mana

    function addCharges(int charges)
        if maxCharges == -1
            maxCharges = charges
        else
            maxCharges += charges

    function change(int ap, boolean apFill, int maxCooldown, int maxCharges)
        this.ap = ap
        this.apFill = apFill
        this.maxCooldown = maxCooldown
        this.maxCharges = maxCharges

    override function getAP() returns int
        return ap

    function getAPAsText() returns string
        if apFill
            return ap.toString() + "+"
        return ap.toString()

    override function isApFill() returns boolean
        return apFill
            
    function getMaxCharges() returns int
        return maxCharges

    function getMaxCooldown() returns int
        return maxCooldown
    
    function getMana() returns int
        return mana

    function hasMana() returns boolean
        return mana >= 0
    
    function hasCooldown() returns boolean
        return maxCooldown > 0

    function hasCharges() returns boolean
        return maxCharges > 0

    function setupTooltipCost(Tooltip tt)
        tt.addIcon(KStringUtils.primaryString(getAPAsText())
        , "UI/Tooltip/TooltipAddonAPIcon.dds")
        if hasMana()
            tt.addIcon(KStringUtils.primaryString(mana.toString())
            , "UI/Tooltip/TooltipAddonManaIcon.dds")
        if hasCooldown()
            tt.addIcon(KStringUtils.primaryString(maxCooldown.toString())
            , "UI/Tooltip/TooltipAddonCooldownIcon.dds")

    function createTooltipLines() returns LinkedList<string>
        return createTooltipLines(null)

    protected function createTooltipLines(ActionCost used) returns LinkedList<string>
        let lines = new LinkedList<string>()
        ..add(KStringUtils.stat("Cost", getAPAsText()))
        if hasMana()
            lines.add(KStringUtils.stat("Mana", mana.toString()))
        if hasCooldown()
            var str = ""
            if used != null
                if used.cooldown <= 0
                    str = "Ready"
                else
                    str = used.cooldown.toString()
                str += " | "
            str += maxCooldown.toString()
            lines.add(KStringUtils.stat("Cooldown", str))
        if hasCharges()
            var str = ""
            if used != null
                str = used.getCurrentCharges().toString()
                str += " / "
            str += maxCharges.toString()
            lines.add(KStringUtils.stat("Charges", str))
        return lines

public class ActionCost implements ActionCostData
    private static ActionCost TEMP = new ActionCost(null, ActionCostPreset.create(-1, false))

    static function create(BoardEntity entity) returns ActionCost
        return new ActionCost(entity, null)

    static function create(BoardEntity entity, ActionCostPreset preset) returns ActionCost
        return new ActionCost(entity, preset)

    static function getTempCost(BoardEntity entity, int ap, boolean apFill) returns ActionCost
        // TODO MEEEEEH
        TEMP.entity = entity
        TEMP.basic.ap = ap
        TEMP.basic.apFill = apFill
        return TEMP

    private BoardEntity entity
    private ActionCostPreset basic
    protected int cooldown
    protected int usedCharges

    private construct(BoardEntity entity, ActionCostPreset basic)
        this.basic = basic
        this.entity = entity
        this.cooldown = -1
        this.usedCharges = 0
        if basic.mana > 0 and entity.getType() != EntityType.HERO
            Log.error("Tried to create a Action with mana that is not owned by a hero")

    function setBasic(ActionCostPreset basic)
        this.basic = basic

    override function getAP() returns int
        return basic.getAP()

    override function isApFill() returns boolean
        return basic.isApFill()

    function setupTooltipCost(Tooltip tt)
        basic.setupTooltipCost(tt)

    function createTooltipLines() returns LinkedList<string>
        return basic.createTooltipLines(this)

    function canUse() returns boolean
        if basic.ap > entity.getRemainingAP()
            return false
        if isOnCooldown()
            return false
        if not hasEnoughCharges()
            return false
        if not hasEnoughMana()
            return false
        return true

    function pay(int additionalAP)
        if basic.apFill
            entity.removeAP(1000)
        else
            entity.removeAP(basic.ap + additionalAP)
        cooldown = basic.maxCooldown + 1
        if basic.maxCharges > 0
            usedCharges++
        if basic.mana >= 0
            entity.toHero().payMana(basic.mana)

    function tickCooldown()
        if isOnCooldown()
            cooldown -= 1

    function getCurrentCharges() returns int
        return basic.maxCharges - usedCharges

    function getCurrentCooldown() returns int
        return cooldown

    function hasEnoughCharges() returns boolean
        return basic.maxCharges < 0 or usedCharges < basic.maxCharges

    function hasEnoughMana() returns boolean
        return basic.mana < 0 or entity.toHero().getMana() >= basic.mana

    function isOnCooldown() returns boolean
        return cooldown > 0
        
