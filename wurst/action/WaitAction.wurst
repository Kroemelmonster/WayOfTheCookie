package WaitAction

import Action
import InstantAction
import Icons

import OrderSystem
import UITooltip

import initlater BoardStack
import BoardTrigger

public class WaitAction extends InstantAction

    private constant static string KEY = "W"


    private Tooltip tt
    construct(BoardStack stack)
        super(stack, Icons.bTNPatrol, "Wait")
        tt = Tooltip.create(name, KEY)
        ..addLine("Postpone this turn")
        ..addLine("")
        ..addLine("")

        
    override function canActivate() returns boolean
        let initiative = stack.getPlayer().playingBoard.getInitiative()
        let isWaiting = initiative.getCurrent().isWaiting()
        return isWaiting == false

    override function activate()
        let board = stack.getPlayer().playingBoard
        board.getInitiative().wait()
        OrderSystem.endOrder(board)

    override function onUIMouseEnter()
        showPreview()

    override function onUIMouseLeave()
        UITooltip.hide(stack.getPlayer())

    private function showPreview()
        if canActivate()
            tt.setLine(1, null)
            tt.setLine(2, null)
        else
            tt.setLine(1, "")
            tt.setLine(2, "You already waited this turn")
        tt.display(stack.getPlayer(), false)

    override function canBeActivatedByKey(string key) returns boolean
        return key == KEY

    override function executeForKI(SequenzListenerStatus listener)
        activate()
        listener.continue(0)