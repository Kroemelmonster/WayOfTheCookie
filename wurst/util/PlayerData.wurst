package PlayerData

import LinkedList

import initlater Cell
import initlater Board
import initlater BoardStack
import initlater Hero
import initlater UIButton
import initlater UIEntityWindow
import initlater UIMenuWorldConsole
import initlater UINPCWindow
import initlater UIDialog
import initlater KeyPressSystem
import initlater BoardEntity
import initlater UIWindowSpellBook
import initlater UIWindow
import initlater UIHeroWindow

public abstract class KeyPressListener
    abstract function onEvent(Player p, string key)

public abstract class PlayerListener
    abstract function onEvent(Player p)

public tuple mousePosition(Cell cell, Cell nearbyCell)

public Player array playerData
constant LinkedList<Player> activePlayers = new LinkedList<Player>

public enum PlayerRelationship
    SELF
    ALLY
    ENEMY
    NEUTRAL


public class Player
    boolean mousePressed = false
    int mousePressedIndex = 0
    UIButton mouseOverButton = null

    DialogInfo dialogInfo = new DialogInfo()

    UIMenuWorldConsoleInfo worldConsoleInfo = new UIMenuWorldConsoleInfo()
    UINPCWindowInfo npcWindowInfo = new UINPCWindowInfo()
    UIEntityWindowInfo stackWindowInfo = new UIEntityWindowInfo()
    UIHeroWindowInfo heroWindoInfo = new UIHeroWindowInfo()
    UISpellBookInfo spellBookInfo = new UISpellBookInfo()

    mousePosition currentMousePosition

    BoardEntity currentSelectedEntity

    Board playingBoard
    Hero hero
    boolean mouse3DEnabled = true
    boolean isConntrolledByKI
    color c

    LinkedList<KeyPressListener> keyPressListener = new LinkedList<KeyPressListener>()
    LinkedList<UIWindow> currentOpenWindows = new LinkedList<UIWindow>()

    player blzPlayer

    static Player NEUTRAL_AGGRESIVE
    static Player NEUTRAL_PASSIVE

    private construct(player p)
        blzPlayer = p
        isConntrolledByKI = p.isIngame() == false
        
        var playerColor = PLAYER_COLOR_RED
        if p == players[PLAYER_NEUTRAL_PASSIVE]
            playerColor = PLAYER_COLOR_SNOW
        if this.isLocal()
            playerColor = PLAYER_COLOR_GREEN
            
        this.c = playerColor.toColor()
        blzPlayer.setColor(playerColor)

        if isConntrolledByKI == false
            registerPlayerOnAnyKeyPresses(p)
            activePlayers.add(this)

    function isLocal() returns boolean
        return blzPlayer == localPlayer

    function toString() returns string
        return blzPlayer.getNameColored()

    function onAnyKeyPress(KeyPressListener listener)
        keyPressListener.add(listener)

    function getRelationshipStatusTo(Player other) returns PlayerRelationship
        if other == null
            return PlayerRelationship.NEUTRAL
        if this == other
            return PlayerRelationship.SELF
        else if this == NEUTRAL_PASSIVE
            return PlayerRelationship.NEUTRAL
        return PlayerRelationship.ENEMY

    function isEnemyTo(Player other) returns boolean
        return getRelationshipStatusTo(other) == PlayerRelationship.ENEMY

    function isAllyTo(Player other) returns boolean
        let status = getRelationshipStatusTo(other)
        return status == PlayerRelationship.SELF or status == PlayerRelationship.ALLY

    @inline
    function hasBoard() returns boolean
        return playingBoard != null

    static function setup()
        playerData[players[0].getId()] = new Player(players[0])
        playerData[players[1].getId()] = new Player(players[1])
        NEUTRAL_AGGRESIVE = new Player(players[PLAYER_NEUTRAL_AGGRESSIVE])
        NEUTRAL_PASSIVE = new Player(players[PLAYER_NEUTRAL_PASSIVE])
        
        playerData[players[PLAYER_NEUTRAL_AGGRESSIVE].getId()] = NEUTRAL_AGGRESIVE
        playerData[players[PLAYER_NEUTRAL_PASSIVE].getId()] = NEUTRAL_PASSIVE

    static function forEachActive(LLItrClosure<Player> itr)
        activePlayers.forEach(itr)


public function player.getData() returns Player
    return playerData[this.getId()]

public function GetTriggerPlayerData() returns Player
    return GetTriggerPlayer().getData()
        