package Initializer
import NoWurst

import LinkedList
import Listener
import ClosureTimers
import Printing

public enum InitializerNames
    SYSTEM
    UI
    DOODADS
    STATI
    SPELLS
    ACTIONS
    PASSIVES
    STACKS
    ITEMS
    SKILLTREES
    HEROES
    DATA
    WORLD_ARMIES
    WORLD_NPC
    WORLD_BOARDS
    WORLD_HEROES
    WORLD

constant NAMES = [
    "Start Systems",
    "Draw User Interface",
    "Skulp the Enviromant",
    "Test Buffs'n Debuffs",
    "Prepare Spells",
    "Muster Actions",
    "Train Passives",
    "Write Unit Stats",
    "Forge Items",
    "Think about Skilltrees",
    "Thinker all together",
    "Come up with unique Heroes",
    "Drop Enemies",
    "Open Shops",
    "Plane Battlefields",
    "Wake up Heroes",
    "Start"
]

init
    nullTimer() ->
        Initializer.start()

class Weighted<T>
    T value
    int weight
        
    construct(T value, int weight)
        this.value = value
        this.weight = weight

    function compare(Weighted<T> other) returns int
        if weight == other.weight
            return 0
        if weight > other.weight
            return 1
        return -1

public class Initializer
    private static LinkedList<Weighted<SequenzListener>> array initializers

    static function register(InitializerNames name, SequenzListener next)
        register(name, 50, next)

    static function register(InitializerNames name, int weight, SequenzListener next)
        if initializers[name castTo int] == null
            initializers[name castTo int] = new LinkedList<Weighted<SequenzListener>>
       
        initializers[name castTo int].add(new Weighted<SequenzListener>(next, weight))

    protected static function start()
        run(0)
        
    protected static function run(int i)
        if initializers[i] != null and not initializers[i].isEmpty()
            initializers[i].sortWith() (Weighted<SequenzListener> o1, Weighted<SequenzListener> o2) ->
                return o1.compare(o2)
            //Log.info(NAMES[i] + " (" + initializers[i].size().toString()+")")
            while not initializers[i].isEmpty()
                let next = initializers[i].dequeue()
                next.value.continue()
                destroy next
            destroy initializers[i]
        else
            Log.error("Initilizer " + NAMES[i] + " is Empty")

        if (i + 1) < NAMES.length
            doAfter(0.03) ->
                run(i + 1)
            

